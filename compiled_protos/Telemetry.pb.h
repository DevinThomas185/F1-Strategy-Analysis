// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Telemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Telemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Telemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Telemetry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Telemetry_2eproto;
class Telemetry;
struct TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Telemetry* Arena::CreateMaybeMessage<::Telemetry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Telemetry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Telemetry) */ {
 public:
  inline Telemetry() : Telemetry(nullptr) {}
  ~Telemetry() override;
  explicit PROTOBUF_CONSTEXPR Telemetry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Telemetry(const Telemetry& from);
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Telemetry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(Telemetry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Telemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Telemetry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Telemetry& from) {
    Telemetry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Telemetry";
  }
  protected:
  explicit Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kSteerFieldNumber = 3,
    kBrakeFieldNumber = 4,
    kClutchFieldNumber = 5,
    kGearFieldNumber = 6,
    kEngineRpmFieldNumber = 7,
    kDrsFieldNumber = 8,
    kRevLightsPercentFieldNumber = 9,
    kRevLightsBitValueFieldNumber = 10,
    kRearLeftBrakeTemperatureFieldNumber = 11,
    kRearRightBrakeTemperatureFieldNumber = 12,
    kFrontLeftBrakeTemperatureFieldNumber = 13,
    kFrontRightBrakeTemperatureFieldNumber = 14,
    kRearLeftTyreSurfaceTemperatureFieldNumber = 15,
    kRearRightTyreSurfaceTemperatureFieldNumber = 16,
    kFrontLeftTyreSurfaceTemperatureFieldNumber = 17,
    kFrontRightTyreSurfaceTemperatureFieldNumber = 18,
    kRearLeftTyreInnerTemperatureFieldNumber = 19,
    kRearRightTyreInnerTemperatureFieldNumber = 20,
    kFrontLeftTyreInnerTemperatureFieldNumber = 21,
    kFrontRightTyreInnerTemperatureFieldNumber = 22,
    kEngineTemperatureFieldNumber = 23,
    kRearLeftTyrePressureFieldNumber = 24,
    kRearRightTyrePressureFieldNumber = 25,
    kFrontLeftTyrePressureFieldNumber = 26,
    kFrontRightTyrePressureFieldNumber = 27,
    kRearLeftSurfaceTypeFieldNumber = 28,
    kRearRightSurfaceTypeFieldNumber = 29,
    kFrontLeftSurfaceTypeFieldNumber = 30,
    kFrontRightSurfaceTypeFieldNumber = 31,
    kLapDistanceFieldNumber = 32,
    kFuelInTankFieldNumber = 33,
    kTyresAgeLapsFieldNumber = 34,
    kErsStoreEnergyFieldNumber = 35,
    kErsDeployModeFieldNumber = 36,
    kErsHarvestedThisLapMgukFieldNumber = 37,
    kErsHarvestedThisLapMguhFieldNumber = 38,
    kErsDeployedThisLapFieldNumber = 39,
    kRearLeftTyreWearFieldNumber = 40,
    kRearRightTyreWearFieldNumber = 41,
    kFrontLeftTyreWearFieldNumber = 42,
    kFrontRightTyreWearFieldNumber = 43,
    kRearLeftTyreDamageFieldNumber = 44,
    kRearRightTyreDamageFieldNumber = 45,
    kFrontLeftTyreDamageFieldNumber = 46,
    kFrontRightTyreDamageFieldNumber = 47,
    kGearBoxDamageFieldNumber = 48,
    kEngineDamageFieldNumber = 49,
    kEngineCeWearFieldNumber = 50,
    kEngineIceWearFieldNumber = 51,
    kEngineTcWearFieldNumber = 52,
    kEngineEsWearFieldNumber = 53,
    kEngineMguhWearFieldNumber = 54,
    kEngineMgukWearFieldNumber = 55,
    kRearLeftSuspensionPositionFieldNumber = 56,
    kRearRightSuspensionPositionFieldNumber = 57,
    kFrontLeftSuspensionPositionFieldNumber = 58,
    kFrontRightSuspensionPositionFieldNumber = 59,
    kRearLeftWheelSpeedFieldNumber = 60,
    kRearRightWheelSpeedFieldNumber = 61,
    kFrontLeftWheelSpeedFieldNumber = 62,
    kFrontRightWheelSpeedFieldNumber = 63,
    kRearLeftWheelSlipFieldNumber = 64,
    kRearRightWheelSlipFieldNumber = 65,
    kFrontLeftWheelSlipFieldNumber = 66,
    kFrontRightWheelSlipFieldNumber = 67,
    kWorldPositionXFieldNumber = 68,
    kWorldPositionYFieldNumber = 69,
    kWorldPositionZFieldNumber = 70,
    kGForceLateralFieldNumber = 71,
    kGForceLongitudinalFieldNumber = 72,
    kGForceVerticalFieldNumber = 73,
    kYawFieldNumber = 74,
    kPitchFieldNumber = 75,
    kRollFieldNumber = 76,
  };
  // uint32 speed = 1;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // float throttle = 2;
  void clear_throttle();
  float throttle() const;
  void set_throttle(float value);
  private:
  float _internal_throttle() const;
  void _internal_set_throttle(float value);
  public:

  // float steer = 3;
  void clear_steer();
  float steer() const;
  void set_steer(float value);
  private:
  float _internal_steer() const;
  void _internal_set_steer(float value);
  public:

  // float brake = 4;
  void clear_brake();
  float brake() const;
  void set_brake(float value);
  private:
  float _internal_brake() const;
  void _internal_set_brake(float value);
  public:

  // uint32 clutch = 5;
  void clear_clutch();
  uint32_t clutch() const;
  void set_clutch(uint32_t value);
  private:
  uint32_t _internal_clutch() const;
  void _internal_set_clutch(uint32_t value);
  public:

  // int32 gear = 6;
  void clear_gear();
  int32_t gear() const;
  void set_gear(int32_t value);
  private:
  int32_t _internal_gear() const;
  void _internal_set_gear(int32_t value);
  public:

  // uint32 engine_rpm = 7;
  void clear_engine_rpm();
  uint32_t engine_rpm() const;
  void set_engine_rpm(uint32_t value);
  private:
  uint32_t _internal_engine_rpm() const;
  void _internal_set_engine_rpm(uint32_t value);
  public:

  // uint32 drs = 8;
  void clear_drs();
  uint32_t drs() const;
  void set_drs(uint32_t value);
  private:
  uint32_t _internal_drs() const;
  void _internal_set_drs(uint32_t value);
  public:

  // uint32 rev_lights_percent = 9;
  void clear_rev_lights_percent();
  uint32_t rev_lights_percent() const;
  void set_rev_lights_percent(uint32_t value);
  private:
  uint32_t _internal_rev_lights_percent() const;
  void _internal_set_rev_lights_percent(uint32_t value);
  public:

  // uint32 rev_lights_bit_value = 10;
  void clear_rev_lights_bit_value();
  uint32_t rev_lights_bit_value() const;
  void set_rev_lights_bit_value(uint32_t value);
  private:
  uint32_t _internal_rev_lights_bit_value() const;
  void _internal_set_rev_lights_bit_value(uint32_t value);
  public:

  // uint32 rear_left_brake_temperature = 11;
  void clear_rear_left_brake_temperature();
  uint32_t rear_left_brake_temperature() const;
  void set_rear_left_brake_temperature(uint32_t value);
  private:
  uint32_t _internal_rear_left_brake_temperature() const;
  void _internal_set_rear_left_brake_temperature(uint32_t value);
  public:

  // uint32 rear_right_brake_temperature = 12;
  void clear_rear_right_brake_temperature();
  uint32_t rear_right_brake_temperature() const;
  void set_rear_right_brake_temperature(uint32_t value);
  private:
  uint32_t _internal_rear_right_brake_temperature() const;
  void _internal_set_rear_right_brake_temperature(uint32_t value);
  public:

  // uint32 front_left_brake_temperature = 13;
  void clear_front_left_brake_temperature();
  uint32_t front_left_brake_temperature() const;
  void set_front_left_brake_temperature(uint32_t value);
  private:
  uint32_t _internal_front_left_brake_temperature() const;
  void _internal_set_front_left_brake_temperature(uint32_t value);
  public:

  // uint32 front_right_brake_temperature = 14;
  void clear_front_right_brake_temperature();
  uint32_t front_right_brake_temperature() const;
  void set_front_right_brake_temperature(uint32_t value);
  private:
  uint32_t _internal_front_right_brake_temperature() const;
  void _internal_set_front_right_brake_temperature(uint32_t value);
  public:

  // uint32 rear_left_tyre_surface_temperature = 15;
  void clear_rear_left_tyre_surface_temperature();
  uint32_t rear_left_tyre_surface_temperature() const;
  void set_rear_left_tyre_surface_temperature(uint32_t value);
  private:
  uint32_t _internal_rear_left_tyre_surface_temperature() const;
  void _internal_set_rear_left_tyre_surface_temperature(uint32_t value);
  public:

  // uint32 rear_right_tyre_surface_temperature = 16;
  void clear_rear_right_tyre_surface_temperature();
  uint32_t rear_right_tyre_surface_temperature() const;
  void set_rear_right_tyre_surface_temperature(uint32_t value);
  private:
  uint32_t _internal_rear_right_tyre_surface_temperature() const;
  void _internal_set_rear_right_tyre_surface_temperature(uint32_t value);
  public:

  // uint32 front_left_tyre_surface_temperature = 17;
  void clear_front_left_tyre_surface_temperature();
  uint32_t front_left_tyre_surface_temperature() const;
  void set_front_left_tyre_surface_temperature(uint32_t value);
  private:
  uint32_t _internal_front_left_tyre_surface_temperature() const;
  void _internal_set_front_left_tyre_surface_temperature(uint32_t value);
  public:

  // uint32 front_right_tyre_surface_temperature = 18;
  void clear_front_right_tyre_surface_temperature();
  uint32_t front_right_tyre_surface_temperature() const;
  void set_front_right_tyre_surface_temperature(uint32_t value);
  private:
  uint32_t _internal_front_right_tyre_surface_temperature() const;
  void _internal_set_front_right_tyre_surface_temperature(uint32_t value);
  public:

  // uint32 rear_left_tyre_inner_temperature = 19;
  void clear_rear_left_tyre_inner_temperature();
  uint32_t rear_left_tyre_inner_temperature() const;
  void set_rear_left_tyre_inner_temperature(uint32_t value);
  private:
  uint32_t _internal_rear_left_tyre_inner_temperature() const;
  void _internal_set_rear_left_tyre_inner_temperature(uint32_t value);
  public:

  // uint32 rear_right_tyre_inner_temperature = 20;
  void clear_rear_right_tyre_inner_temperature();
  uint32_t rear_right_tyre_inner_temperature() const;
  void set_rear_right_tyre_inner_temperature(uint32_t value);
  private:
  uint32_t _internal_rear_right_tyre_inner_temperature() const;
  void _internal_set_rear_right_tyre_inner_temperature(uint32_t value);
  public:

  // uint32 front_left_tyre_inner_temperature = 21;
  void clear_front_left_tyre_inner_temperature();
  uint32_t front_left_tyre_inner_temperature() const;
  void set_front_left_tyre_inner_temperature(uint32_t value);
  private:
  uint32_t _internal_front_left_tyre_inner_temperature() const;
  void _internal_set_front_left_tyre_inner_temperature(uint32_t value);
  public:

  // uint32 front_right_tyre_inner_temperature = 22;
  void clear_front_right_tyre_inner_temperature();
  uint32_t front_right_tyre_inner_temperature() const;
  void set_front_right_tyre_inner_temperature(uint32_t value);
  private:
  uint32_t _internal_front_right_tyre_inner_temperature() const;
  void _internal_set_front_right_tyre_inner_temperature(uint32_t value);
  public:

  // uint32 engine_temperature = 23;
  void clear_engine_temperature();
  uint32_t engine_temperature() const;
  void set_engine_temperature(uint32_t value);
  private:
  uint32_t _internal_engine_temperature() const;
  void _internal_set_engine_temperature(uint32_t value);
  public:

  // float rear_left_tyre_pressure = 24;
  void clear_rear_left_tyre_pressure();
  float rear_left_tyre_pressure() const;
  void set_rear_left_tyre_pressure(float value);
  private:
  float _internal_rear_left_tyre_pressure() const;
  void _internal_set_rear_left_tyre_pressure(float value);
  public:

  // float rear_right_tyre_pressure = 25;
  void clear_rear_right_tyre_pressure();
  float rear_right_tyre_pressure() const;
  void set_rear_right_tyre_pressure(float value);
  private:
  float _internal_rear_right_tyre_pressure() const;
  void _internal_set_rear_right_tyre_pressure(float value);
  public:

  // float front_left_tyre_pressure = 26;
  void clear_front_left_tyre_pressure();
  float front_left_tyre_pressure() const;
  void set_front_left_tyre_pressure(float value);
  private:
  float _internal_front_left_tyre_pressure() const;
  void _internal_set_front_left_tyre_pressure(float value);
  public:

  // float front_right_tyre_pressure = 27;
  void clear_front_right_tyre_pressure();
  float front_right_tyre_pressure() const;
  void set_front_right_tyre_pressure(float value);
  private:
  float _internal_front_right_tyre_pressure() const;
  void _internal_set_front_right_tyre_pressure(float value);
  public:

  // uint32 rear_left_surface_type = 28;
  void clear_rear_left_surface_type();
  uint32_t rear_left_surface_type() const;
  void set_rear_left_surface_type(uint32_t value);
  private:
  uint32_t _internal_rear_left_surface_type() const;
  void _internal_set_rear_left_surface_type(uint32_t value);
  public:

  // uint32 rear_right_surface_type = 29;
  void clear_rear_right_surface_type();
  uint32_t rear_right_surface_type() const;
  void set_rear_right_surface_type(uint32_t value);
  private:
  uint32_t _internal_rear_right_surface_type() const;
  void _internal_set_rear_right_surface_type(uint32_t value);
  public:

  // uint32 front_left_surface_type = 30;
  void clear_front_left_surface_type();
  uint32_t front_left_surface_type() const;
  void set_front_left_surface_type(uint32_t value);
  private:
  uint32_t _internal_front_left_surface_type() const;
  void _internal_set_front_left_surface_type(uint32_t value);
  public:

  // uint32 front_right_surface_type = 31;
  void clear_front_right_surface_type();
  uint32_t front_right_surface_type() const;
  void set_front_right_surface_type(uint32_t value);
  private:
  uint32_t _internal_front_right_surface_type() const;
  void _internal_set_front_right_surface_type(uint32_t value);
  public:

  // float lap_distance = 32;
  void clear_lap_distance();
  float lap_distance() const;
  void set_lap_distance(float value);
  private:
  float _internal_lap_distance() const;
  void _internal_set_lap_distance(float value);
  public:

  // float fuel_in_tank = 33;
  void clear_fuel_in_tank();
  float fuel_in_tank() const;
  void set_fuel_in_tank(float value);
  private:
  float _internal_fuel_in_tank() const;
  void _internal_set_fuel_in_tank(float value);
  public:

  // uint32 tyres_age_laps = 34;
  void clear_tyres_age_laps();
  uint32_t tyres_age_laps() const;
  void set_tyres_age_laps(uint32_t value);
  private:
  uint32_t _internal_tyres_age_laps() const;
  void _internal_set_tyres_age_laps(uint32_t value);
  public:

  // float ers_store_energy = 35;
  void clear_ers_store_energy();
  float ers_store_energy() const;
  void set_ers_store_energy(float value);
  private:
  float _internal_ers_store_energy() const;
  void _internal_set_ers_store_energy(float value);
  public:

  // uint32 ers_deploy_mode = 36;
  void clear_ers_deploy_mode();
  uint32_t ers_deploy_mode() const;
  void set_ers_deploy_mode(uint32_t value);
  private:
  uint32_t _internal_ers_deploy_mode() const;
  void _internal_set_ers_deploy_mode(uint32_t value);
  public:

  // float ers_harvested_this_lap_mguk = 37;
  void clear_ers_harvested_this_lap_mguk();
  float ers_harvested_this_lap_mguk() const;
  void set_ers_harvested_this_lap_mguk(float value);
  private:
  float _internal_ers_harvested_this_lap_mguk() const;
  void _internal_set_ers_harvested_this_lap_mguk(float value);
  public:

  // float ers_harvested_this_lap_mguh = 38;
  void clear_ers_harvested_this_lap_mguh();
  float ers_harvested_this_lap_mguh() const;
  void set_ers_harvested_this_lap_mguh(float value);
  private:
  float _internal_ers_harvested_this_lap_mguh() const;
  void _internal_set_ers_harvested_this_lap_mguh(float value);
  public:

  // float ers_deployed_this_lap = 39;
  void clear_ers_deployed_this_lap();
  float ers_deployed_this_lap() const;
  void set_ers_deployed_this_lap(float value);
  private:
  float _internal_ers_deployed_this_lap() const;
  void _internal_set_ers_deployed_this_lap(float value);
  public:

  // float rear_left_tyre_wear = 40;
  void clear_rear_left_tyre_wear();
  float rear_left_tyre_wear() const;
  void set_rear_left_tyre_wear(float value);
  private:
  float _internal_rear_left_tyre_wear() const;
  void _internal_set_rear_left_tyre_wear(float value);
  public:

  // float rear_right_tyre_wear = 41;
  void clear_rear_right_tyre_wear();
  float rear_right_tyre_wear() const;
  void set_rear_right_tyre_wear(float value);
  private:
  float _internal_rear_right_tyre_wear() const;
  void _internal_set_rear_right_tyre_wear(float value);
  public:

  // float front_left_tyre_wear = 42;
  void clear_front_left_tyre_wear();
  float front_left_tyre_wear() const;
  void set_front_left_tyre_wear(float value);
  private:
  float _internal_front_left_tyre_wear() const;
  void _internal_set_front_left_tyre_wear(float value);
  public:

  // float front_right_tyre_wear = 43;
  void clear_front_right_tyre_wear();
  float front_right_tyre_wear() const;
  void set_front_right_tyre_wear(float value);
  private:
  float _internal_front_right_tyre_wear() const;
  void _internal_set_front_right_tyre_wear(float value);
  public:

  // uint32 rear_left_tyre_damage = 44;
  void clear_rear_left_tyre_damage();
  uint32_t rear_left_tyre_damage() const;
  void set_rear_left_tyre_damage(uint32_t value);
  private:
  uint32_t _internal_rear_left_tyre_damage() const;
  void _internal_set_rear_left_tyre_damage(uint32_t value);
  public:

  // uint32 rear_right_tyre_damage = 45;
  void clear_rear_right_tyre_damage();
  uint32_t rear_right_tyre_damage() const;
  void set_rear_right_tyre_damage(uint32_t value);
  private:
  uint32_t _internal_rear_right_tyre_damage() const;
  void _internal_set_rear_right_tyre_damage(uint32_t value);
  public:

  // uint32 front_left_tyre_damage = 46;
  void clear_front_left_tyre_damage();
  uint32_t front_left_tyre_damage() const;
  void set_front_left_tyre_damage(uint32_t value);
  private:
  uint32_t _internal_front_left_tyre_damage() const;
  void _internal_set_front_left_tyre_damage(uint32_t value);
  public:

  // uint32 front_right_tyre_damage = 47;
  void clear_front_right_tyre_damage();
  uint32_t front_right_tyre_damage() const;
  void set_front_right_tyre_damage(uint32_t value);
  private:
  uint32_t _internal_front_right_tyre_damage() const;
  void _internal_set_front_right_tyre_damage(uint32_t value);
  public:

  // uint32 gear_box_damage = 48;
  void clear_gear_box_damage();
  uint32_t gear_box_damage() const;
  void set_gear_box_damage(uint32_t value);
  private:
  uint32_t _internal_gear_box_damage() const;
  void _internal_set_gear_box_damage(uint32_t value);
  public:

  // uint32 engine_damage = 49;
  void clear_engine_damage();
  uint32_t engine_damage() const;
  void set_engine_damage(uint32_t value);
  private:
  uint32_t _internal_engine_damage() const;
  void _internal_set_engine_damage(uint32_t value);
  public:

  // uint32 engine_ce_wear = 50;
  void clear_engine_ce_wear();
  uint32_t engine_ce_wear() const;
  void set_engine_ce_wear(uint32_t value);
  private:
  uint32_t _internal_engine_ce_wear() const;
  void _internal_set_engine_ce_wear(uint32_t value);
  public:

  // uint32 engine_ice_wear = 51;
  void clear_engine_ice_wear();
  uint32_t engine_ice_wear() const;
  void set_engine_ice_wear(uint32_t value);
  private:
  uint32_t _internal_engine_ice_wear() const;
  void _internal_set_engine_ice_wear(uint32_t value);
  public:

  // uint32 engine_tc_wear = 52;
  void clear_engine_tc_wear();
  uint32_t engine_tc_wear() const;
  void set_engine_tc_wear(uint32_t value);
  private:
  uint32_t _internal_engine_tc_wear() const;
  void _internal_set_engine_tc_wear(uint32_t value);
  public:

  // uint32 engine_es_wear = 53;
  void clear_engine_es_wear();
  uint32_t engine_es_wear() const;
  void set_engine_es_wear(uint32_t value);
  private:
  uint32_t _internal_engine_es_wear() const;
  void _internal_set_engine_es_wear(uint32_t value);
  public:

  // uint32 engine_mguh_wear = 54;
  void clear_engine_mguh_wear();
  uint32_t engine_mguh_wear() const;
  void set_engine_mguh_wear(uint32_t value);
  private:
  uint32_t _internal_engine_mguh_wear() const;
  void _internal_set_engine_mguh_wear(uint32_t value);
  public:

  // uint32 engine_mguk_wear = 55;
  void clear_engine_mguk_wear();
  uint32_t engine_mguk_wear() const;
  void set_engine_mguk_wear(uint32_t value);
  private:
  uint32_t _internal_engine_mguk_wear() const;
  void _internal_set_engine_mguk_wear(uint32_t value);
  public:

  // float rear_left_suspension_position = 56;
  void clear_rear_left_suspension_position();
  float rear_left_suspension_position() const;
  void set_rear_left_suspension_position(float value);
  private:
  float _internal_rear_left_suspension_position() const;
  void _internal_set_rear_left_suspension_position(float value);
  public:

  // float rear_right_suspension_position = 57;
  void clear_rear_right_suspension_position();
  float rear_right_suspension_position() const;
  void set_rear_right_suspension_position(float value);
  private:
  float _internal_rear_right_suspension_position() const;
  void _internal_set_rear_right_suspension_position(float value);
  public:

  // float front_left_suspension_position = 58;
  void clear_front_left_suspension_position();
  float front_left_suspension_position() const;
  void set_front_left_suspension_position(float value);
  private:
  float _internal_front_left_suspension_position() const;
  void _internal_set_front_left_suspension_position(float value);
  public:

  // float front_right_suspension_position = 59;
  void clear_front_right_suspension_position();
  float front_right_suspension_position() const;
  void set_front_right_suspension_position(float value);
  private:
  float _internal_front_right_suspension_position() const;
  void _internal_set_front_right_suspension_position(float value);
  public:

  // float rear_left_wheel_speed = 60;
  void clear_rear_left_wheel_speed();
  float rear_left_wheel_speed() const;
  void set_rear_left_wheel_speed(float value);
  private:
  float _internal_rear_left_wheel_speed() const;
  void _internal_set_rear_left_wheel_speed(float value);
  public:

  // float rear_right_wheel_speed = 61;
  void clear_rear_right_wheel_speed();
  float rear_right_wheel_speed() const;
  void set_rear_right_wheel_speed(float value);
  private:
  float _internal_rear_right_wheel_speed() const;
  void _internal_set_rear_right_wheel_speed(float value);
  public:

  // float front_left_wheel_speed = 62;
  void clear_front_left_wheel_speed();
  float front_left_wheel_speed() const;
  void set_front_left_wheel_speed(float value);
  private:
  float _internal_front_left_wheel_speed() const;
  void _internal_set_front_left_wheel_speed(float value);
  public:

  // float front_right_wheel_speed = 63;
  void clear_front_right_wheel_speed();
  float front_right_wheel_speed() const;
  void set_front_right_wheel_speed(float value);
  private:
  float _internal_front_right_wheel_speed() const;
  void _internal_set_front_right_wheel_speed(float value);
  public:

  // float rear_left_wheel_slip = 64;
  void clear_rear_left_wheel_slip();
  float rear_left_wheel_slip() const;
  void set_rear_left_wheel_slip(float value);
  private:
  float _internal_rear_left_wheel_slip() const;
  void _internal_set_rear_left_wheel_slip(float value);
  public:

  // float rear_right_wheel_slip = 65;
  void clear_rear_right_wheel_slip();
  float rear_right_wheel_slip() const;
  void set_rear_right_wheel_slip(float value);
  private:
  float _internal_rear_right_wheel_slip() const;
  void _internal_set_rear_right_wheel_slip(float value);
  public:

  // float front_left_wheel_slip = 66;
  void clear_front_left_wheel_slip();
  float front_left_wheel_slip() const;
  void set_front_left_wheel_slip(float value);
  private:
  float _internal_front_left_wheel_slip() const;
  void _internal_set_front_left_wheel_slip(float value);
  public:

  // float front_right_wheel_slip = 67;
  void clear_front_right_wheel_slip();
  float front_right_wheel_slip() const;
  void set_front_right_wheel_slip(float value);
  private:
  float _internal_front_right_wheel_slip() const;
  void _internal_set_front_right_wheel_slip(float value);
  public:

  // float world_position_x = 68;
  void clear_world_position_x();
  float world_position_x() const;
  void set_world_position_x(float value);
  private:
  float _internal_world_position_x() const;
  void _internal_set_world_position_x(float value);
  public:

  // float world_position_y = 69;
  void clear_world_position_y();
  float world_position_y() const;
  void set_world_position_y(float value);
  private:
  float _internal_world_position_y() const;
  void _internal_set_world_position_y(float value);
  public:

  // float world_position_z = 70;
  void clear_world_position_z();
  float world_position_z() const;
  void set_world_position_z(float value);
  private:
  float _internal_world_position_z() const;
  void _internal_set_world_position_z(float value);
  public:

  // float g_force_lateral = 71;
  void clear_g_force_lateral();
  float g_force_lateral() const;
  void set_g_force_lateral(float value);
  private:
  float _internal_g_force_lateral() const;
  void _internal_set_g_force_lateral(float value);
  public:

  // float g_force_longitudinal = 72;
  void clear_g_force_longitudinal();
  float g_force_longitudinal() const;
  void set_g_force_longitudinal(float value);
  private:
  float _internal_g_force_longitudinal() const;
  void _internal_set_g_force_longitudinal(float value);
  public:

  // float g_force_vertical = 73;
  void clear_g_force_vertical();
  float g_force_vertical() const;
  void set_g_force_vertical(float value);
  private:
  float _internal_g_force_vertical() const;
  void _internal_set_g_force_vertical(float value);
  public:

  // float yaw = 74;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 75;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 76;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:Telemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t speed_;
    float throttle_;
    float steer_;
    float brake_;
    uint32_t clutch_;
    int32_t gear_;
    uint32_t engine_rpm_;
    uint32_t drs_;
    uint32_t rev_lights_percent_;
    uint32_t rev_lights_bit_value_;
    uint32_t rear_left_brake_temperature_;
    uint32_t rear_right_brake_temperature_;
    uint32_t front_left_brake_temperature_;
    uint32_t front_right_brake_temperature_;
    uint32_t rear_left_tyre_surface_temperature_;
    uint32_t rear_right_tyre_surface_temperature_;
    uint32_t front_left_tyre_surface_temperature_;
    uint32_t front_right_tyre_surface_temperature_;
    uint32_t rear_left_tyre_inner_temperature_;
    uint32_t rear_right_tyre_inner_temperature_;
    uint32_t front_left_tyre_inner_temperature_;
    uint32_t front_right_tyre_inner_temperature_;
    uint32_t engine_temperature_;
    float rear_left_tyre_pressure_;
    float rear_right_tyre_pressure_;
    float front_left_tyre_pressure_;
    float front_right_tyre_pressure_;
    uint32_t rear_left_surface_type_;
    uint32_t rear_right_surface_type_;
    uint32_t front_left_surface_type_;
    uint32_t front_right_surface_type_;
    float lap_distance_;
    float fuel_in_tank_;
    uint32_t tyres_age_laps_;
    float ers_store_energy_;
    uint32_t ers_deploy_mode_;
    float ers_harvested_this_lap_mguk_;
    float ers_harvested_this_lap_mguh_;
    float ers_deployed_this_lap_;
    float rear_left_tyre_wear_;
    float rear_right_tyre_wear_;
    float front_left_tyre_wear_;
    float front_right_tyre_wear_;
    uint32_t rear_left_tyre_damage_;
    uint32_t rear_right_tyre_damage_;
    uint32_t front_left_tyre_damage_;
    uint32_t front_right_tyre_damage_;
    uint32_t gear_box_damage_;
    uint32_t engine_damage_;
    uint32_t engine_ce_wear_;
    uint32_t engine_ice_wear_;
    uint32_t engine_tc_wear_;
    uint32_t engine_es_wear_;
    uint32_t engine_mguh_wear_;
    uint32_t engine_mguk_wear_;
    float rear_left_suspension_position_;
    float rear_right_suspension_position_;
    float front_left_suspension_position_;
    float front_right_suspension_position_;
    float rear_left_wheel_speed_;
    float rear_right_wheel_speed_;
    float front_left_wheel_speed_;
    float front_right_wheel_speed_;
    float rear_left_wheel_slip_;
    float rear_right_wheel_slip_;
    float front_left_wheel_slip_;
    float front_right_wheel_slip_;
    float world_position_x_;
    float world_position_y_;
    float world_position_z_;
    float g_force_lateral_;
    float g_force_longitudinal_;
    float g_force_vertical_;
    float yaw_;
    float pitch_;
    float roll_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Telemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Telemetry

// uint32 speed = 1;
inline void Telemetry::clear_speed() {
  _impl_.speed_ = 0u;
}
inline uint32_t Telemetry::_internal_speed() const {
  return _impl_.speed_;
}
inline uint32_t Telemetry::speed() const {
  // @@protoc_insertion_point(field_get:Telemetry.speed)
  return _internal_speed();
}
inline void Telemetry::_internal_set_speed(uint32_t value) {
  
  _impl_.speed_ = value;
}
inline void Telemetry::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Telemetry.speed)
}

// float throttle = 2;
inline void Telemetry::clear_throttle() {
  _impl_.throttle_ = 0;
}
inline float Telemetry::_internal_throttle() const {
  return _impl_.throttle_;
}
inline float Telemetry::throttle() const {
  // @@protoc_insertion_point(field_get:Telemetry.throttle)
  return _internal_throttle();
}
inline void Telemetry::_internal_set_throttle(float value) {
  
  _impl_.throttle_ = value;
}
inline void Telemetry::set_throttle(float value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:Telemetry.throttle)
}

// float steer = 3;
inline void Telemetry::clear_steer() {
  _impl_.steer_ = 0;
}
inline float Telemetry::_internal_steer() const {
  return _impl_.steer_;
}
inline float Telemetry::steer() const {
  // @@protoc_insertion_point(field_get:Telemetry.steer)
  return _internal_steer();
}
inline void Telemetry::_internal_set_steer(float value) {
  
  _impl_.steer_ = value;
}
inline void Telemetry::set_steer(float value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:Telemetry.steer)
}

// float brake = 4;
inline void Telemetry::clear_brake() {
  _impl_.brake_ = 0;
}
inline float Telemetry::_internal_brake() const {
  return _impl_.brake_;
}
inline float Telemetry::brake() const {
  // @@protoc_insertion_point(field_get:Telemetry.brake)
  return _internal_brake();
}
inline void Telemetry::_internal_set_brake(float value) {
  
  _impl_.brake_ = value;
}
inline void Telemetry::set_brake(float value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:Telemetry.brake)
}

// uint32 clutch = 5;
inline void Telemetry::clear_clutch() {
  _impl_.clutch_ = 0u;
}
inline uint32_t Telemetry::_internal_clutch() const {
  return _impl_.clutch_;
}
inline uint32_t Telemetry::clutch() const {
  // @@protoc_insertion_point(field_get:Telemetry.clutch)
  return _internal_clutch();
}
inline void Telemetry::_internal_set_clutch(uint32_t value) {
  
  _impl_.clutch_ = value;
}
inline void Telemetry::set_clutch(uint32_t value) {
  _internal_set_clutch(value);
  // @@protoc_insertion_point(field_set:Telemetry.clutch)
}

// int32 gear = 6;
inline void Telemetry::clear_gear() {
  _impl_.gear_ = 0;
}
inline int32_t Telemetry::_internal_gear() const {
  return _impl_.gear_;
}
inline int32_t Telemetry::gear() const {
  // @@protoc_insertion_point(field_get:Telemetry.gear)
  return _internal_gear();
}
inline void Telemetry::_internal_set_gear(int32_t value) {
  
  _impl_.gear_ = value;
}
inline void Telemetry::set_gear(int32_t value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:Telemetry.gear)
}

// uint32 engine_rpm = 7;
inline void Telemetry::clear_engine_rpm() {
  _impl_.engine_rpm_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_rpm() const {
  return _impl_.engine_rpm_;
}
inline uint32_t Telemetry::engine_rpm() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_rpm)
  return _internal_engine_rpm();
}
inline void Telemetry::_internal_set_engine_rpm(uint32_t value) {
  
  _impl_.engine_rpm_ = value;
}
inline void Telemetry::set_engine_rpm(uint32_t value) {
  _internal_set_engine_rpm(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_rpm)
}

// uint32 drs = 8;
inline void Telemetry::clear_drs() {
  _impl_.drs_ = 0u;
}
inline uint32_t Telemetry::_internal_drs() const {
  return _impl_.drs_;
}
inline uint32_t Telemetry::drs() const {
  // @@protoc_insertion_point(field_get:Telemetry.drs)
  return _internal_drs();
}
inline void Telemetry::_internal_set_drs(uint32_t value) {
  
  _impl_.drs_ = value;
}
inline void Telemetry::set_drs(uint32_t value) {
  _internal_set_drs(value);
  // @@protoc_insertion_point(field_set:Telemetry.drs)
}

// uint32 rev_lights_percent = 9;
inline void Telemetry::clear_rev_lights_percent() {
  _impl_.rev_lights_percent_ = 0u;
}
inline uint32_t Telemetry::_internal_rev_lights_percent() const {
  return _impl_.rev_lights_percent_;
}
inline uint32_t Telemetry::rev_lights_percent() const {
  // @@protoc_insertion_point(field_get:Telemetry.rev_lights_percent)
  return _internal_rev_lights_percent();
}
inline void Telemetry::_internal_set_rev_lights_percent(uint32_t value) {
  
  _impl_.rev_lights_percent_ = value;
}
inline void Telemetry::set_rev_lights_percent(uint32_t value) {
  _internal_set_rev_lights_percent(value);
  // @@protoc_insertion_point(field_set:Telemetry.rev_lights_percent)
}

// uint32 rev_lights_bit_value = 10;
inline void Telemetry::clear_rev_lights_bit_value() {
  _impl_.rev_lights_bit_value_ = 0u;
}
inline uint32_t Telemetry::_internal_rev_lights_bit_value() const {
  return _impl_.rev_lights_bit_value_;
}
inline uint32_t Telemetry::rev_lights_bit_value() const {
  // @@protoc_insertion_point(field_get:Telemetry.rev_lights_bit_value)
  return _internal_rev_lights_bit_value();
}
inline void Telemetry::_internal_set_rev_lights_bit_value(uint32_t value) {
  
  _impl_.rev_lights_bit_value_ = value;
}
inline void Telemetry::set_rev_lights_bit_value(uint32_t value) {
  _internal_set_rev_lights_bit_value(value);
  // @@protoc_insertion_point(field_set:Telemetry.rev_lights_bit_value)
}

// uint32 rear_left_brake_temperature = 11;
inline void Telemetry::clear_rear_left_brake_temperature() {
  _impl_.rear_left_brake_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_left_brake_temperature() const {
  return _impl_.rear_left_brake_temperature_;
}
inline uint32_t Telemetry::rear_left_brake_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_brake_temperature)
  return _internal_rear_left_brake_temperature();
}
inline void Telemetry::_internal_set_rear_left_brake_temperature(uint32_t value) {
  
  _impl_.rear_left_brake_temperature_ = value;
}
inline void Telemetry::set_rear_left_brake_temperature(uint32_t value) {
  _internal_set_rear_left_brake_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_brake_temperature)
}

// uint32 rear_right_brake_temperature = 12;
inline void Telemetry::clear_rear_right_brake_temperature() {
  _impl_.rear_right_brake_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_right_brake_temperature() const {
  return _impl_.rear_right_brake_temperature_;
}
inline uint32_t Telemetry::rear_right_brake_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_brake_temperature)
  return _internal_rear_right_brake_temperature();
}
inline void Telemetry::_internal_set_rear_right_brake_temperature(uint32_t value) {
  
  _impl_.rear_right_brake_temperature_ = value;
}
inline void Telemetry::set_rear_right_brake_temperature(uint32_t value) {
  _internal_set_rear_right_brake_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_brake_temperature)
}

// uint32 front_left_brake_temperature = 13;
inline void Telemetry::clear_front_left_brake_temperature() {
  _impl_.front_left_brake_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_front_left_brake_temperature() const {
  return _impl_.front_left_brake_temperature_;
}
inline uint32_t Telemetry::front_left_brake_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_brake_temperature)
  return _internal_front_left_brake_temperature();
}
inline void Telemetry::_internal_set_front_left_brake_temperature(uint32_t value) {
  
  _impl_.front_left_brake_temperature_ = value;
}
inline void Telemetry::set_front_left_brake_temperature(uint32_t value) {
  _internal_set_front_left_brake_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_brake_temperature)
}

// uint32 front_right_brake_temperature = 14;
inline void Telemetry::clear_front_right_brake_temperature() {
  _impl_.front_right_brake_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_front_right_brake_temperature() const {
  return _impl_.front_right_brake_temperature_;
}
inline uint32_t Telemetry::front_right_brake_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_brake_temperature)
  return _internal_front_right_brake_temperature();
}
inline void Telemetry::_internal_set_front_right_brake_temperature(uint32_t value) {
  
  _impl_.front_right_brake_temperature_ = value;
}
inline void Telemetry::set_front_right_brake_temperature(uint32_t value) {
  _internal_set_front_right_brake_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_brake_temperature)
}

// uint32 rear_left_tyre_surface_temperature = 15;
inline void Telemetry::clear_rear_left_tyre_surface_temperature() {
  _impl_.rear_left_tyre_surface_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_left_tyre_surface_temperature() const {
  return _impl_.rear_left_tyre_surface_temperature_;
}
inline uint32_t Telemetry::rear_left_tyre_surface_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_tyre_surface_temperature)
  return _internal_rear_left_tyre_surface_temperature();
}
inline void Telemetry::_internal_set_rear_left_tyre_surface_temperature(uint32_t value) {
  
  _impl_.rear_left_tyre_surface_temperature_ = value;
}
inline void Telemetry::set_rear_left_tyre_surface_temperature(uint32_t value) {
  _internal_set_rear_left_tyre_surface_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_tyre_surface_temperature)
}

// uint32 rear_right_tyre_surface_temperature = 16;
inline void Telemetry::clear_rear_right_tyre_surface_temperature() {
  _impl_.rear_right_tyre_surface_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_right_tyre_surface_temperature() const {
  return _impl_.rear_right_tyre_surface_temperature_;
}
inline uint32_t Telemetry::rear_right_tyre_surface_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_tyre_surface_temperature)
  return _internal_rear_right_tyre_surface_temperature();
}
inline void Telemetry::_internal_set_rear_right_tyre_surface_temperature(uint32_t value) {
  
  _impl_.rear_right_tyre_surface_temperature_ = value;
}
inline void Telemetry::set_rear_right_tyre_surface_temperature(uint32_t value) {
  _internal_set_rear_right_tyre_surface_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_tyre_surface_temperature)
}

// uint32 front_left_tyre_surface_temperature = 17;
inline void Telemetry::clear_front_left_tyre_surface_temperature() {
  _impl_.front_left_tyre_surface_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_front_left_tyre_surface_temperature() const {
  return _impl_.front_left_tyre_surface_temperature_;
}
inline uint32_t Telemetry::front_left_tyre_surface_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_tyre_surface_temperature)
  return _internal_front_left_tyre_surface_temperature();
}
inline void Telemetry::_internal_set_front_left_tyre_surface_temperature(uint32_t value) {
  
  _impl_.front_left_tyre_surface_temperature_ = value;
}
inline void Telemetry::set_front_left_tyre_surface_temperature(uint32_t value) {
  _internal_set_front_left_tyre_surface_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_tyre_surface_temperature)
}

// uint32 front_right_tyre_surface_temperature = 18;
inline void Telemetry::clear_front_right_tyre_surface_temperature() {
  _impl_.front_right_tyre_surface_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_front_right_tyre_surface_temperature() const {
  return _impl_.front_right_tyre_surface_temperature_;
}
inline uint32_t Telemetry::front_right_tyre_surface_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_tyre_surface_temperature)
  return _internal_front_right_tyre_surface_temperature();
}
inline void Telemetry::_internal_set_front_right_tyre_surface_temperature(uint32_t value) {
  
  _impl_.front_right_tyre_surface_temperature_ = value;
}
inline void Telemetry::set_front_right_tyre_surface_temperature(uint32_t value) {
  _internal_set_front_right_tyre_surface_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_tyre_surface_temperature)
}

// uint32 rear_left_tyre_inner_temperature = 19;
inline void Telemetry::clear_rear_left_tyre_inner_temperature() {
  _impl_.rear_left_tyre_inner_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_left_tyre_inner_temperature() const {
  return _impl_.rear_left_tyre_inner_temperature_;
}
inline uint32_t Telemetry::rear_left_tyre_inner_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_tyre_inner_temperature)
  return _internal_rear_left_tyre_inner_temperature();
}
inline void Telemetry::_internal_set_rear_left_tyre_inner_temperature(uint32_t value) {
  
  _impl_.rear_left_tyre_inner_temperature_ = value;
}
inline void Telemetry::set_rear_left_tyre_inner_temperature(uint32_t value) {
  _internal_set_rear_left_tyre_inner_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_tyre_inner_temperature)
}

// uint32 rear_right_tyre_inner_temperature = 20;
inline void Telemetry::clear_rear_right_tyre_inner_temperature() {
  _impl_.rear_right_tyre_inner_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_right_tyre_inner_temperature() const {
  return _impl_.rear_right_tyre_inner_temperature_;
}
inline uint32_t Telemetry::rear_right_tyre_inner_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_tyre_inner_temperature)
  return _internal_rear_right_tyre_inner_temperature();
}
inline void Telemetry::_internal_set_rear_right_tyre_inner_temperature(uint32_t value) {
  
  _impl_.rear_right_tyre_inner_temperature_ = value;
}
inline void Telemetry::set_rear_right_tyre_inner_temperature(uint32_t value) {
  _internal_set_rear_right_tyre_inner_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_tyre_inner_temperature)
}

// uint32 front_left_tyre_inner_temperature = 21;
inline void Telemetry::clear_front_left_tyre_inner_temperature() {
  _impl_.front_left_tyre_inner_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_front_left_tyre_inner_temperature() const {
  return _impl_.front_left_tyre_inner_temperature_;
}
inline uint32_t Telemetry::front_left_tyre_inner_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_tyre_inner_temperature)
  return _internal_front_left_tyre_inner_temperature();
}
inline void Telemetry::_internal_set_front_left_tyre_inner_temperature(uint32_t value) {
  
  _impl_.front_left_tyre_inner_temperature_ = value;
}
inline void Telemetry::set_front_left_tyre_inner_temperature(uint32_t value) {
  _internal_set_front_left_tyre_inner_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_tyre_inner_temperature)
}

// uint32 front_right_tyre_inner_temperature = 22;
inline void Telemetry::clear_front_right_tyre_inner_temperature() {
  _impl_.front_right_tyre_inner_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_front_right_tyre_inner_temperature() const {
  return _impl_.front_right_tyre_inner_temperature_;
}
inline uint32_t Telemetry::front_right_tyre_inner_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_tyre_inner_temperature)
  return _internal_front_right_tyre_inner_temperature();
}
inline void Telemetry::_internal_set_front_right_tyre_inner_temperature(uint32_t value) {
  
  _impl_.front_right_tyre_inner_temperature_ = value;
}
inline void Telemetry::set_front_right_tyre_inner_temperature(uint32_t value) {
  _internal_set_front_right_tyre_inner_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_tyre_inner_temperature)
}

// uint32 engine_temperature = 23;
inline void Telemetry::clear_engine_temperature() {
  _impl_.engine_temperature_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_temperature() const {
  return _impl_.engine_temperature_;
}
inline uint32_t Telemetry::engine_temperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_temperature)
  return _internal_engine_temperature();
}
inline void Telemetry::_internal_set_engine_temperature(uint32_t value) {
  
  _impl_.engine_temperature_ = value;
}
inline void Telemetry::set_engine_temperature(uint32_t value) {
  _internal_set_engine_temperature(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_temperature)
}

// float rear_left_tyre_pressure = 24;
inline void Telemetry::clear_rear_left_tyre_pressure() {
  _impl_.rear_left_tyre_pressure_ = 0;
}
inline float Telemetry::_internal_rear_left_tyre_pressure() const {
  return _impl_.rear_left_tyre_pressure_;
}
inline float Telemetry::rear_left_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_tyre_pressure)
  return _internal_rear_left_tyre_pressure();
}
inline void Telemetry::_internal_set_rear_left_tyre_pressure(float value) {
  
  _impl_.rear_left_tyre_pressure_ = value;
}
inline void Telemetry::set_rear_left_tyre_pressure(float value) {
  _internal_set_rear_left_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_tyre_pressure)
}

// float rear_right_tyre_pressure = 25;
inline void Telemetry::clear_rear_right_tyre_pressure() {
  _impl_.rear_right_tyre_pressure_ = 0;
}
inline float Telemetry::_internal_rear_right_tyre_pressure() const {
  return _impl_.rear_right_tyre_pressure_;
}
inline float Telemetry::rear_right_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_tyre_pressure)
  return _internal_rear_right_tyre_pressure();
}
inline void Telemetry::_internal_set_rear_right_tyre_pressure(float value) {
  
  _impl_.rear_right_tyre_pressure_ = value;
}
inline void Telemetry::set_rear_right_tyre_pressure(float value) {
  _internal_set_rear_right_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_tyre_pressure)
}

// float front_left_tyre_pressure = 26;
inline void Telemetry::clear_front_left_tyre_pressure() {
  _impl_.front_left_tyre_pressure_ = 0;
}
inline float Telemetry::_internal_front_left_tyre_pressure() const {
  return _impl_.front_left_tyre_pressure_;
}
inline float Telemetry::front_left_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_tyre_pressure)
  return _internal_front_left_tyre_pressure();
}
inline void Telemetry::_internal_set_front_left_tyre_pressure(float value) {
  
  _impl_.front_left_tyre_pressure_ = value;
}
inline void Telemetry::set_front_left_tyre_pressure(float value) {
  _internal_set_front_left_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_tyre_pressure)
}

// float front_right_tyre_pressure = 27;
inline void Telemetry::clear_front_right_tyre_pressure() {
  _impl_.front_right_tyre_pressure_ = 0;
}
inline float Telemetry::_internal_front_right_tyre_pressure() const {
  return _impl_.front_right_tyre_pressure_;
}
inline float Telemetry::front_right_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_tyre_pressure)
  return _internal_front_right_tyre_pressure();
}
inline void Telemetry::_internal_set_front_right_tyre_pressure(float value) {
  
  _impl_.front_right_tyre_pressure_ = value;
}
inline void Telemetry::set_front_right_tyre_pressure(float value) {
  _internal_set_front_right_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_tyre_pressure)
}

// uint32 rear_left_surface_type = 28;
inline void Telemetry::clear_rear_left_surface_type() {
  _impl_.rear_left_surface_type_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_left_surface_type() const {
  return _impl_.rear_left_surface_type_;
}
inline uint32_t Telemetry::rear_left_surface_type() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_surface_type)
  return _internal_rear_left_surface_type();
}
inline void Telemetry::_internal_set_rear_left_surface_type(uint32_t value) {
  
  _impl_.rear_left_surface_type_ = value;
}
inline void Telemetry::set_rear_left_surface_type(uint32_t value) {
  _internal_set_rear_left_surface_type(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_surface_type)
}

// uint32 rear_right_surface_type = 29;
inline void Telemetry::clear_rear_right_surface_type() {
  _impl_.rear_right_surface_type_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_right_surface_type() const {
  return _impl_.rear_right_surface_type_;
}
inline uint32_t Telemetry::rear_right_surface_type() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_surface_type)
  return _internal_rear_right_surface_type();
}
inline void Telemetry::_internal_set_rear_right_surface_type(uint32_t value) {
  
  _impl_.rear_right_surface_type_ = value;
}
inline void Telemetry::set_rear_right_surface_type(uint32_t value) {
  _internal_set_rear_right_surface_type(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_surface_type)
}

// uint32 front_left_surface_type = 30;
inline void Telemetry::clear_front_left_surface_type() {
  _impl_.front_left_surface_type_ = 0u;
}
inline uint32_t Telemetry::_internal_front_left_surface_type() const {
  return _impl_.front_left_surface_type_;
}
inline uint32_t Telemetry::front_left_surface_type() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_surface_type)
  return _internal_front_left_surface_type();
}
inline void Telemetry::_internal_set_front_left_surface_type(uint32_t value) {
  
  _impl_.front_left_surface_type_ = value;
}
inline void Telemetry::set_front_left_surface_type(uint32_t value) {
  _internal_set_front_left_surface_type(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_surface_type)
}

// uint32 front_right_surface_type = 31;
inline void Telemetry::clear_front_right_surface_type() {
  _impl_.front_right_surface_type_ = 0u;
}
inline uint32_t Telemetry::_internal_front_right_surface_type() const {
  return _impl_.front_right_surface_type_;
}
inline uint32_t Telemetry::front_right_surface_type() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_surface_type)
  return _internal_front_right_surface_type();
}
inline void Telemetry::_internal_set_front_right_surface_type(uint32_t value) {
  
  _impl_.front_right_surface_type_ = value;
}
inline void Telemetry::set_front_right_surface_type(uint32_t value) {
  _internal_set_front_right_surface_type(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_surface_type)
}

// float lap_distance = 32;
inline void Telemetry::clear_lap_distance() {
  _impl_.lap_distance_ = 0;
}
inline float Telemetry::_internal_lap_distance() const {
  return _impl_.lap_distance_;
}
inline float Telemetry::lap_distance() const {
  // @@protoc_insertion_point(field_get:Telemetry.lap_distance)
  return _internal_lap_distance();
}
inline void Telemetry::_internal_set_lap_distance(float value) {
  
  _impl_.lap_distance_ = value;
}
inline void Telemetry::set_lap_distance(float value) {
  _internal_set_lap_distance(value);
  // @@protoc_insertion_point(field_set:Telemetry.lap_distance)
}

// float fuel_in_tank = 33;
inline void Telemetry::clear_fuel_in_tank() {
  _impl_.fuel_in_tank_ = 0;
}
inline float Telemetry::_internal_fuel_in_tank() const {
  return _impl_.fuel_in_tank_;
}
inline float Telemetry::fuel_in_tank() const {
  // @@protoc_insertion_point(field_get:Telemetry.fuel_in_tank)
  return _internal_fuel_in_tank();
}
inline void Telemetry::_internal_set_fuel_in_tank(float value) {
  
  _impl_.fuel_in_tank_ = value;
}
inline void Telemetry::set_fuel_in_tank(float value) {
  _internal_set_fuel_in_tank(value);
  // @@protoc_insertion_point(field_set:Telemetry.fuel_in_tank)
}

// uint32 tyres_age_laps = 34;
inline void Telemetry::clear_tyres_age_laps() {
  _impl_.tyres_age_laps_ = 0u;
}
inline uint32_t Telemetry::_internal_tyres_age_laps() const {
  return _impl_.tyres_age_laps_;
}
inline uint32_t Telemetry::tyres_age_laps() const {
  // @@protoc_insertion_point(field_get:Telemetry.tyres_age_laps)
  return _internal_tyres_age_laps();
}
inline void Telemetry::_internal_set_tyres_age_laps(uint32_t value) {
  
  _impl_.tyres_age_laps_ = value;
}
inline void Telemetry::set_tyres_age_laps(uint32_t value) {
  _internal_set_tyres_age_laps(value);
  // @@protoc_insertion_point(field_set:Telemetry.tyres_age_laps)
}

// float ers_store_energy = 35;
inline void Telemetry::clear_ers_store_energy() {
  _impl_.ers_store_energy_ = 0;
}
inline float Telemetry::_internal_ers_store_energy() const {
  return _impl_.ers_store_energy_;
}
inline float Telemetry::ers_store_energy() const {
  // @@protoc_insertion_point(field_get:Telemetry.ers_store_energy)
  return _internal_ers_store_energy();
}
inline void Telemetry::_internal_set_ers_store_energy(float value) {
  
  _impl_.ers_store_energy_ = value;
}
inline void Telemetry::set_ers_store_energy(float value) {
  _internal_set_ers_store_energy(value);
  // @@protoc_insertion_point(field_set:Telemetry.ers_store_energy)
}

// uint32 ers_deploy_mode = 36;
inline void Telemetry::clear_ers_deploy_mode() {
  _impl_.ers_deploy_mode_ = 0u;
}
inline uint32_t Telemetry::_internal_ers_deploy_mode() const {
  return _impl_.ers_deploy_mode_;
}
inline uint32_t Telemetry::ers_deploy_mode() const {
  // @@protoc_insertion_point(field_get:Telemetry.ers_deploy_mode)
  return _internal_ers_deploy_mode();
}
inline void Telemetry::_internal_set_ers_deploy_mode(uint32_t value) {
  
  _impl_.ers_deploy_mode_ = value;
}
inline void Telemetry::set_ers_deploy_mode(uint32_t value) {
  _internal_set_ers_deploy_mode(value);
  // @@protoc_insertion_point(field_set:Telemetry.ers_deploy_mode)
}

// float ers_harvested_this_lap_mguk = 37;
inline void Telemetry::clear_ers_harvested_this_lap_mguk() {
  _impl_.ers_harvested_this_lap_mguk_ = 0;
}
inline float Telemetry::_internal_ers_harvested_this_lap_mguk() const {
  return _impl_.ers_harvested_this_lap_mguk_;
}
inline float Telemetry::ers_harvested_this_lap_mguk() const {
  // @@protoc_insertion_point(field_get:Telemetry.ers_harvested_this_lap_mguk)
  return _internal_ers_harvested_this_lap_mguk();
}
inline void Telemetry::_internal_set_ers_harvested_this_lap_mguk(float value) {
  
  _impl_.ers_harvested_this_lap_mguk_ = value;
}
inline void Telemetry::set_ers_harvested_this_lap_mguk(float value) {
  _internal_set_ers_harvested_this_lap_mguk(value);
  // @@protoc_insertion_point(field_set:Telemetry.ers_harvested_this_lap_mguk)
}

// float ers_harvested_this_lap_mguh = 38;
inline void Telemetry::clear_ers_harvested_this_lap_mguh() {
  _impl_.ers_harvested_this_lap_mguh_ = 0;
}
inline float Telemetry::_internal_ers_harvested_this_lap_mguh() const {
  return _impl_.ers_harvested_this_lap_mguh_;
}
inline float Telemetry::ers_harvested_this_lap_mguh() const {
  // @@protoc_insertion_point(field_get:Telemetry.ers_harvested_this_lap_mguh)
  return _internal_ers_harvested_this_lap_mguh();
}
inline void Telemetry::_internal_set_ers_harvested_this_lap_mguh(float value) {
  
  _impl_.ers_harvested_this_lap_mguh_ = value;
}
inline void Telemetry::set_ers_harvested_this_lap_mguh(float value) {
  _internal_set_ers_harvested_this_lap_mguh(value);
  // @@protoc_insertion_point(field_set:Telemetry.ers_harvested_this_lap_mguh)
}

// float ers_deployed_this_lap = 39;
inline void Telemetry::clear_ers_deployed_this_lap() {
  _impl_.ers_deployed_this_lap_ = 0;
}
inline float Telemetry::_internal_ers_deployed_this_lap() const {
  return _impl_.ers_deployed_this_lap_;
}
inline float Telemetry::ers_deployed_this_lap() const {
  // @@protoc_insertion_point(field_get:Telemetry.ers_deployed_this_lap)
  return _internal_ers_deployed_this_lap();
}
inline void Telemetry::_internal_set_ers_deployed_this_lap(float value) {
  
  _impl_.ers_deployed_this_lap_ = value;
}
inline void Telemetry::set_ers_deployed_this_lap(float value) {
  _internal_set_ers_deployed_this_lap(value);
  // @@protoc_insertion_point(field_set:Telemetry.ers_deployed_this_lap)
}

// float rear_left_tyre_wear = 40;
inline void Telemetry::clear_rear_left_tyre_wear() {
  _impl_.rear_left_tyre_wear_ = 0;
}
inline float Telemetry::_internal_rear_left_tyre_wear() const {
  return _impl_.rear_left_tyre_wear_;
}
inline float Telemetry::rear_left_tyre_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_tyre_wear)
  return _internal_rear_left_tyre_wear();
}
inline void Telemetry::_internal_set_rear_left_tyre_wear(float value) {
  
  _impl_.rear_left_tyre_wear_ = value;
}
inline void Telemetry::set_rear_left_tyre_wear(float value) {
  _internal_set_rear_left_tyre_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_tyre_wear)
}

// float rear_right_tyre_wear = 41;
inline void Telemetry::clear_rear_right_tyre_wear() {
  _impl_.rear_right_tyre_wear_ = 0;
}
inline float Telemetry::_internal_rear_right_tyre_wear() const {
  return _impl_.rear_right_tyre_wear_;
}
inline float Telemetry::rear_right_tyre_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_tyre_wear)
  return _internal_rear_right_tyre_wear();
}
inline void Telemetry::_internal_set_rear_right_tyre_wear(float value) {
  
  _impl_.rear_right_tyre_wear_ = value;
}
inline void Telemetry::set_rear_right_tyre_wear(float value) {
  _internal_set_rear_right_tyre_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_tyre_wear)
}

// float front_left_tyre_wear = 42;
inline void Telemetry::clear_front_left_tyre_wear() {
  _impl_.front_left_tyre_wear_ = 0;
}
inline float Telemetry::_internal_front_left_tyre_wear() const {
  return _impl_.front_left_tyre_wear_;
}
inline float Telemetry::front_left_tyre_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_tyre_wear)
  return _internal_front_left_tyre_wear();
}
inline void Telemetry::_internal_set_front_left_tyre_wear(float value) {
  
  _impl_.front_left_tyre_wear_ = value;
}
inline void Telemetry::set_front_left_tyre_wear(float value) {
  _internal_set_front_left_tyre_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_tyre_wear)
}

// float front_right_tyre_wear = 43;
inline void Telemetry::clear_front_right_tyre_wear() {
  _impl_.front_right_tyre_wear_ = 0;
}
inline float Telemetry::_internal_front_right_tyre_wear() const {
  return _impl_.front_right_tyre_wear_;
}
inline float Telemetry::front_right_tyre_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_tyre_wear)
  return _internal_front_right_tyre_wear();
}
inline void Telemetry::_internal_set_front_right_tyre_wear(float value) {
  
  _impl_.front_right_tyre_wear_ = value;
}
inline void Telemetry::set_front_right_tyre_wear(float value) {
  _internal_set_front_right_tyre_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_tyre_wear)
}

// uint32 rear_left_tyre_damage = 44;
inline void Telemetry::clear_rear_left_tyre_damage() {
  _impl_.rear_left_tyre_damage_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_left_tyre_damage() const {
  return _impl_.rear_left_tyre_damage_;
}
inline uint32_t Telemetry::rear_left_tyre_damage() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_tyre_damage)
  return _internal_rear_left_tyre_damage();
}
inline void Telemetry::_internal_set_rear_left_tyre_damage(uint32_t value) {
  
  _impl_.rear_left_tyre_damage_ = value;
}
inline void Telemetry::set_rear_left_tyre_damage(uint32_t value) {
  _internal_set_rear_left_tyre_damage(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_tyre_damage)
}

// uint32 rear_right_tyre_damage = 45;
inline void Telemetry::clear_rear_right_tyre_damage() {
  _impl_.rear_right_tyre_damage_ = 0u;
}
inline uint32_t Telemetry::_internal_rear_right_tyre_damage() const {
  return _impl_.rear_right_tyre_damage_;
}
inline uint32_t Telemetry::rear_right_tyre_damage() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_tyre_damage)
  return _internal_rear_right_tyre_damage();
}
inline void Telemetry::_internal_set_rear_right_tyre_damage(uint32_t value) {
  
  _impl_.rear_right_tyre_damage_ = value;
}
inline void Telemetry::set_rear_right_tyre_damage(uint32_t value) {
  _internal_set_rear_right_tyre_damage(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_tyre_damage)
}

// uint32 front_left_tyre_damage = 46;
inline void Telemetry::clear_front_left_tyre_damage() {
  _impl_.front_left_tyre_damage_ = 0u;
}
inline uint32_t Telemetry::_internal_front_left_tyre_damage() const {
  return _impl_.front_left_tyre_damage_;
}
inline uint32_t Telemetry::front_left_tyre_damage() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_tyre_damage)
  return _internal_front_left_tyre_damage();
}
inline void Telemetry::_internal_set_front_left_tyre_damage(uint32_t value) {
  
  _impl_.front_left_tyre_damage_ = value;
}
inline void Telemetry::set_front_left_tyre_damage(uint32_t value) {
  _internal_set_front_left_tyre_damage(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_tyre_damage)
}

// uint32 front_right_tyre_damage = 47;
inline void Telemetry::clear_front_right_tyre_damage() {
  _impl_.front_right_tyre_damage_ = 0u;
}
inline uint32_t Telemetry::_internal_front_right_tyre_damage() const {
  return _impl_.front_right_tyre_damage_;
}
inline uint32_t Telemetry::front_right_tyre_damage() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_tyre_damage)
  return _internal_front_right_tyre_damage();
}
inline void Telemetry::_internal_set_front_right_tyre_damage(uint32_t value) {
  
  _impl_.front_right_tyre_damage_ = value;
}
inline void Telemetry::set_front_right_tyre_damage(uint32_t value) {
  _internal_set_front_right_tyre_damage(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_tyre_damage)
}

// uint32 gear_box_damage = 48;
inline void Telemetry::clear_gear_box_damage() {
  _impl_.gear_box_damage_ = 0u;
}
inline uint32_t Telemetry::_internal_gear_box_damage() const {
  return _impl_.gear_box_damage_;
}
inline uint32_t Telemetry::gear_box_damage() const {
  // @@protoc_insertion_point(field_get:Telemetry.gear_box_damage)
  return _internal_gear_box_damage();
}
inline void Telemetry::_internal_set_gear_box_damage(uint32_t value) {
  
  _impl_.gear_box_damage_ = value;
}
inline void Telemetry::set_gear_box_damage(uint32_t value) {
  _internal_set_gear_box_damage(value);
  // @@protoc_insertion_point(field_set:Telemetry.gear_box_damage)
}

// uint32 engine_damage = 49;
inline void Telemetry::clear_engine_damage() {
  _impl_.engine_damage_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_damage() const {
  return _impl_.engine_damage_;
}
inline uint32_t Telemetry::engine_damage() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_damage)
  return _internal_engine_damage();
}
inline void Telemetry::_internal_set_engine_damage(uint32_t value) {
  
  _impl_.engine_damage_ = value;
}
inline void Telemetry::set_engine_damage(uint32_t value) {
  _internal_set_engine_damage(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_damage)
}

// uint32 engine_ce_wear = 50;
inline void Telemetry::clear_engine_ce_wear() {
  _impl_.engine_ce_wear_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_ce_wear() const {
  return _impl_.engine_ce_wear_;
}
inline uint32_t Telemetry::engine_ce_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_ce_wear)
  return _internal_engine_ce_wear();
}
inline void Telemetry::_internal_set_engine_ce_wear(uint32_t value) {
  
  _impl_.engine_ce_wear_ = value;
}
inline void Telemetry::set_engine_ce_wear(uint32_t value) {
  _internal_set_engine_ce_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_ce_wear)
}

// uint32 engine_ice_wear = 51;
inline void Telemetry::clear_engine_ice_wear() {
  _impl_.engine_ice_wear_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_ice_wear() const {
  return _impl_.engine_ice_wear_;
}
inline uint32_t Telemetry::engine_ice_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_ice_wear)
  return _internal_engine_ice_wear();
}
inline void Telemetry::_internal_set_engine_ice_wear(uint32_t value) {
  
  _impl_.engine_ice_wear_ = value;
}
inline void Telemetry::set_engine_ice_wear(uint32_t value) {
  _internal_set_engine_ice_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_ice_wear)
}

// uint32 engine_tc_wear = 52;
inline void Telemetry::clear_engine_tc_wear() {
  _impl_.engine_tc_wear_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_tc_wear() const {
  return _impl_.engine_tc_wear_;
}
inline uint32_t Telemetry::engine_tc_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_tc_wear)
  return _internal_engine_tc_wear();
}
inline void Telemetry::_internal_set_engine_tc_wear(uint32_t value) {
  
  _impl_.engine_tc_wear_ = value;
}
inline void Telemetry::set_engine_tc_wear(uint32_t value) {
  _internal_set_engine_tc_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_tc_wear)
}

// uint32 engine_es_wear = 53;
inline void Telemetry::clear_engine_es_wear() {
  _impl_.engine_es_wear_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_es_wear() const {
  return _impl_.engine_es_wear_;
}
inline uint32_t Telemetry::engine_es_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_es_wear)
  return _internal_engine_es_wear();
}
inline void Telemetry::_internal_set_engine_es_wear(uint32_t value) {
  
  _impl_.engine_es_wear_ = value;
}
inline void Telemetry::set_engine_es_wear(uint32_t value) {
  _internal_set_engine_es_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_es_wear)
}

// uint32 engine_mguh_wear = 54;
inline void Telemetry::clear_engine_mguh_wear() {
  _impl_.engine_mguh_wear_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_mguh_wear() const {
  return _impl_.engine_mguh_wear_;
}
inline uint32_t Telemetry::engine_mguh_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_mguh_wear)
  return _internal_engine_mguh_wear();
}
inline void Telemetry::_internal_set_engine_mguh_wear(uint32_t value) {
  
  _impl_.engine_mguh_wear_ = value;
}
inline void Telemetry::set_engine_mguh_wear(uint32_t value) {
  _internal_set_engine_mguh_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_mguh_wear)
}

// uint32 engine_mguk_wear = 55;
inline void Telemetry::clear_engine_mguk_wear() {
  _impl_.engine_mguk_wear_ = 0u;
}
inline uint32_t Telemetry::_internal_engine_mguk_wear() const {
  return _impl_.engine_mguk_wear_;
}
inline uint32_t Telemetry::engine_mguk_wear() const {
  // @@protoc_insertion_point(field_get:Telemetry.engine_mguk_wear)
  return _internal_engine_mguk_wear();
}
inline void Telemetry::_internal_set_engine_mguk_wear(uint32_t value) {
  
  _impl_.engine_mguk_wear_ = value;
}
inline void Telemetry::set_engine_mguk_wear(uint32_t value) {
  _internal_set_engine_mguk_wear(value);
  // @@protoc_insertion_point(field_set:Telemetry.engine_mguk_wear)
}

// float rear_left_suspension_position = 56;
inline void Telemetry::clear_rear_left_suspension_position() {
  _impl_.rear_left_suspension_position_ = 0;
}
inline float Telemetry::_internal_rear_left_suspension_position() const {
  return _impl_.rear_left_suspension_position_;
}
inline float Telemetry::rear_left_suspension_position() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_suspension_position)
  return _internal_rear_left_suspension_position();
}
inline void Telemetry::_internal_set_rear_left_suspension_position(float value) {
  
  _impl_.rear_left_suspension_position_ = value;
}
inline void Telemetry::set_rear_left_suspension_position(float value) {
  _internal_set_rear_left_suspension_position(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_suspension_position)
}

// float rear_right_suspension_position = 57;
inline void Telemetry::clear_rear_right_suspension_position() {
  _impl_.rear_right_suspension_position_ = 0;
}
inline float Telemetry::_internal_rear_right_suspension_position() const {
  return _impl_.rear_right_suspension_position_;
}
inline float Telemetry::rear_right_suspension_position() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_suspension_position)
  return _internal_rear_right_suspension_position();
}
inline void Telemetry::_internal_set_rear_right_suspension_position(float value) {
  
  _impl_.rear_right_suspension_position_ = value;
}
inline void Telemetry::set_rear_right_suspension_position(float value) {
  _internal_set_rear_right_suspension_position(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_suspension_position)
}

// float front_left_suspension_position = 58;
inline void Telemetry::clear_front_left_suspension_position() {
  _impl_.front_left_suspension_position_ = 0;
}
inline float Telemetry::_internal_front_left_suspension_position() const {
  return _impl_.front_left_suspension_position_;
}
inline float Telemetry::front_left_suspension_position() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_suspension_position)
  return _internal_front_left_suspension_position();
}
inline void Telemetry::_internal_set_front_left_suspension_position(float value) {
  
  _impl_.front_left_suspension_position_ = value;
}
inline void Telemetry::set_front_left_suspension_position(float value) {
  _internal_set_front_left_suspension_position(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_suspension_position)
}

// float front_right_suspension_position = 59;
inline void Telemetry::clear_front_right_suspension_position() {
  _impl_.front_right_suspension_position_ = 0;
}
inline float Telemetry::_internal_front_right_suspension_position() const {
  return _impl_.front_right_suspension_position_;
}
inline float Telemetry::front_right_suspension_position() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_suspension_position)
  return _internal_front_right_suspension_position();
}
inline void Telemetry::_internal_set_front_right_suspension_position(float value) {
  
  _impl_.front_right_suspension_position_ = value;
}
inline void Telemetry::set_front_right_suspension_position(float value) {
  _internal_set_front_right_suspension_position(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_suspension_position)
}

// float rear_left_wheel_speed = 60;
inline void Telemetry::clear_rear_left_wheel_speed() {
  _impl_.rear_left_wheel_speed_ = 0;
}
inline float Telemetry::_internal_rear_left_wheel_speed() const {
  return _impl_.rear_left_wheel_speed_;
}
inline float Telemetry::rear_left_wheel_speed() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_wheel_speed)
  return _internal_rear_left_wheel_speed();
}
inline void Telemetry::_internal_set_rear_left_wheel_speed(float value) {
  
  _impl_.rear_left_wheel_speed_ = value;
}
inline void Telemetry::set_rear_left_wheel_speed(float value) {
  _internal_set_rear_left_wheel_speed(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_wheel_speed)
}

// float rear_right_wheel_speed = 61;
inline void Telemetry::clear_rear_right_wheel_speed() {
  _impl_.rear_right_wheel_speed_ = 0;
}
inline float Telemetry::_internal_rear_right_wheel_speed() const {
  return _impl_.rear_right_wheel_speed_;
}
inline float Telemetry::rear_right_wheel_speed() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_wheel_speed)
  return _internal_rear_right_wheel_speed();
}
inline void Telemetry::_internal_set_rear_right_wheel_speed(float value) {
  
  _impl_.rear_right_wheel_speed_ = value;
}
inline void Telemetry::set_rear_right_wheel_speed(float value) {
  _internal_set_rear_right_wheel_speed(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_wheel_speed)
}

// float front_left_wheel_speed = 62;
inline void Telemetry::clear_front_left_wheel_speed() {
  _impl_.front_left_wheel_speed_ = 0;
}
inline float Telemetry::_internal_front_left_wheel_speed() const {
  return _impl_.front_left_wheel_speed_;
}
inline float Telemetry::front_left_wheel_speed() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_wheel_speed)
  return _internal_front_left_wheel_speed();
}
inline void Telemetry::_internal_set_front_left_wheel_speed(float value) {
  
  _impl_.front_left_wheel_speed_ = value;
}
inline void Telemetry::set_front_left_wheel_speed(float value) {
  _internal_set_front_left_wheel_speed(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_wheel_speed)
}

// float front_right_wheel_speed = 63;
inline void Telemetry::clear_front_right_wheel_speed() {
  _impl_.front_right_wheel_speed_ = 0;
}
inline float Telemetry::_internal_front_right_wheel_speed() const {
  return _impl_.front_right_wheel_speed_;
}
inline float Telemetry::front_right_wheel_speed() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_wheel_speed)
  return _internal_front_right_wheel_speed();
}
inline void Telemetry::_internal_set_front_right_wheel_speed(float value) {
  
  _impl_.front_right_wheel_speed_ = value;
}
inline void Telemetry::set_front_right_wheel_speed(float value) {
  _internal_set_front_right_wheel_speed(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_wheel_speed)
}

// float rear_left_wheel_slip = 64;
inline void Telemetry::clear_rear_left_wheel_slip() {
  _impl_.rear_left_wheel_slip_ = 0;
}
inline float Telemetry::_internal_rear_left_wheel_slip() const {
  return _impl_.rear_left_wheel_slip_;
}
inline float Telemetry::rear_left_wheel_slip() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_left_wheel_slip)
  return _internal_rear_left_wheel_slip();
}
inline void Telemetry::_internal_set_rear_left_wheel_slip(float value) {
  
  _impl_.rear_left_wheel_slip_ = value;
}
inline void Telemetry::set_rear_left_wheel_slip(float value) {
  _internal_set_rear_left_wheel_slip(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_left_wheel_slip)
}

// float rear_right_wheel_slip = 65;
inline void Telemetry::clear_rear_right_wheel_slip() {
  _impl_.rear_right_wheel_slip_ = 0;
}
inline float Telemetry::_internal_rear_right_wheel_slip() const {
  return _impl_.rear_right_wheel_slip_;
}
inline float Telemetry::rear_right_wheel_slip() const {
  // @@protoc_insertion_point(field_get:Telemetry.rear_right_wheel_slip)
  return _internal_rear_right_wheel_slip();
}
inline void Telemetry::_internal_set_rear_right_wheel_slip(float value) {
  
  _impl_.rear_right_wheel_slip_ = value;
}
inline void Telemetry::set_rear_right_wheel_slip(float value) {
  _internal_set_rear_right_wheel_slip(value);
  // @@protoc_insertion_point(field_set:Telemetry.rear_right_wheel_slip)
}

// float front_left_wheel_slip = 66;
inline void Telemetry::clear_front_left_wheel_slip() {
  _impl_.front_left_wheel_slip_ = 0;
}
inline float Telemetry::_internal_front_left_wheel_slip() const {
  return _impl_.front_left_wheel_slip_;
}
inline float Telemetry::front_left_wheel_slip() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_left_wheel_slip)
  return _internal_front_left_wheel_slip();
}
inline void Telemetry::_internal_set_front_left_wheel_slip(float value) {
  
  _impl_.front_left_wheel_slip_ = value;
}
inline void Telemetry::set_front_left_wheel_slip(float value) {
  _internal_set_front_left_wheel_slip(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_left_wheel_slip)
}

// float front_right_wheel_slip = 67;
inline void Telemetry::clear_front_right_wheel_slip() {
  _impl_.front_right_wheel_slip_ = 0;
}
inline float Telemetry::_internal_front_right_wheel_slip() const {
  return _impl_.front_right_wheel_slip_;
}
inline float Telemetry::front_right_wheel_slip() const {
  // @@protoc_insertion_point(field_get:Telemetry.front_right_wheel_slip)
  return _internal_front_right_wheel_slip();
}
inline void Telemetry::_internal_set_front_right_wheel_slip(float value) {
  
  _impl_.front_right_wheel_slip_ = value;
}
inline void Telemetry::set_front_right_wheel_slip(float value) {
  _internal_set_front_right_wheel_slip(value);
  // @@protoc_insertion_point(field_set:Telemetry.front_right_wheel_slip)
}

// float world_position_x = 68;
inline void Telemetry::clear_world_position_x() {
  _impl_.world_position_x_ = 0;
}
inline float Telemetry::_internal_world_position_x() const {
  return _impl_.world_position_x_;
}
inline float Telemetry::world_position_x() const {
  // @@protoc_insertion_point(field_get:Telemetry.world_position_x)
  return _internal_world_position_x();
}
inline void Telemetry::_internal_set_world_position_x(float value) {
  
  _impl_.world_position_x_ = value;
}
inline void Telemetry::set_world_position_x(float value) {
  _internal_set_world_position_x(value);
  // @@protoc_insertion_point(field_set:Telemetry.world_position_x)
}

// float world_position_y = 69;
inline void Telemetry::clear_world_position_y() {
  _impl_.world_position_y_ = 0;
}
inline float Telemetry::_internal_world_position_y() const {
  return _impl_.world_position_y_;
}
inline float Telemetry::world_position_y() const {
  // @@protoc_insertion_point(field_get:Telemetry.world_position_y)
  return _internal_world_position_y();
}
inline void Telemetry::_internal_set_world_position_y(float value) {
  
  _impl_.world_position_y_ = value;
}
inline void Telemetry::set_world_position_y(float value) {
  _internal_set_world_position_y(value);
  // @@protoc_insertion_point(field_set:Telemetry.world_position_y)
}

// float world_position_z = 70;
inline void Telemetry::clear_world_position_z() {
  _impl_.world_position_z_ = 0;
}
inline float Telemetry::_internal_world_position_z() const {
  return _impl_.world_position_z_;
}
inline float Telemetry::world_position_z() const {
  // @@protoc_insertion_point(field_get:Telemetry.world_position_z)
  return _internal_world_position_z();
}
inline void Telemetry::_internal_set_world_position_z(float value) {
  
  _impl_.world_position_z_ = value;
}
inline void Telemetry::set_world_position_z(float value) {
  _internal_set_world_position_z(value);
  // @@protoc_insertion_point(field_set:Telemetry.world_position_z)
}

// float g_force_lateral = 71;
inline void Telemetry::clear_g_force_lateral() {
  _impl_.g_force_lateral_ = 0;
}
inline float Telemetry::_internal_g_force_lateral() const {
  return _impl_.g_force_lateral_;
}
inline float Telemetry::g_force_lateral() const {
  // @@protoc_insertion_point(field_get:Telemetry.g_force_lateral)
  return _internal_g_force_lateral();
}
inline void Telemetry::_internal_set_g_force_lateral(float value) {
  
  _impl_.g_force_lateral_ = value;
}
inline void Telemetry::set_g_force_lateral(float value) {
  _internal_set_g_force_lateral(value);
  // @@protoc_insertion_point(field_set:Telemetry.g_force_lateral)
}

// float g_force_longitudinal = 72;
inline void Telemetry::clear_g_force_longitudinal() {
  _impl_.g_force_longitudinal_ = 0;
}
inline float Telemetry::_internal_g_force_longitudinal() const {
  return _impl_.g_force_longitudinal_;
}
inline float Telemetry::g_force_longitudinal() const {
  // @@protoc_insertion_point(field_get:Telemetry.g_force_longitudinal)
  return _internal_g_force_longitudinal();
}
inline void Telemetry::_internal_set_g_force_longitudinal(float value) {
  
  _impl_.g_force_longitudinal_ = value;
}
inline void Telemetry::set_g_force_longitudinal(float value) {
  _internal_set_g_force_longitudinal(value);
  // @@protoc_insertion_point(field_set:Telemetry.g_force_longitudinal)
}

// float g_force_vertical = 73;
inline void Telemetry::clear_g_force_vertical() {
  _impl_.g_force_vertical_ = 0;
}
inline float Telemetry::_internal_g_force_vertical() const {
  return _impl_.g_force_vertical_;
}
inline float Telemetry::g_force_vertical() const {
  // @@protoc_insertion_point(field_get:Telemetry.g_force_vertical)
  return _internal_g_force_vertical();
}
inline void Telemetry::_internal_set_g_force_vertical(float value) {
  
  _impl_.g_force_vertical_ = value;
}
inline void Telemetry::set_g_force_vertical(float value) {
  _internal_set_g_force_vertical(value);
  // @@protoc_insertion_point(field_set:Telemetry.g_force_vertical)
}

// float yaw = 74;
inline void Telemetry::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Telemetry::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Telemetry::yaw() const {
  // @@protoc_insertion_point(field_get:Telemetry.yaw)
  return _internal_yaw();
}
inline void Telemetry::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Telemetry::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Telemetry.yaw)
}

// float pitch = 75;
inline void Telemetry::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Telemetry::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Telemetry::pitch() const {
  // @@protoc_insertion_point(field_get:Telemetry.pitch)
  return _internal_pitch();
}
inline void Telemetry::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Telemetry::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Telemetry.pitch)
}

// float roll = 76;
inline void Telemetry::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Telemetry::_internal_roll() const {
  return _impl_.roll_;
}
inline float Telemetry::roll() const {
  // @@protoc_insertion_point(field_get:Telemetry.roll)
  return _internal_roll();
}
inline void Telemetry::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Telemetry::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Telemetry.roll)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Telemetry_2eproto
