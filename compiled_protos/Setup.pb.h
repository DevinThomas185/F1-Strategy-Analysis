// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Setup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Setup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Setup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Setup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Setup_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Setup_2eproto;
class Setup;
struct SetupDefaultTypeInternal;
extern SetupDefaultTypeInternal _Setup_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Setup* Arena::CreateMaybeMessage<::Setup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Setup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Setup) */ {
 public:
  inline Setup() : Setup(nullptr) {}
  ~Setup() override;
  explicit PROTOBUF_CONSTEXPR Setup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Setup(const Setup& from);
  Setup(Setup&& from) noexcept
    : Setup() {
    *this = ::std::move(from);
  }

  inline Setup& operator=(const Setup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setup& operator=(Setup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Setup& default_instance() {
    return *internal_default_instance();
  }
  static inline const Setup* internal_default_instance() {
    return reinterpret_cast<const Setup*>(
               &_Setup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Setup& a, Setup& b) {
    a.Swap(&b);
  }
  inline void Swap(Setup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Setup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Setup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Setup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Setup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Setup& from) {
    Setup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Setup";
  }
  protected:
  explicit Setup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontWingFieldNumber = 1,
    kRearWingFieldNumber = 2,
    kDifferentialOnThrottleFieldNumber = 3,
    kDifferentialOffThrottleFieldNumber = 4,
    kFrontCamberFieldNumber = 5,
    kRearCamberFieldNumber = 6,
    kFrontToeFieldNumber = 7,
    kRearToeFieldNumber = 8,
    kFrontSuspensionFieldNumber = 9,
    kRearSuspensionFieldNumber = 10,
    kFrontAntiRollBarFieldNumber = 11,
    kRearAntiRollBarFieldNumber = 12,
    kFrontSuspensionHeightFieldNumber = 13,
    kRearSuspensionHeightFieldNumber = 14,
    kBrakePressureFieldNumber = 15,
    kBrakeBiasFieldNumber = 16,
    kRearLeftTyrePressureFieldNumber = 17,
    kRearRightTyrePressureFieldNumber = 18,
    kFrontLeftTyrePressureFieldNumber = 19,
    kFrontRightTyrePressureFieldNumber = 20,
    kBallastFieldNumber = 21,
    kFuelLoadFieldNumber = 22,
    kFuelCapacityFieldNumber = 23,
    kActualTyreCompoundFieldNumber = 24,
    kVisualTyreCompoundFieldNumber = 25,
  };
  // uint32 front_wing = 1;
  void clear_front_wing();
  uint32_t front_wing() const;
  void set_front_wing(uint32_t value);
  private:
  uint32_t _internal_front_wing() const;
  void _internal_set_front_wing(uint32_t value);
  public:

  // uint32 rear_wing = 2;
  void clear_rear_wing();
  uint32_t rear_wing() const;
  void set_rear_wing(uint32_t value);
  private:
  uint32_t _internal_rear_wing() const;
  void _internal_set_rear_wing(uint32_t value);
  public:

  // uint32 differential_on_throttle = 3;
  void clear_differential_on_throttle();
  uint32_t differential_on_throttle() const;
  void set_differential_on_throttle(uint32_t value);
  private:
  uint32_t _internal_differential_on_throttle() const;
  void _internal_set_differential_on_throttle(uint32_t value);
  public:

  // uint32 differential_off_throttle = 4;
  void clear_differential_off_throttle();
  uint32_t differential_off_throttle() const;
  void set_differential_off_throttle(uint32_t value);
  private:
  uint32_t _internal_differential_off_throttle() const;
  void _internal_set_differential_off_throttle(uint32_t value);
  public:

  // float front_camber = 5;
  void clear_front_camber();
  float front_camber() const;
  void set_front_camber(float value);
  private:
  float _internal_front_camber() const;
  void _internal_set_front_camber(float value);
  public:

  // float rear_camber = 6;
  void clear_rear_camber();
  float rear_camber() const;
  void set_rear_camber(float value);
  private:
  float _internal_rear_camber() const;
  void _internal_set_rear_camber(float value);
  public:

  // float front_toe = 7;
  void clear_front_toe();
  float front_toe() const;
  void set_front_toe(float value);
  private:
  float _internal_front_toe() const;
  void _internal_set_front_toe(float value);
  public:

  // float rear_toe = 8;
  void clear_rear_toe();
  float rear_toe() const;
  void set_rear_toe(float value);
  private:
  float _internal_rear_toe() const;
  void _internal_set_rear_toe(float value);
  public:

  // uint32 front_suspension = 9;
  void clear_front_suspension();
  uint32_t front_suspension() const;
  void set_front_suspension(uint32_t value);
  private:
  uint32_t _internal_front_suspension() const;
  void _internal_set_front_suspension(uint32_t value);
  public:

  // uint32 rear_suspension = 10;
  void clear_rear_suspension();
  uint32_t rear_suspension() const;
  void set_rear_suspension(uint32_t value);
  private:
  uint32_t _internal_rear_suspension() const;
  void _internal_set_rear_suspension(uint32_t value);
  public:

  // uint32 front_anti_roll_bar = 11;
  void clear_front_anti_roll_bar();
  uint32_t front_anti_roll_bar() const;
  void set_front_anti_roll_bar(uint32_t value);
  private:
  uint32_t _internal_front_anti_roll_bar() const;
  void _internal_set_front_anti_roll_bar(uint32_t value);
  public:

  // uint32 rear_anti_roll_bar = 12;
  void clear_rear_anti_roll_bar();
  uint32_t rear_anti_roll_bar() const;
  void set_rear_anti_roll_bar(uint32_t value);
  private:
  uint32_t _internal_rear_anti_roll_bar() const;
  void _internal_set_rear_anti_roll_bar(uint32_t value);
  public:

  // uint32 front_suspension_height = 13;
  void clear_front_suspension_height();
  uint32_t front_suspension_height() const;
  void set_front_suspension_height(uint32_t value);
  private:
  uint32_t _internal_front_suspension_height() const;
  void _internal_set_front_suspension_height(uint32_t value);
  public:

  // uint32 rear_suspension_height = 14;
  void clear_rear_suspension_height();
  uint32_t rear_suspension_height() const;
  void set_rear_suspension_height(uint32_t value);
  private:
  uint32_t _internal_rear_suspension_height() const;
  void _internal_set_rear_suspension_height(uint32_t value);
  public:

  // uint32 brake_pressure = 15;
  void clear_brake_pressure();
  uint32_t brake_pressure() const;
  void set_brake_pressure(uint32_t value);
  private:
  uint32_t _internal_brake_pressure() const;
  void _internal_set_brake_pressure(uint32_t value);
  public:

  // uint32 brake_bias = 16;
  void clear_brake_bias();
  uint32_t brake_bias() const;
  void set_brake_bias(uint32_t value);
  private:
  uint32_t _internal_brake_bias() const;
  void _internal_set_brake_bias(uint32_t value);
  public:

  // float rear_left_tyre_pressure = 17;
  void clear_rear_left_tyre_pressure();
  float rear_left_tyre_pressure() const;
  void set_rear_left_tyre_pressure(float value);
  private:
  float _internal_rear_left_tyre_pressure() const;
  void _internal_set_rear_left_tyre_pressure(float value);
  public:

  // float rear_right_tyre_pressure = 18;
  void clear_rear_right_tyre_pressure();
  float rear_right_tyre_pressure() const;
  void set_rear_right_tyre_pressure(float value);
  private:
  float _internal_rear_right_tyre_pressure() const;
  void _internal_set_rear_right_tyre_pressure(float value);
  public:

  // float front_left_tyre_pressure = 19;
  void clear_front_left_tyre_pressure();
  float front_left_tyre_pressure() const;
  void set_front_left_tyre_pressure(float value);
  private:
  float _internal_front_left_tyre_pressure() const;
  void _internal_set_front_left_tyre_pressure(float value);
  public:

  // float front_right_tyre_pressure = 20;
  void clear_front_right_tyre_pressure();
  float front_right_tyre_pressure() const;
  void set_front_right_tyre_pressure(float value);
  private:
  float _internal_front_right_tyre_pressure() const;
  void _internal_set_front_right_tyre_pressure(float value);
  public:

  // uint32 ballast = 21;
  void clear_ballast();
  uint32_t ballast() const;
  void set_ballast(uint32_t value);
  private:
  uint32_t _internal_ballast() const;
  void _internal_set_ballast(uint32_t value);
  public:

  // float fuel_load = 22;
  void clear_fuel_load();
  float fuel_load() const;
  void set_fuel_load(float value);
  private:
  float _internal_fuel_load() const;
  void _internal_set_fuel_load(float value);
  public:

  // float fuel_capacity = 23;
  void clear_fuel_capacity();
  float fuel_capacity() const;
  void set_fuel_capacity(float value);
  private:
  float _internal_fuel_capacity() const;
  void _internal_set_fuel_capacity(float value);
  public:

  // uint32 actual_tyre_compound = 24;
  void clear_actual_tyre_compound();
  uint32_t actual_tyre_compound() const;
  void set_actual_tyre_compound(uint32_t value);
  private:
  uint32_t _internal_actual_tyre_compound() const;
  void _internal_set_actual_tyre_compound(uint32_t value);
  public:

  // uint32 visual_tyre_compound = 25;
  void clear_visual_tyre_compound();
  uint32_t visual_tyre_compound() const;
  void set_visual_tyre_compound(uint32_t value);
  private:
  uint32_t _internal_visual_tyre_compound() const;
  void _internal_set_visual_tyre_compound(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Setup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t front_wing_;
    uint32_t rear_wing_;
    uint32_t differential_on_throttle_;
    uint32_t differential_off_throttle_;
    float front_camber_;
    float rear_camber_;
    float front_toe_;
    float rear_toe_;
    uint32_t front_suspension_;
    uint32_t rear_suspension_;
    uint32_t front_anti_roll_bar_;
    uint32_t rear_anti_roll_bar_;
    uint32_t front_suspension_height_;
    uint32_t rear_suspension_height_;
    uint32_t brake_pressure_;
    uint32_t brake_bias_;
    float rear_left_tyre_pressure_;
    float rear_right_tyre_pressure_;
    float front_left_tyre_pressure_;
    float front_right_tyre_pressure_;
    uint32_t ballast_;
    float fuel_load_;
    float fuel_capacity_;
    uint32_t actual_tyre_compound_;
    uint32_t visual_tyre_compound_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Setup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Setup

// uint32 front_wing = 1;
inline void Setup::clear_front_wing() {
  _impl_.front_wing_ = 0u;
}
inline uint32_t Setup::_internal_front_wing() const {
  return _impl_.front_wing_;
}
inline uint32_t Setup::front_wing() const {
  // @@protoc_insertion_point(field_get:Setup.front_wing)
  return _internal_front_wing();
}
inline void Setup::_internal_set_front_wing(uint32_t value) {
  
  _impl_.front_wing_ = value;
}
inline void Setup::set_front_wing(uint32_t value) {
  _internal_set_front_wing(value);
  // @@protoc_insertion_point(field_set:Setup.front_wing)
}

// uint32 rear_wing = 2;
inline void Setup::clear_rear_wing() {
  _impl_.rear_wing_ = 0u;
}
inline uint32_t Setup::_internal_rear_wing() const {
  return _impl_.rear_wing_;
}
inline uint32_t Setup::rear_wing() const {
  // @@protoc_insertion_point(field_get:Setup.rear_wing)
  return _internal_rear_wing();
}
inline void Setup::_internal_set_rear_wing(uint32_t value) {
  
  _impl_.rear_wing_ = value;
}
inline void Setup::set_rear_wing(uint32_t value) {
  _internal_set_rear_wing(value);
  // @@protoc_insertion_point(field_set:Setup.rear_wing)
}

// uint32 differential_on_throttle = 3;
inline void Setup::clear_differential_on_throttle() {
  _impl_.differential_on_throttle_ = 0u;
}
inline uint32_t Setup::_internal_differential_on_throttle() const {
  return _impl_.differential_on_throttle_;
}
inline uint32_t Setup::differential_on_throttle() const {
  // @@protoc_insertion_point(field_get:Setup.differential_on_throttle)
  return _internal_differential_on_throttle();
}
inline void Setup::_internal_set_differential_on_throttle(uint32_t value) {
  
  _impl_.differential_on_throttle_ = value;
}
inline void Setup::set_differential_on_throttle(uint32_t value) {
  _internal_set_differential_on_throttle(value);
  // @@protoc_insertion_point(field_set:Setup.differential_on_throttle)
}

// uint32 differential_off_throttle = 4;
inline void Setup::clear_differential_off_throttle() {
  _impl_.differential_off_throttle_ = 0u;
}
inline uint32_t Setup::_internal_differential_off_throttle() const {
  return _impl_.differential_off_throttle_;
}
inline uint32_t Setup::differential_off_throttle() const {
  // @@protoc_insertion_point(field_get:Setup.differential_off_throttle)
  return _internal_differential_off_throttle();
}
inline void Setup::_internal_set_differential_off_throttle(uint32_t value) {
  
  _impl_.differential_off_throttle_ = value;
}
inline void Setup::set_differential_off_throttle(uint32_t value) {
  _internal_set_differential_off_throttle(value);
  // @@protoc_insertion_point(field_set:Setup.differential_off_throttle)
}

// float front_camber = 5;
inline void Setup::clear_front_camber() {
  _impl_.front_camber_ = 0;
}
inline float Setup::_internal_front_camber() const {
  return _impl_.front_camber_;
}
inline float Setup::front_camber() const {
  // @@protoc_insertion_point(field_get:Setup.front_camber)
  return _internal_front_camber();
}
inline void Setup::_internal_set_front_camber(float value) {
  
  _impl_.front_camber_ = value;
}
inline void Setup::set_front_camber(float value) {
  _internal_set_front_camber(value);
  // @@protoc_insertion_point(field_set:Setup.front_camber)
}

// float rear_camber = 6;
inline void Setup::clear_rear_camber() {
  _impl_.rear_camber_ = 0;
}
inline float Setup::_internal_rear_camber() const {
  return _impl_.rear_camber_;
}
inline float Setup::rear_camber() const {
  // @@protoc_insertion_point(field_get:Setup.rear_camber)
  return _internal_rear_camber();
}
inline void Setup::_internal_set_rear_camber(float value) {
  
  _impl_.rear_camber_ = value;
}
inline void Setup::set_rear_camber(float value) {
  _internal_set_rear_camber(value);
  // @@protoc_insertion_point(field_set:Setup.rear_camber)
}

// float front_toe = 7;
inline void Setup::clear_front_toe() {
  _impl_.front_toe_ = 0;
}
inline float Setup::_internal_front_toe() const {
  return _impl_.front_toe_;
}
inline float Setup::front_toe() const {
  // @@protoc_insertion_point(field_get:Setup.front_toe)
  return _internal_front_toe();
}
inline void Setup::_internal_set_front_toe(float value) {
  
  _impl_.front_toe_ = value;
}
inline void Setup::set_front_toe(float value) {
  _internal_set_front_toe(value);
  // @@protoc_insertion_point(field_set:Setup.front_toe)
}

// float rear_toe = 8;
inline void Setup::clear_rear_toe() {
  _impl_.rear_toe_ = 0;
}
inline float Setup::_internal_rear_toe() const {
  return _impl_.rear_toe_;
}
inline float Setup::rear_toe() const {
  // @@protoc_insertion_point(field_get:Setup.rear_toe)
  return _internal_rear_toe();
}
inline void Setup::_internal_set_rear_toe(float value) {
  
  _impl_.rear_toe_ = value;
}
inline void Setup::set_rear_toe(float value) {
  _internal_set_rear_toe(value);
  // @@protoc_insertion_point(field_set:Setup.rear_toe)
}

// uint32 front_suspension = 9;
inline void Setup::clear_front_suspension() {
  _impl_.front_suspension_ = 0u;
}
inline uint32_t Setup::_internal_front_suspension() const {
  return _impl_.front_suspension_;
}
inline uint32_t Setup::front_suspension() const {
  // @@protoc_insertion_point(field_get:Setup.front_suspension)
  return _internal_front_suspension();
}
inline void Setup::_internal_set_front_suspension(uint32_t value) {
  
  _impl_.front_suspension_ = value;
}
inline void Setup::set_front_suspension(uint32_t value) {
  _internal_set_front_suspension(value);
  // @@protoc_insertion_point(field_set:Setup.front_suspension)
}

// uint32 rear_suspension = 10;
inline void Setup::clear_rear_suspension() {
  _impl_.rear_suspension_ = 0u;
}
inline uint32_t Setup::_internal_rear_suspension() const {
  return _impl_.rear_suspension_;
}
inline uint32_t Setup::rear_suspension() const {
  // @@protoc_insertion_point(field_get:Setup.rear_suspension)
  return _internal_rear_suspension();
}
inline void Setup::_internal_set_rear_suspension(uint32_t value) {
  
  _impl_.rear_suspension_ = value;
}
inline void Setup::set_rear_suspension(uint32_t value) {
  _internal_set_rear_suspension(value);
  // @@protoc_insertion_point(field_set:Setup.rear_suspension)
}

// uint32 front_anti_roll_bar = 11;
inline void Setup::clear_front_anti_roll_bar() {
  _impl_.front_anti_roll_bar_ = 0u;
}
inline uint32_t Setup::_internal_front_anti_roll_bar() const {
  return _impl_.front_anti_roll_bar_;
}
inline uint32_t Setup::front_anti_roll_bar() const {
  // @@protoc_insertion_point(field_get:Setup.front_anti_roll_bar)
  return _internal_front_anti_roll_bar();
}
inline void Setup::_internal_set_front_anti_roll_bar(uint32_t value) {
  
  _impl_.front_anti_roll_bar_ = value;
}
inline void Setup::set_front_anti_roll_bar(uint32_t value) {
  _internal_set_front_anti_roll_bar(value);
  // @@protoc_insertion_point(field_set:Setup.front_anti_roll_bar)
}

// uint32 rear_anti_roll_bar = 12;
inline void Setup::clear_rear_anti_roll_bar() {
  _impl_.rear_anti_roll_bar_ = 0u;
}
inline uint32_t Setup::_internal_rear_anti_roll_bar() const {
  return _impl_.rear_anti_roll_bar_;
}
inline uint32_t Setup::rear_anti_roll_bar() const {
  // @@protoc_insertion_point(field_get:Setup.rear_anti_roll_bar)
  return _internal_rear_anti_roll_bar();
}
inline void Setup::_internal_set_rear_anti_roll_bar(uint32_t value) {
  
  _impl_.rear_anti_roll_bar_ = value;
}
inline void Setup::set_rear_anti_roll_bar(uint32_t value) {
  _internal_set_rear_anti_roll_bar(value);
  // @@protoc_insertion_point(field_set:Setup.rear_anti_roll_bar)
}

// uint32 front_suspension_height = 13;
inline void Setup::clear_front_suspension_height() {
  _impl_.front_suspension_height_ = 0u;
}
inline uint32_t Setup::_internal_front_suspension_height() const {
  return _impl_.front_suspension_height_;
}
inline uint32_t Setup::front_suspension_height() const {
  // @@protoc_insertion_point(field_get:Setup.front_suspension_height)
  return _internal_front_suspension_height();
}
inline void Setup::_internal_set_front_suspension_height(uint32_t value) {
  
  _impl_.front_suspension_height_ = value;
}
inline void Setup::set_front_suspension_height(uint32_t value) {
  _internal_set_front_suspension_height(value);
  // @@protoc_insertion_point(field_set:Setup.front_suspension_height)
}

// uint32 rear_suspension_height = 14;
inline void Setup::clear_rear_suspension_height() {
  _impl_.rear_suspension_height_ = 0u;
}
inline uint32_t Setup::_internal_rear_suspension_height() const {
  return _impl_.rear_suspension_height_;
}
inline uint32_t Setup::rear_suspension_height() const {
  // @@protoc_insertion_point(field_get:Setup.rear_suspension_height)
  return _internal_rear_suspension_height();
}
inline void Setup::_internal_set_rear_suspension_height(uint32_t value) {
  
  _impl_.rear_suspension_height_ = value;
}
inline void Setup::set_rear_suspension_height(uint32_t value) {
  _internal_set_rear_suspension_height(value);
  // @@protoc_insertion_point(field_set:Setup.rear_suspension_height)
}

// uint32 brake_pressure = 15;
inline void Setup::clear_brake_pressure() {
  _impl_.brake_pressure_ = 0u;
}
inline uint32_t Setup::_internal_brake_pressure() const {
  return _impl_.brake_pressure_;
}
inline uint32_t Setup::brake_pressure() const {
  // @@protoc_insertion_point(field_get:Setup.brake_pressure)
  return _internal_brake_pressure();
}
inline void Setup::_internal_set_brake_pressure(uint32_t value) {
  
  _impl_.brake_pressure_ = value;
}
inline void Setup::set_brake_pressure(uint32_t value) {
  _internal_set_brake_pressure(value);
  // @@protoc_insertion_point(field_set:Setup.brake_pressure)
}

// uint32 brake_bias = 16;
inline void Setup::clear_brake_bias() {
  _impl_.brake_bias_ = 0u;
}
inline uint32_t Setup::_internal_brake_bias() const {
  return _impl_.brake_bias_;
}
inline uint32_t Setup::brake_bias() const {
  // @@protoc_insertion_point(field_get:Setup.brake_bias)
  return _internal_brake_bias();
}
inline void Setup::_internal_set_brake_bias(uint32_t value) {
  
  _impl_.brake_bias_ = value;
}
inline void Setup::set_brake_bias(uint32_t value) {
  _internal_set_brake_bias(value);
  // @@protoc_insertion_point(field_set:Setup.brake_bias)
}

// float rear_left_tyre_pressure = 17;
inline void Setup::clear_rear_left_tyre_pressure() {
  _impl_.rear_left_tyre_pressure_ = 0;
}
inline float Setup::_internal_rear_left_tyre_pressure() const {
  return _impl_.rear_left_tyre_pressure_;
}
inline float Setup::rear_left_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Setup.rear_left_tyre_pressure)
  return _internal_rear_left_tyre_pressure();
}
inline void Setup::_internal_set_rear_left_tyre_pressure(float value) {
  
  _impl_.rear_left_tyre_pressure_ = value;
}
inline void Setup::set_rear_left_tyre_pressure(float value) {
  _internal_set_rear_left_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Setup.rear_left_tyre_pressure)
}

// float rear_right_tyre_pressure = 18;
inline void Setup::clear_rear_right_tyre_pressure() {
  _impl_.rear_right_tyre_pressure_ = 0;
}
inline float Setup::_internal_rear_right_tyre_pressure() const {
  return _impl_.rear_right_tyre_pressure_;
}
inline float Setup::rear_right_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Setup.rear_right_tyre_pressure)
  return _internal_rear_right_tyre_pressure();
}
inline void Setup::_internal_set_rear_right_tyre_pressure(float value) {
  
  _impl_.rear_right_tyre_pressure_ = value;
}
inline void Setup::set_rear_right_tyre_pressure(float value) {
  _internal_set_rear_right_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Setup.rear_right_tyre_pressure)
}

// float front_left_tyre_pressure = 19;
inline void Setup::clear_front_left_tyre_pressure() {
  _impl_.front_left_tyre_pressure_ = 0;
}
inline float Setup::_internal_front_left_tyre_pressure() const {
  return _impl_.front_left_tyre_pressure_;
}
inline float Setup::front_left_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Setup.front_left_tyre_pressure)
  return _internal_front_left_tyre_pressure();
}
inline void Setup::_internal_set_front_left_tyre_pressure(float value) {
  
  _impl_.front_left_tyre_pressure_ = value;
}
inline void Setup::set_front_left_tyre_pressure(float value) {
  _internal_set_front_left_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Setup.front_left_tyre_pressure)
}

// float front_right_tyre_pressure = 20;
inline void Setup::clear_front_right_tyre_pressure() {
  _impl_.front_right_tyre_pressure_ = 0;
}
inline float Setup::_internal_front_right_tyre_pressure() const {
  return _impl_.front_right_tyre_pressure_;
}
inline float Setup::front_right_tyre_pressure() const {
  // @@protoc_insertion_point(field_get:Setup.front_right_tyre_pressure)
  return _internal_front_right_tyre_pressure();
}
inline void Setup::_internal_set_front_right_tyre_pressure(float value) {
  
  _impl_.front_right_tyre_pressure_ = value;
}
inline void Setup::set_front_right_tyre_pressure(float value) {
  _internal_set_front_right_tyre_pressure(value);
  // @@protoc_insertion_point(field_set:Setup.front_right_tyre_pressure)
}

// uint32 ballast = 21;
inline void Setup::clear_ballast() {
  _impl_.ballast_ = 0u;
}
inline uint32_t Setup::_internal_ballast() const {
  return _impl_.ballast_;
}
inline uint32_t Setup::ballast() const {
  // @@protoc_insertion_point(field_get:Setup.ballast)
  return _internal_ballast();
}
inline void Setup::_internal_set_ballast(uint32_t value) {
  
  _impl_.ballast_ = value;
}
inline void Setup::set_ballast(uint32_t value) {
  _internal_set_ballast(value);
  // @@protoc_insertion_point(field_set:Setup.ballast)
}

// float fuel_load = 22;
inline void Setup::clear_fuel_load() {
  _impl_.fuel_load_ = 0;
}
inline float Setup::_internal_fuel_load() const {
  return _impl_.fuel_load_;
}
inline float Setup::fuel_load() const {
  // @@protoc_insertion_point(field_get:Setup.fuel_load)
  return _internal_fuel_load();
}
inline void Setup::_internal_set_fuel_load(float value) {
  
  _impl_.fuel_load_ = value;
}
inline void Setup::set_fuel_load(float value) {
  _internal_set_fuel_load(value);
  // @@protoc_insertion_point(field_set:Setup.fuel_load)
}

// float fuel_capacity = 23;
inline void Setup::clear_fuel_capacity() {
  _impl_.fuel_capacity_ = 0;
}
inline float Setup::_internal_fuel_capacity() const {
  return _impl_.fuel_capacity_;
}
inline float Setup::fuel_capacity() const {
  // @@protoc_insertion_point(field_get:Setup.fuel_capacity)
  return _internal_fuel_capacity();
}
inline void Setup::_internal_set_fuel_capacity(float value) {
  
  _impl_.fuel_capacity_ = value;
}
inline void Setup::set_fuel_capacity(float value) {
  _internal_set_fuel_capacity(value);
  // @@protoc_insertion_point(field_set:Setup.fuel_capacity)
}

// uint32 actual_tyre_compound = 24;
inline void Setup::clear_actual_tyre_compound() {
  _impl_.actual_tyre_compound_ = 0u;
}
inline uint32_t Setup::_internal_actual_tyre_compound() const {
  return _impl_.actual_tyre_compound_;
}
inline uint32_t Setup::actual_tyre_compound() const {
  // @@protoc_insertion_point(field_get:Setup.actual_tyre_compound)
  return _internal_actual_tyre_compound();
}
inline void Setup::_internal_set_actual_tyre_compound(uint32_t value) {
  
  _impl_.actual_tyre_compound_ = value;
}
inline void Setup::set_actual_tyre_compound(uint32_t value) {
  _internal_set_actual_tyre_compound(value);
  // @@protoc_insertion_point(field_set:Setup.actual_tyre_compound)
}

// uint32 visual_tyre_compound = 25;
inline void Setup::clear_visual_tyre_compound() {
  _impl_.visual_tyre_compound_ = 0u;
}
inline uint32_t Setup::_internal_visual_tyre_compound() const {
  return _impl_.visual_tyre_compound_;
}
inline uint32_t Setup::visual_tyre_compound() const {
  // @@protoc_insertion_point(field_get:Setup.visual_tyre_compound)
  return _internal_visual_tyre_compound();
}
inline void Setup::_internal_set_visual_tyre_compound(uint32_t value) {
  
  _impl_.visual_tyre_compound_ = value;
}
inline void Setup::set_visual_tyre_compound(uint32_t value) {
  _internal_set_visual_tyre_compound(value);
  // @@protoc_insertion_point(field_set:Setup.visual_tyre_compound)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Setup_2eproto
