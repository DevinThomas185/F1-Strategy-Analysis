// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Lap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Lap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Telemetry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Lap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Lap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Lap_2eproto;
class Lap;
struct LapDefaultTypeInternal;
extern LapDefaultTypeInternal _Lap_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Lap* Arena::CreateMaybeMessage<::Lap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Lap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Lap) */ {
 public:
  inline Lap() : Lap(nullptr) {}
  ~Lap() override;
  explicit PROTOBUF_CONSTEXPR Lap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lap(const Lap& from);
  Lap(Lap&& from) noexcept
    : Lap() {
    *this = ::std::move(from);
  }

  inline Lap& operator=(const Lap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lap& operator=(Lap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lap& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lap* internal_default_instance() {
    return reinterpret_cast<const Lap*>(
               &_Lap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lap& a, Lap& b) {
    a.Swap(&b);
  }
  inline void Swap(Lap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Lap& from) {
    Lap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Lap";
  }
  protected:
  explicit Lap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryFieldNumber = 9,
    kLapTimeFieldNumber = 1,
    kSector1FieldNumber = 2,
    kSector2FieldNumber = 3,
    kSector3FieldNumber = 4,
    kValidLapFieldNumber = 5,
    kValidSector1FieldNumber = 6,
    kValidSector2FieldNumber = 7,
    kValidSector3FieldNumber = 8,
  };
  // repeated .Telemetry telemetry = 9;
  int telemetry_size() const;
  private:
  int _internal_telemetry_size() const;
  public:
  void clear_telemetry();
  ::Telemetry* mutable_telemetry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Telemetry >*
      mutable_telemetry();
  private:
  const ::Telemetry& _internal_telemetry(int index) const;
  ::Telemetry* _internal_add_telemetry();
  public:
  const ::Telemetry& telemetry(int index) const;
  ::Telemetry* add_telemetry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Telemetry >&
      telemetry() const;

  // uint32 lap_time = 1;
  void clear_lap_time();
  uint32_t lap_time() const;
  void set_lap_time(uint32_t value);
  private:
  uint32_t _internal_lap_time() const;
  void _internal_set_lap_time(uint32_t value);
  public:

  // uint32 sector_1 = 2;
  void clear_sector_1();
  uint32_t sector_1() const;
  void set_sector_1(uint32_t value);
  private:
  uint32_t _internal_sector_1() const;
  void _internal_set_sector_1(uint32_t value);
  public:

  // uint32 sector_2 = 3;
  void clear_sector_2();
  uint32_t sector_2() const;
  void set_sector_2(uint32_t value);
  private:
  uint32_t _internal_sector_2() const;
  void _internal_set_sector_2(uint32_t value);
  public:

  // uint32 sector_3 = 4;
  void clear_sector_3();
  uint32_t sector_3() const;
  void set_sector_3(uint32_t value);
  private:
  uint32_t _internal_sector_3() const;
  void _internal_set_sector_3(uint32_t value);
  public:

  // bool valid_lap = 5;
  void clear_valid_lap();
  bool valid_lap() const;
  void set_valid_lap(bool value);
  private:
  bool _internal_valid_lap() const;
  void _internal_set_valid_lap(bool value);
  public:

  // bool valid_sector_1 = 6;
  void clear_valid_sector_1();
  bool valid_sector_1() const;
  void set_valid_sector_1(bool value);
  private:
  bool _internal_valid_sector_1() const;
  void _internal_set_valid_sector_1(bool value);
  public:

  // bool valid_sector_2 = 7;
  void clear_valid_sector_2();
  bool valid_sector_2() const;
  void set_valid_sector_2(bool value);
  private:
  bool _internal_valid_sector_2() const;
  void _internal_set_valid_sector_2(bool value);
  public:

  // bool valid_sector_3 = 8;
  void clear_valid_sector_3();
  bool valid_sector_3() const;
  void set_valid_sector_3(bool value);
  private:
  bool _internal_valid_sector_3() const;
  void _internal_set_valid_sector_3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Lap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Telemetry > telemetry_;
    uint32_t lap_time_;
    uint32_t sector_1_;
    uint32_t sector_2_;
    uint32_t sector_3_;
    bool valid_lap_;
    bool valid_sector_1_;
    bool valid_sector_2_;
    bool valid_sector_3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Lap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lap

// uint32 lap_time = 1;
inline void Lap::clear_lap_time() {
  _impl_.lap_time_ = 0u;
}
inline uint32_t Lap::_internal_lap_time() const {
  return _impl_.lap_time_;
}
inline uint32_t Lap::lap_time() const {
  // @@protoc_insertion_point(field_get:Lap.lap_time)
  return _internal_lap_time();
}
inline void Lap::_internal_set_lap_time(uint32_t value) {
  
  _impl_.lap_time_ = value;
}
inline void Lap::set_lap_time(uint32_t value) {
  _internal_set_lap_time(value);
  // @@protoc_insertion_point(field_set:Lap.lap_time)
}

// uint32 sector_1 = 2;
inline void Lap::clear_sector_1() {
  _impl_.sector_1_ = 0u;
}
inline uint32_t Lap::_internal_sector_1() const {
  return _impl_.sector_1_;
}
inline uint32_t Lap::sector_1() const {
  // @@protoc_insertion_point(field_get:Lap.sector_1)
  return _internal_sector_1();
}
inline void Lap::_internal_set_sector_1(uint32_t value) {
  
  _impl_.sector_1_ = value;
}
inline void Lap::set_sector_1(uint32_t value) {
  _internal_set_sector_1(value);
  // @@protoc_insertion_point(field_set:Lap.sector_1)
}

// uint32 sector_2 = 3;
inline void Lap::clear_sector_2() {
  _impl_.sector_2_ = 0u;
}
inline uint32_t Lap::_internal_sector_2() const {
  return _impl_.sector_2_;
}
inline uint32_t Lap::sector_2() const {
  // @@protoc_insertion_point(field_get:Lap.sector_2)
  return _internal_sector_2();
}
inline void Lap::_internal_set_sector_2(uint32_t value) {
  
  _impl_.sector_2_ = value;
}
inline void Lap::set_sector_2(uint32_t value) {
  _internal_set_sector_2(value);
  // @@protoc_insertion_point(field_set:Lap.sector_2)
}

// uint32 sector_3 = 4;
inline void Lap::clear_sector_3() {
  _impl_.sector_3_ = 0u;
}
inline uint32_t Lap::_internal_sector_3() const {
  return _impl_.sector_3_;
}
inline uint32_t Lap::sector_3() const {
  // @@protoc_insertion_point(field_get:Lap.sector_3)
  return _internal_sector_3();
}
inline void Lap::_internal_set_sector_3(uint32_t value) {
  
  _impl_.sector_3_ = value;
}
inline void Lap::set_sector_3(uint32_t value) {
  _internal_set_sector_3(value);
  // @@protoc_insertion_point(field_set:Lap.sector_3)
}

// bool valid_lap = 5;
inline void Lap::clear_valid_lap() {
  _impl_.valid_lap_ = false;
}
inline bool Lap::_internal_valid_lap() const {
  return _impl_.valid_lap_;
}
inline bool Lap::valid_lap() const {
  // @@protoc_insertion_point(field_get:Lap.valid_lap)
  return _internal_valid_lap();
}
inline void Lap::_internal_set_valid_lap(bool value) {
  
  _impl_.valid_lap_ = value;
}
inline void Lap::set_valid_lap(bool value) {
  _internal_set_valid_lap(value);
  // @@protoc_insertion_point(field_set:Lap.valid_lap)
}

// bool valid_sector_1 = 6;
inline void Lap::clear_valid_sector_1() {
  _impl_.valid_sector_1_ = false;
}
inline bool Lap::_internal_valid_sector_1() const {
  return _impl_.valid_sector_1_;
}
inline bool Lap::valid_sector_1() const {
  // @@protoc_insertion_point(field_get:Lap.valid_sector_1)
  return _internal_valid_sector_1();
}
inline void Lap::_internal_set_valid_sector_1(bool value) {
  
  _impl_.valid_sector_1_ = value;
}
inline void Lap::set_valid_sector_1(bool value) {
  _internal_set_valid_sector_1(value);
  // @@protoc_insertion_point(field_set:Lap.valid_sector_1)
}

// bool valid_sector_2 = 7;
inline void Lap::clear_valid_sector_2() {
  _impl_.valid_sector_2_ = false;
}
inline bool Lap::_internal_valid_sector_2() const {
  return _impl_.valid_sector_2_;
}
inline bool Lap::valid_sector_2() const {
  // @@protoc_insertion_point(field_get:Lap.valid_sector_2)
  return _internal_valid_sector_2();
}
inline void Lap::_internal_set_valid_sector_2(bool value) {
  
  _impl_.valid_sector_2_ = value;
}
inline void Lap::set_valid_sector_2(bool value) {
  _internal_set_valid_sector_2(value);
  // @@protoc_insertion_point(field_set:Lap.valid_sector_2)
}

// bool valid_sector_3 = 8;
inline void Lap::clear_valid_sector_3() {
  _impl_.valid_sector_3_ = false;
}
inline bool Lap::_internal_valid_sector_3() const {
  return _impl_.valid_sector_3_;
}
inline bool Lap::valid_sector_3() const {
  // @@protoc_insertion_point(field_get:Lap.valid_sector_3)
  return _internal_valid_sector_3();
}
inline void Lap::_internal_set_valid_sector_3(bool value) {
  
  _impl_.valid_sector_3_ = value;
}
inline void Lap::set_valid_sector_3(bool value) {
  _internal_set_valid_sector_3(value);
  // @@protoc_insertion_point(field_set:Lap.valid_sector_3)
}

// repeated .Telemetry telemetry = 9;
inline int Lap::_internal_telemetry_size() const {
  return _impl_.telemetry_.size();
}
inline int Lap::telemetry_size() const {
  return _internal_telemetry_size();
}
inline ::Telemetry* Lap::mutable_telemetry(int index) {
  // @@protoc_insertion_point(field_mutable:Lap.telemetry)
  return _impl_.telemetry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Telemetry >*
Lap::mutable_telemetry() {
  // @@protoc_insertion_point(field_mutable_list:Lap.telemetry)
  return &_impl_.telemetry_;
}
inline const ::Telemetry& Lap::_internal_telemetry(int index) const {
  return _impl_.telemetry_.Get(index);
}
inline const ::Telemetry& Lap::telemetry(int index) const {
  // @@protoc_insertion_point(field_get:Lap.telemetry)
  return _internal_telemetry(index);
}
inline ::Telemetry* Lap::_internal_add_telemetry() {
  return _impl_.telemetry_.Add();
}
inline ::Telemetry* Lap::add_telemetry() {
  ::Telemetry* _add = _internal_add_telemetry();
  // @@protoc_insertion_point(field_add:Lap.telemetry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Telemetry >&
Lap::telemetry() const {
  // @@protoc_insertion_point(field_list:Lap.telemetry)
  return _impl_.telemetry_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Lap_2eproto
