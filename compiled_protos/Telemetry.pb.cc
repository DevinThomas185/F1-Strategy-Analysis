// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Telemetry.proto

#include "Telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Telemetry::Telemetry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_)*/0u
  , /*decltype(_impl_.throttle_)*/0
  , /*decltype(_impl_.steer_)*/0
  , /*decltype(_impl_.brake_)*/0
  , /*decltype(_impl_.clutch_)*/0u
  , /*decltype(_impl_.gear_)*/0
  , /*decltype(_impl_.engine_rpm_)*/0u
  , /*decltype(_impl_.drs_)*/0u
  , /*decltype(_impl_.rev_lights_percent_)*/0u
  , /*decltype(_impl_.rev_lights_bit_value_)*/0u
  , /*decltype(_impl_.rear_left_brake_temperature_)*/0u
  , /*decltype(_impl_.rear_right_brake_temperature_)*/0u
  , /*decltype(_impl_.front_left_brake_temperature_)*/0u
  , /*decltype(_impl_.front_right_brake_temperature_)*/0u
  , /*decltype(_impl_.rear_left_tyre_surface_temperature_)*/0u
  , /*decltype(_impl_.rear_right_tyre_surface_temperature_)*/0u
  , /*decltype(_impl_.front_left_tyre_surface_temperature_)*/0u
  , /*decltype(_impl_.front_right_tyre_surface_temperature_)*/0u
  , /*decltype(_impl_.rear_left_tyre_inner_temperature_)*/0u
  , /*decltype(_impl_.rear_right_tyre_inner_temperature_)*/0u
  , /*decltype(_impl_.front_left_tyre_inner_temperature_)*/0u
  , /*decltype(_impl_.front_right_tyre_inner_temperature_)*/0u
  , /*decltype(_impl_.engine_temperature_)*/0u
  , /*decltype(_impl_.rear_left_tyre_pressure_)*/0
  , /*decltype(_impl_.rear_right_tyre_pressure_)*/0
  , /*decltype(_impl_.front_left_tyre_pressure_)*/0
  , /*decltype(_impl_.front_right_tyre_pressure_)*/0
  , /*decltype(_impl_.rear_left_surface_type_)*/0u
  , /*decltype(_impl_.rear_right_surface_type_)*/0u
  , /*decltype(_impl_.front_left_surface_type_)*/0u
  , /*decltype(_impl_.front_right_surface_type_)*/0u
  , /*decltype(_impl_.lap_distance_)*/0
  , /*decltype(_impl_.fuel_in_tank_)*/0
  , /*decltype(_impl_.tyres_age_laps_)*/0u
  , /*decltype(_impl_.ers_store_energy_)*/0
  , /*decltype(_impl_.ers_deploy_mode_)*/0u
  , /*decltype(_impl_.ers_harvested_this_lap_mguk_)*/0
  , /*decltype(_impl_.ers_harvested_this_lap_mguh_)*/0
  , /*decltype(_impl_.ers_deployed_this_lap_)*/0
  , /*decltype(_impl_.rear_left_tyre_wear_)*/0
  , /*decltype(_impl_.rear_right_tyre_wear_)*/0
  , /*decltype(_impl_.front_left_tyre_wear_)*/0
  , /*decltype(_impl_.front_right_tyre_wear_)*/0
  , /*decltype(_impl_.rear_left_tyre_damage_)*/0u
  , /*decltype(_impl_.rear_right_tyre_damage_)*/0u
  , /*decltype(_impl_.front_left_tyre_damage_)*/0u
  , /*decltype(_impl_.front_right_tyre_damage_)*/0u
  , /*decltype(_impl_.gear_box_damage_)*/0u
  , /*decltype(_impl_.engine_damage_)*/0u
  , /*decltype(_impl_.engine_ce_wear_)*/0u
  , /*decltype(_impl_.engine_ice_wear_)*/0u
  , /*decltype(_impl_.engine_tc_wear_)*/0u
  , /*decltype(_impl_.engine_es_wear_)*/0u
  , /*decltype(_impl_.engine_mguh_wear_)*/0u
  , /*decltype(_impl_.engine_mguk_wear_)*/0u
  , /*decltype(_impl_.rear_left_suspension_position_)*/0
  , /*decltype(_impl_.rear_right_suspension_position_)*/0
  , /*decltype(_impl_.front_left_suspension_position_)*/0
  , /*decltype(_impl_.front_right_suspension_position_)*/0
  , /*decltype(_impl_.rear_left_wheel_speed_)*/0
  , /*decltype(_impl_.rear_right_wheel_speed_)*/0
  , /*decltype(_impl_.front_left_wheel_speed_)*/0
  , /*decltype(_impl_.front_right_wheel_speed_)*/0
  , /*decltype(_impl_.rear_left_wheel_slip_)*/0
  , /*decltype(_impl_.rear_right_wheel_slip_)*/0
  , /*decltype(_impl_.front_left_wheel_slip_)*/0
  , /*decltype(_impl_.front_right_wheel_slip_)*/0
  , /*decltype(_impl_.world_position_x_)*/0
  , /*decltype(_impl_.world_position_y_)*/0
  , /*decltype(_impl_.world_position_z_)*/0
  , /*decltype(_impl_.g_force_lateral_)*/0
  , /*decltype(_impl_.g_force_longitudinal_)*/0
  , /*decltype(_impl_.g_force_vertical_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TelemetryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryDefaultTypeInternal() {}
  union {
    Telemetry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryDefaultTypeInternal _Telemetry_default_instance_;
static ::_pb::Metadata file_level_metadata_Telemetry_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Telemetry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Telemetry_2eproto = nullptr;

const uint32_t TableStruct_Telemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.steer_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.clutch_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.gear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.drs_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rev_lights_percent_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rev_lights_bit_value_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_brake_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_brake_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_brake_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_brake_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_tyre_surface_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_tyre_surface_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_tyre_surface_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_tyre_surface_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_tyre_inner_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_tyre_inner_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_tyre_inner_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_tyre_inner_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_temperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_surface_type_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_surface_type_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_surface_type_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_surface_type_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.lap_distance_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.fuel_in_tank_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.tyres_age_laps_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.ers_store_energy_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.ers_deploy_mode_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.ers_harvested_this_lap_mguk_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.ers_harvested_this_lap_mguh_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.ers_deployed_this_lap_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_tyre_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_tyre_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_tyre_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_tyre_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_tyre_damage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_tyre_damage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_tyre_damage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_tyre_damage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.gear_box_damage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_damage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_ce_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_ice_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_tc_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_es_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_mguh_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.engine_mguk_wear_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_suspension_position_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_suspension_position_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_suspension_position_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_suspension_position_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_wheel_speed_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_left_wheel_slip_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.rear_right_wheel_slip_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_left_wheel_slip_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.front_right_wheel_slip_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.world_position_x_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.world_position_y_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.world_position_z_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.g_force_lateral_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.g_force_longitudinal_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.g_force_vertical_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _impl_.roll_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Telemetry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Telemetry_default_instance_._instance,
};

const char descriptor_table_protodef_Telemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Telemetry.proto\"\345\021\n\tTelemetry\022\r\n\005speed"
  "\030\001 \001(\r\022\020\n\010throttle\030\002 \001(\002\022\r\n\005steer\030\003 \001(\002\022"
  "\r\n\005brake\030\004 \001(\002\022\016\n\006clutch\030\005 \001(\r\022\014\n\004gear\030\006"
  " \001(\005\022\022\n\nengine_rpm\030\007 \001(\r\022\013\n\003drs\030\010 \001(\r\022\032\n"
  "\022rev_lights_percent\030\t \001(\r\022\034\n\024rev_lights_"
  "bit_value\030\n \001(\r\022#\n\033rear_left_brake_tempe"
  "rature\030\013 \001(\r\022$\n\034rear_right_brake_tempera"
  "ture\030\014 \001(\r\022$\n\034front_left_brake_temperatu"
  "re\030\r \001(\r\022%\n\035front_right_brake_temperatur"
  "e\030\016 \001(\r\022*\n\"rear_left_tyre_surface_temper"
  "ature\030\017 \001(\r\022+\n#rear_right_tyre_surface_t"
  "emperature\030\020 \001(\r\022+\n#front_left_tyre_surf"
  "ace_temperature\030\021 \001(\r\022,\n$front_right_tyr"
  "e_surface_temperature\030\022 \001(\r\022(\n rear_left"
  "_tyre_inner_temperature\030\023 \001(\r\022)\n!rear_ri"
  "ght_tyre_inner_temperature\030\024 \001(\r\022)\n!fron"
  "t_left_tyre_inner_temperature\030\025 \001(\r\022*\n\"f"
  "ront_right_tyre_inner_temperature\030\026 \001(\r\022"
  "\032\n\022engine_temperature\030\027 \001(\r\022\037\n\027rear_left"
  "_tyre_pressure\030\030 \001(\002\022 \n\030rear_right_tyre_"
  "pressure\030\031 \001(\002\022 \n\030front_left_tyre_pressu"
  "re\030\032 \001(\002\022!\n\031front_right_tyre_pressure\030\033 "
  "\001(\002\022\036\n\026rear_left_surface_type\030\034 \001(\r\022\037\n\027r"
  "ear_right_surface_type\030\035 \001(\r\022\037\n\027front_le"
  "ft_surface_type\030\036 \001(\r\022 \n\030front_right_sur"
  "face_type\030\037 \001(\r\022\024\n\014lap_distance\030  \001(\002\022\024\n"
  "\014fuel_in_tank\030! \001(\002\022\026\n\016tyres_age_laps\030\" "
  "\001(\r\022\030\n\020ers_store_energy\030# \001(\002\022\027\n\017ers_dep"
  "loy_mode\030$ \001(\r\022#\n\033ers_harvested_this_lap"
  "_mguk\030% \001(\002\022#\n\033ers_harvested_this_lap_mg"
  "uh\030& \001(\002\022\035\n\025ers_deployed_this_lap\030\' \001(\002\022"
  "\033\n\023rear_left_tyre_wear\030( \001(\002\022\034\n\024rear_rig"
  "ht_tyre_wear\030) \001(\002\022\034\n\024front_left_tyre_we"
  "ar\030* \001(\002\022\035\n\025front_right_tyre_wear\030+ \001(\002\022"
  "\035\n\025rear_left_tyre_damage\030, \001(\r\022\036\n\026rear_r"
  "ight_tyre_damage\030- \001(\r\022\036\n\026front_left_tyr"
  "e_damage\030. \001(\r\022\037\n\027front_right_tyre_damag"
  "e\030/ \001(\r\022\027\n\017gear_box_damage\0300 \001(\r\022\025\n\rengi"
  "ne_damage\0301 \001(\r\022\026\n\016engine_ce_wear\0302 \001(\r\022"
  "\027\n\017engine_ice_wear\0303 \001(\r\022\026\n\016engine_tc_we"
  "ar\0304 \001(\r\022\026\n\016engine_es_wear\0305 \001(\r\022\030\n\020engi"
  "ne_mguh_wear\0306 \001(\r\022\030\n\020engine_mguk_wear\0307"
  " \001(\r\022%\n\035rear_left_suspension_position\0308 "
  "\001(\002\022&\n\036rear_right_suspension_position\0309 "
  "\001(\002\022&\n\036front_left_suspension_position\030: "
  "\001(\002\022\'\n\037front_right_suspension_position\030;"
  " \001(\002\022\035\n\025rear_left_wheel_speed\030< \001(\002\022\036\n\026r"
  "ear_right_wheel_speed\030= \001(\002\022\036\n\026front_lef"
  "t_wheel_speed\030> \001(\002\022\037\n\027front_right_wheel"
  "_speed\030\? \001(\002\022\034\n\024rear_left_wheel_slip\030@ \001"
  "(\002\022\035\n\025rear_right_wheel_slip\030A \001(\002\022\035\n\025fro"
  "nt_left_wheel_slip\030B \001(\002\022\036\n\026front_right_"
  "wheel_slip\030C \001(\002\022\030\n\020world_position_x\030D \001"
  "(\002\022\030\n\020world_position_y\030E \001(\002\022\030\n\020world_po"
  "sition_z\030F \001(\002\022\027\n\017g_force_lateral\030G \001(\002\022"
  "\034\n\024g_force_longitudinal\030H \001(\002\022\030\n\020g_force"
  "_vertical\030I \001(\002\022\013\n\003yaw\030J \001(\002\022\r\n\005pitch\030K "
  "\001(\002\022\014\n\004roll\030L \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Telemetry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Telemetry_2eproto = {
    false, false, 2305, descriptor_table_protodef_Telemetry_2eproto,
    "Telemetry.proto",
    &descriptor_table_Telemetry_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_Telemetry_2eproto::offsets,
    file_level_metadata_Telemetry_2eproto, file_level_enum_descriptors_Telemetry_2eproto,
    file_level_service_descriptors_Telemetry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Telemetry_2eproto_getter() {
  return &descriptor_table_Telemetry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Telemetry_2eproto(&descriptor_table_Telemetry_2eproto);

// ===================================================================

class Telemetry::_Internal {
 public:
};

Telemetry::Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Telemetry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){}
    , decltype(_impl_.throttle_){}
    , decltype(_impl_.steer_){}
    , decltype(_impl_.brake_){}
    , decltype(_impl_.clutch_){}
    , decltype(_impl_.gear_){}
    , decltype(_impl_.engine_rpm_){}
    , decltype(_impl_.drs_){}
    , decltype(_impl_.rev_lights_percent_){}
    , decltype(_impl_.rev_lights_bit_value_){}
    , decltype(_impl_.rear_left_brake_temperature_){}
    , decltype(_impl_.rear_right_brake_temperature_){}
    , decltype(_impl_.front_left_brake_temperature_){}
    , decltype(_impl_.front_right_brake_temperature_){}
    , decltype(_impl_.rear_left_tyre_surface_temperature_){}
    , decltype(_impl_.rear_right_tyre_surface_temperature_){}
    , decltype(_impl_.front_left_tyre_surface_temperature_){}
    , decltype(_impl_.front_right_tyre_surface_temperature_){}
    , decltype(_impl_.rear_left_tyre_inner_temperature_){}
    , decltype(_impl_.rear_right_tyre_inner_temperature_){}
    , decltype(_impl_.front_left_tyre_inner_temperature_){}
    , decltype(_impl_.front_right_tyre_inner_temperature_){}
    , decltype(_impl_.engine_temperature_){}
    , decltype(_impl_.rear_left_tyre_pressure_){}
    , decltype(_impl_.rear_right_tyre_pressure_){}
    , decltype(_impl_.front_left_tyre_pressure_){}
    , decltype(_impl_.front_right_tyre_pressure_){}
    , decltype(_impl_.rear_left_surface_type_){}
    , decltype(_impl_.rear_right_surface_type_){}
    , decltype(_impl_.front_left_surface_type_){}
    , decltype(_impl_.front_right_surface_type_){}
    , decltype(_impl_.lap_distance_){}
    , decltype(_impl_.fuel_in_tank_){}
    , decltype(_impl_.tyres_age_laps_){}
    , decltype(_impl_.ers_store_energy_){}
    , decltype(_impl_.ers_deploy_mode_){}
    , decltype(_impl_.ers_harvested_this_lap_mguk_){}
    , decltype(_impl_.ers_harvested_this_lap_mguh_){}
    , decltype(_impl_.ers_deployed_this_lap_){}
    , decltype(_impl_.rear_left_tyre_wear_){}
    , decltype(_impl_.rear_right_tyre_wear_){}
    , decltype(_impl_.front_left_tyre_wear_){}
    , decltype(_impl_.front_right_tyre_wear_){}
    , decltype(_impl_.rear_left_tyre_damage_){}
    , decltype(_impl_.rear_right_tyre_damage_){}
    , decltype(_impl_.front_left_tyre_damage_){}
    , decltype(_impl_.front_right_tyre_damage_){}
    , decltype(_impl_.gear_box_damage_){}
    , decltype(_impl_.engine_damage_){}
    , decltype(_impl_.engine_ce_wear_){}
    , decltype(_impl_.engine_ice_wear_){}
    , decltype(_impl_.engine_tc_wear_){}
    , decltype(_impl_.engine_es_wear_){}
    , decltype(_impl_.engine_mguh_wear_){}
    , decltype(_impl_.engine_mguk_wear_){}
    , decltype(_impl_.rear_left_suspension_position_){}
    , decltype(_impl_.rear_right_suspension_position_){}
    , decltype(_impl_.front_left_suspension_position_){}
    , decltype(_impl_.front_right_suspension_position_){}
    , decltype(_impl_.rear_left_wheel_speed_){}
    , decltype(_impl_.rear_right_wheel_speed_){}
    , decltype(_impl_.front_left_wheel_speed_){}
    , decltype(_impl_.front_right_wheel_speed_){}
    , decltype(_impl_.rear_left_wheel_slip_){}
    , decltype(_impl_.rear_right_wheel_slip_){}
    , decltype(_impl_.front_left_wheel_slip_){}
    , decltype(_impl_.front_right_wheel_slip_){}
    , decltype(_impl_.world_position_x_){}
    , decltype(_impl_.world_position_y_){}
    , decltype(_impl_.world_position_z_){}
    , decltype(_impl_.g_force_lateral_){}
    , decltype(_impl_.g_force_longitudinal_){}
    , decltype(_impl_.g_force_vertical_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.roll_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speed_, &from._impl_.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:Telemetry)
}

inline void Telemetry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_){0u}
    , decltype(_impl_.throttle_){0}
    , decltype(_impl_.steer_){0}
    , decltype(_impl_.brake_){0}
    , decltype(_impl_.clutch_){0u}
    , decltype(_impl_.gear_){0}
    , decltype(_impl_.engine_rpm_){0u}
    , decltype(_impl_.drs_){0u}
    , decltype(_impl_.rev_lights_percent_){0u}
    , decltype(_impl_.rev_lights_bit_value_){0u}
    , decltype(_impl_.rear_left_brake_temperature_){0u}
    , decltype(_impl_.rear_right_brake_temperature_){0u}
    , decltype(_impl_.front_left_brake_temperature_){0u}
    , decltype(_impl_.front_right_brake_temperature_){0u}
    , decltype(_impl_.rear_left_tyre_surface_temperature_){0u}
    , decltype(_impl_.rear_right_tyre_surface_temperature_){0u}
    , decltype(_impl_.front_left_tyre_surface_temperature_){0u}
    , decltype(_impl_.front_right_tyre_surface_temperature_){0u}
    , decltype(_impl_.rear_left_tyre_inner_temperature_){0u}
    , decltype(_impl_.rear_right_tyre_inner_temperature_){0u}
    , decltype(_impl_.front_left_tyre_inner_temperature_){0u}
    , decltype(_impl_.front_right_tyre_inner_temperature_){0u}
    , decltype(_impl_.engine_temperature_){0u}
    , decltype(_impl_.rear_left_tyre_pressure_){0}
    , decltype(_impl_.rear_right_tyre_pressure_){0}
    , decltype(_impl_.front_left_tyre_pressure_){0}
    , decltype(_impl_.front_right_tyre_pressure_){0}
    , decltype(_impl_.rear_left_surface_type_){0u}
    , decltype(_impl_.rear_right_surface_type_){0u}
    , decltype(_impl_.front_left_surface_type_){0u}
    , decltype(_impl_.front_right_surface_type_){0u}
    , decltype(_impl_.lap_distance_){0}
    , decltype(_impl_.fuel_in_tank_){0}
    , decltype(_impl_.tyres_age_laps_){0u}
    , decltype(_impl_.ers_store_energy_){0}
    , decltype(_impl_.ers_deploy_mode_){0u}
    , decltype(_impl_.ers_harvested_this_lap_mguk_){0}
    , decltype(_impl_.ers_harvested_this_lap_mguh_){0}
    , decltype(_impl_.ers_deployed_this_lap_){0}
    , decltype(_impl_.rear_left_tyre_wear_){0}
    , decltype(_impl_.rear_right_tyre_wear_){0}
    , decltype(_impl_.front_left_tyre_wear_){0}
    , decltype(_impl_.front_right_tyre_wear_){0}
    , decltype(_impl_.rear_left_tyre_damage_){0u}
    , decltype(_impl_.rear_right_tyre_damage_){0u}
    , decltype(_impl_.front_left_tyre_damage_){0u}
    , decltype(_impl_.front_right_tyre_damage_){0u}
    , decltype(_impl_.gear_box_damage_){0u}
    , decltype(_impl_.engine_damage_){0u}
    , decltype(_impl_.engine_ce_wear_){0u}
    , decltype(_impl_.engine_ice_wear_){0u}
    , decltype(_impl_.engine_tc_wear_){0u}
    , decltype(_impl_.engine_es_wear_){0u}
    , decltype(_impl_.engine_mguh_wear_){0u}
    , decltype(_impl_.engine_mguk_wear_){0u}
    , decltype(_impl_.rear_left_suspension_position_){0}
    , decltype(_impl_.rear_right_suspension_position_){0}
    , decltype(_impl_.front_left_suspension_position_){0}
    , decltype(_impl_.front_right_suspension_position_){0}
    , decltype(_impl_.rear_left_wheel_speed_){0}
    , decltype(_impl_.rear_right_wheel_speed_){0}
    , decltype(_impl_.front_left_wheel_speed_){0}
    , decltype(_impl_.front_right_wheel_speed_){0}
    , decltype(_impl_.rear_left_wheel_slip_){0}
    , decltype(_impl_.rear_right_wheel_slip_){0}
    , decltype(_impl_.front_left_wheel_slip_){0}
    , decltype(_impl_.front_right_wheel_slip_){0}
    , decltype(_impl_.world_position_x_){0}
    , decltype(_impl_.world_position_y_){0}
    , decltype(_impl_.world_position_z_){0}
    , decltype(_impl_.g_force_lateral_){0}
    , decltype(_impl_.g_force_longitudinal_){0}
    , decltype(_impl_.g_force_vertical_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.roll_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:Telemetry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Telemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Telemetry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:Telemetry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Telemetry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float throttle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float steer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 clutch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.clutch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_rpm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.drs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rev_lights_percent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.rev_lights_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rev_lights_bit_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rev_lights_bit_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_left_brake_temperature = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.rear_left_brake_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_right_brake_temperature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.rear_right_brake_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_left_brake_temperature = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.front_left_brake_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_right_brake_temperature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.front_right_brake_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_left_tyre_surface_temperature = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.rear_left_tyre_surface_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_right_tyre_surface_temperature = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.rear_right_tyre_surface_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_left_tyre_surface_temperature = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.front_left_tyre_surface_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_right_tyre_surface_temperature = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.front_right_tyre_surface_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_left_tyre_inner_temperature = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.rear_left_tyre_inner_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_right_tyre_inner_temperature = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.rear_right_tyre_inner_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_left_tyre_inner_temperature = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.front_left_tyre_inner_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_right_tyre_inner_temperature = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.front_right_tyre_inner_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_temperature = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.engine_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rear_left_tyre_pressure = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.rear_left_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_right_tyre_pressure = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.rear_right_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_tyre_pressure = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.front_left_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_tyre_pressure = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.front_right_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_left_surface_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.rear_left_surface_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_right_surface_type = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.rear_right_surface_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_left_surface_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.front_left_surface_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_right_surface_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.front_right_surface_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float lap_distance = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _impl_.lap_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fuel_in_tank = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.fuel_in_tank_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 tyres_age_laps = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tyres_age_laps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ers_store_energy = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.ers_store_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 ers_deploy_mode = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ers_deploy_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ers_harvested_this_lap_mguk = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.ers_harvested_this_lap_mguk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ers_harvested_this_lap_mguh = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.ers_harvested_this_lap_mguh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ers_deployed_this_lap = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.ers_deployed_this_lap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_left_tyre_wear = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.rear_left_tyre_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_right_tyre_wear = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.rear_right_tyre_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_tyre_wear = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.front_left_tyre_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_tyre_wear = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.front_right_tyre_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_left_tyre_damage = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.rear_left_tyre_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_right_tyre_damage = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.rear_right_tyre_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_left_tyre_damage = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.front_left_tyre_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_right_tyre_damage = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.front_right_tyre_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gear_box_damage = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.gear_box_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_damage = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.engine_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_ce_wear = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.engine_ce_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_ice_wear = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.engine_ice_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_tc_wear = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.engine_tc_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_es_wear = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.engine_es_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_mguh_wear = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.engine_mguh_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 engine_mguk_wear = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.engine_mguk_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rear_left_suspension_position = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.rear_left_suspension_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_right_suspension_position = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.rear_right_suspension_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_suspension_position = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.front_left_suspension_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_suspension_position = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.front_right_suspension_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_left_wheel_speed = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.rear_left_wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_right_wheel_speed = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _impl_.rear_right_wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_wheel_speed = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _impl_.front_left_wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_wheel_speed = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _impl_.front_right_wheel_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_left_wheel_slip = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _impl_.rear_left_wheel_slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_right_wheel_slip = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.rear_right_wheel_slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_wheel_slip = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.front_left_wheel_slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_wheel_slip = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.front_right_wheel_slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float world_position_x = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.world_position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float world_position_y = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.world_position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float world_position_z = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.world_position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g_force_lateral = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.g_force_lateral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g_force_longitudinal = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.g_force_longitudinal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g_force_vertical = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.g_force_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Telemetry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Telemetry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_speed(), target);
  }

  // float throttle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_throttle = this->_internal_throttle();
  uint32_t raw_throttle;
  memcpy(&raw_throttle, &tmp_throttle, sizeof(tmp_throttle));
  if (raw_throttle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_throttle(), target);
  }

  // float steer = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_steer = this->_internal_steer();
  uint32_t raw_steer;
  memcpy(&raw_steer, &tmp_steer, sizeof(tmp_steer));
  if (raw_steer != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_steer(), target);
  }

  // float brake = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brake = this->_internal_brake();
  uint32_t raw_brake;
  memcpy(&raw_brake, &tmp_brake, sizeof(tmp_brake));
  if (raw_brake != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_brake(), target);
  }

  // uint32 clutch = 5;
  if (this->_internal_clutch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_clutch(), target);
  }

  // int32 gear = 6;
  if (this->_internal_gear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_gear(), target);
  }

  // uint32 engine_rpm = 7;
  if (this->_internal_engine_rpm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_engine_rpm(), target);
  }

  // uint32 drs = 8;
  if (this->_internal_drs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_drs(), target);
  }

  // uint32 rev_lights_percent = 9;
  if (this->_internal_rev_lights_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rev_lights_percent(), target);
  }

  // uint32 rev_lights_bit_value = 10;
  if (this->_internal_rev_lights_bit_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rev_lights_bit_value(), target);
  }

  // uint32 rear_left_brake_temperature = 11;
  if (this->_internal_rear_left_brake_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rear_left_brake_temperature(), target);
  }

  // uint32 rear_right_brake_temperature = 12;
  if (this->_internal_rear_right_brake_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rear_right_brake_temperature(), target);
  }

  // uint32 front_left_brake_temperature = 13;
  if (this->_internal_front_left_brake_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_front_left_brake_temperature(), target);
  }

  // uint32 front_right_brake_temperature = 14;
  if (this->_internal_front_right_brake_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_front_right_brake_temperature(), target);
  }

  // uint32 rear_left_tyre_surface_temperature = 15;
  if (this->_internal_rear_left_tyre_surface_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rear_left_tyre_surface_temperature(), target);
  }

  // uint32 rear_right_tyre_surface_temperature = 16;
  if (this->_internal_rear_right_tyre_surface_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_rear_right_tyre_surface_temperature(), target);
  }

  // uint32 front_left_tyre_surface_temperature = 17;
  if (this->_internal_front_left_tyre_surface_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_front_left_tyre_surface_temperature(), target);
  }

  // uint32 front_right_tyre_surface_temperature = 18;
  if (this->_internal_front_right_tyre_surface_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_front_right_tyre_surface_temperature(), target);
  }

  // uint32 rear_left_tyre_inner_temperature = 19;
  if (this->_internal_rear_left_tyre_inner_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_rear_left_tyre_inner_temperature(), target);
  }

  // uint32 rear_right_tyre_inner_temperature = 20;
  if (this->_internal_rear_right_tyre_inner_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_rear_right_tyre_inner_temperature(), target);
  }

  // uint32 front_left_tyre_inner_temperature = 21;
  if (this->_internal_front_left_tyre_inner_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_front_left_tyre_inner_temperature(), target);
  }

  // uint32 front_right_tyre_inner_temperature = 22;
  if (this->_internal_front_right_tyre_inner_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_front_right_tyre_inner_temperature(), target);
  }

  // uint32 engine_temperature = 23;
  if (this->_internal_engine_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_engine_temperature(), target);
  }

  // float rear_left_tyre_pressure = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_pressure = this->_internal_rear_left_tyre_pressure();
  uint32_t raw_rear_left_tyre_pressure;
  memcpy(&raw_rear_left_tyre_pressure, &tmp_rear_left_tyre_pressure, sizeof(tmp_rear_left_tyre_pressure));
  if (raw_rear_left_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_rear_left_tyre_pressure(), target);
  }

  // float rear_right_tyre_pressure = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_pressure = this->_internal_rear_right_tyre_pressure();
  uint32_t raw_rear_right_tyre_pressure;
  memcpy(&raw_rear_right_tyre_pressure, &tmp_rear_right_tyre_pressure, sizeof(tmp_rear_right_tyre_pressure));
  if (raw_rear_right_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_rear_right_tyre_pressure(), target);
  }

  // float front_left_tyre_pressure = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_pressure = this->_internal_front_left_tyre_pressure();
  uint32_t raw_front_left_tyre_pressure;
  memcpy(&raw_front_left_tyre_pressure, &tmp_front_left_tyre_pressure, sizeof(tmp_front_left_tyre_pressure));
  if (raw_front_left_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_front_left_tyre_pressure(), target);
  }

  // float front_right_tyre_pressure = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_pressure = this->_internal_front_right_tyre_pressure();
  uint32_t raw_front_right_tyre_pressure;
  memcpy(&raw_front_right_tyre_pressure, &tmp_front_right_tyre_pressure, sizeof(tmp_front_right_tyre_pressure));
  if (raw_front_right_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_front_right_tyre_pressure(), target);
  }

  // uint32 rear_left_surface_type = 28;
  if (this->_internal_rear_left_surface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_rear_left_surface_type(), target);
  }

  // uint32 rear_right_surface_type = 29;
  if (this->_internal_rear_right_surface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_rear_right_surface_type(), target);
  }

  // uint32 front_left_surface_type = 30;
  if (this->_internal_front_left_surface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_front_left_surface_type(), target);
  }

  // uint32 front_right_surface_type = 31;
  if (this->_internal_front_right_surface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_front_right_surface_type(), target);
  }

  // float lap_distance = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lap_distance = this->_internal_lap_distance();
  uint32_t raw_lap_distance;
  memcpy(&raw_lap_distance, &tmp_lap_distance, sizeof(tmp_lap_distance));
  if (raw_lap_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_lap_distance(), target);
  }

  // float fuel_in_tank = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_in_tank = this->_internal_fuel_in_tank();
  uint32_t raw_fuel_in_tank;
  memcpy(&raw_fuel_in_tank, &tmp_fuel_in_tank, sizeof(tmp_fuel_in_tank));
  if (raw_fuel_in_tank != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_fuel_in_tank(), target);
  }

  // uint32 tyres_age_laps = 34;
  if (this->_internal_tyres_age_laps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_tyres_age_laps(), target);
  }

  // float ers_store_energy = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_store_energy = this->_internal_ers_store_energy();
  uint32_t raw_ers_store_energy;
  memcpy(&raw_ers_store_energy, &tmp_ers_store_energy, sizeof(tmp_ers_store_energy));
  if (raw_ers_store_energy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_ers_store_energy(), target);
  }

  // uint32 ers_deploy_mode = 36;
  if (this->_internal_ers_deploy_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_ers_deploy_mode(), target);
  }

  // float ers_harvested_this_lap_mguk = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_harvested_this_lap_mguk = this->_internal_ers_harvested_this_lap_mguk();
  uint32_t raw_ers_harvested_this_lap_mguk;
  memcpy(&raw_ers_harvested_this_lap_mguk, &tmp_ers_harvested_this_lap_mguk, sizeof(tmp_ers_harvested_this_lap_mguk));
  if (raw_ers_harvested_this_lap_mguk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_ers_harvested_this_lap_mguk(), target);
  }

  // float ers_harvested_this_lap_mguh = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_harvested_this_lap_mguh = this->_internal_ers_harvested_this_lap_mguh();
  uint32_t raw_ers_harvested_this_lap_mguh;
  memcpy(&raw_ers_harvested_this_lap_mguh, &tmp_ers_harvested_this_lap_mguh, sizeof(tmp_ers_harvested_this_lap_mguh));
  if (raw_ers_harvested_this_lap_mguh != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_ers_harvested_this_lap_mguh(), target);
  }

  // float ers_deployed_this_lap = 39;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_deployed_this_lap = this->_internal_ers_deployed_this_lap();
  uint32_t raw_ers_deployed_this_lap;
  memcpy(&raw_ers_deployed_this_lap, &tmp_ers_deployed_this_lap, sizeof(tmp_ers_deployed_this_lap));
  if (raw_ers_deployed_this_lap != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(39, this->_internal_ers_deployed_this_lap(), target);
  }

  // float rear_left_tyre_wear = 40;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_wear = this->_internal_rear_left_tyre_wear();
  uint32_t raw_rear_left_tyre_wear;
  memcpy(&raw_rear_left_tyre_wear, &tmp_rear_left_tyre_wear, sizeof(tmp_rear_left_tyre_wear));
  if (raw_rear_left_tyre_wear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(40, this->_internal_rear_left_tyre_wear(), target);
  }

  // float rear_right_tyre_wear = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_wear = this->_internal_rear_right_tyre_wear();
  uint32_t raw_rear_right_tyre_wear;
  memcpy(&raw_rear_right_tyre_wear, &tmp_rear_right_tyre_wear, sizeof(tmp_rear_right_tyre_wear));
  if (raw_rear_right_tyre_wear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_rear_right_tyre_wear(), target);
  }

  // float front_left_tyre_wear = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_wear = this->_internal_front_left_tyre_wear();
  uint32_t raw_front_left_tyre_wear;
  memcpy(&raw_front_left_tyre_wear, &tmp_front_left_tyre_wear, sizeof(tmp_front_left_tyre_wear));
  if (raw_front_left_tyre_wear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_front_left_tyre_wear(), target);
  }

  // float front_right_tyre_wear = 43;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_wear = this->_internal_front_right_tyre_wear();
  uint32_t raw_front_right_tyre_wear;
  memcpy(&raw_front_right_tyre_wear, &tmp_front_right_tyre_wear, sizeof(tmp_front_right_tyre_wear));
  if (raw_front_right_tyre_wear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(43, this->_internal_front_right_tyre_wear(), target);
  }

  // uint32 rear_left_tyre_damage = 44;
  if (this->_internal_rear_left_tyre_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_rear_left_tyre_damage(), target);
  }

  // uint32 rear_right_tyre_damage = 45;
  if (this->_internal_rear_right_tyre_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_rear_right_tyre_damage(), target);
  }

  // uint32 front_left_tyre_damage = 46;
  if (this->_internal_front_left_tyre_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(46, this->_internal_front_left_tyre_damage(), target);
  }

  // uint32 front_right_tyre_damage = 47;
  if (this->_internal_front_right_tyre_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(47, this->_internal_front_right_tyre_damage(), target);
  }

  // uint32 gear_box_damage = 48;
  if (this->_internal_gear_box_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(48, this->_internal_gear_box_damage(), target);
  }

  // uint32 engine_damage = 49;
  if (this->_internal_engine_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_engine_damage(), target);
  }

  // uint32 engine_ce_wear = 50;
  if (this->_internal_engine_ce_wear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(50, this->_internal_engine_ce_wear(), target);
  }

  // uint32 engine_ice_wear = 51;
  if (this->_internal_engine_ice_wear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(51, this->_internal_engine_ice_wear(), target);
  }

  // uint32 engine_tc_wear = 52;
  if (this->_internal_engine_tc_wear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(52, this->_internal_engine_tc_wear(), target);
  }

  // uint32 engine_es_wear = 53;
  if (this->_internal_engine_es_wear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_engine_es_wear(), target);
  }

  // uint32 engine_mguh_wear = 54;
  if (this->_internal_engine_mguh_wear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(54, this->_internal_engine_mguh_wear(), target);
  }

  // uint32 engine_mguk_wear = 55;
  if (this->_internal_engine_mguk_wear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(55, this->_internal_engine_mguk_wear(), target);
  }

  // float rear_left_suspension_position = 56;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_suspension_position = this->_internal_rear_left_suspension_position();
  uint32_t raw_rear_left_suspension_position;
  memcpy(&raw_rear_left_suspension_position, &tmp_rear_left_suspension_position, sizeof(tmp_rear_left_suspension_position));
  if (raw_rear_left_suspension_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(56, this->_internal_rear_left_suspension_position(), target);
  }

  // float rear_right_suspension_position = 57;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_suspension_position = this->_internal_rear_right_suspension_position();
  uint32_t raw_rear_right_suspension_position;
  memcpy(&raw_rear_right_suspension_position, &tmp_rear_right_suspension_position, sizeof(tmp_rear_right_suspension_position));
  if (raw_rear_right_suspension_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(57, this->_internal_rear_right_suspension_position(), target);
  }

  // float front_left_suspension_position = 58;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_suspension_position = this->_internal_front_left_suspension_position();
  uint32_t raw_front_left_suspension_position;
  memcpy(&raw_front_left_suspension_position, &tmp_front_left_suspension_position, sizeof(tmp_front_left_suspension_position));
  if (raw_front_left_suspension_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(58, this->_internal_front_left_suspension_position(), target);
  }

  // float front_right_suspension_position = 59;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_suspension_position = this->_internal_front_right_suspension_position();
  uint32_t raw_front_right_suspension_position;
  memcpy(&raw_front_right_suspension_position, &tmp_front_right_suspension_position, sizeof(tmp_front_right_suspension_position));
  if (raw_front_right_suspension_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(59, this->_internal_front_right_suspension_position(), target);
  }

  // float rear_left_wheel_speed = 60;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_wheel_speed = this->_internal_rear_left_wheel_speed();
  uint32_t raw_rear_left_wheel_speed;
  memcpy(&raw_rear_left_wheel_speed, &tmp_rear_left_wheel_speed, sizeof(tmp_rear_left_wheel_speed));
  if (raw_rear_left_wheel_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(60, this->_internal_rear_left_wheel_speed(), target);
  }

  // float rear_right_wheel_speed = 61;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_wheel_speed = this->_internal_rear_right_wheel_speed();
  uint32_t raw_rear_right_wheel_speed;
  memcpy(&raw_rear_right_wheel_speed, &tmp_rear_right_wheel_speed, sizeof(tmp_rear_right_wheel_speed));
  if (raw_rear_right_wheel_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(61, this->_internal_rear_right_wheel_speed(), target);
  }

  // float front_left_wheel_speed = 62;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_wheel_speed = this->_internal_front_left_wheel_speed();
  uint32_t raw_front_left_wheel_speed;
  memcpy(&raw_front_left_wheel_speed, &tmp_front_left_wheel_speed, sizeof(tmp_front_left_wheel_speed));
  if (raw_front_left_wheel_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(62, this->_internal_front_left_wheel_speed(), target);
  }

  // float front_right_wheel_speed = 63;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_wheel_speed = this->_internal_front_right_wheel_speed();
  uint32_t raw_front_right_wheel_speed;
  memcpy(&raw_front_right_wheel_speed, &tmp_front_right_wheel_speed, sizeof(tmp_front_right_wheel_speed));
  if (raw_front_right_wheel_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(63, this->_internal_front_right_wheel_speed(), target);
  }

  // float rear_left_wheel_slip = 64;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_wheel_slip = this->_internal_rear_left_wheel_slip();
  uint32_t raw_rear_left_wheel_slip;
  memcpy(&raw_rear_left_wheel_slip, &tmp_rear_left_wheel_slip, sizeof(tmp_rear_left_wheel_slip));
  if (raw_rear_left_wheel_slip != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(64, this->_internal_rear_left_wheel_slip(), target);
  }

  // float rear_right_wheel_slip = 65;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_wheel_slip = this->_internal_rear_right_wheel_slip();
  uint32_t raw_rear_right_wheel_slip;
  memcpy(&raw_rear_right_wheel_slip, &tmp_rear_right_wheel_slip, sizeof(tmp_rear_right_wheel_slip));
  if (raw_rear_right_wheel_slip != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(65, this->_internal_rear_right_wheel_slip(), target);
  }

  // float front_left_wheel_slip = 66;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_wheel_slip = this->_internal_front_left_wheel_slip();
  uint32_t raw_front_left_wheel_slip;
  memcpy(&raw_front_left_wheel_slip, &tmp_front_left_wheel_slip, sizeof(tmp_front_left_wheel_slip));
  if (raw_front_left_wheel_slip != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(66, this->_internal_front_left_wheel_slip(), target);
  }

  // float front_right_wheel_slip = 67;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_wheel_slip = this->_internal_front_right_wheel_slip();
  uint32_t raw_front_right_wheel_slip;
  memcpy(&raw_front_right_wheel_slip, &tmp_front_right_wheel_slip, sizeof(tmp_front_right_wheel_slip));
  if (raw_front_right_wheel_slip != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(67, this->_internal_front_right_wheel_slip(), target);
  }

  // float world_position_x = 68;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_x = this->_internal_world_position_x();
  uint32_t raw_world_position_x;
  memcpy(&raw_world_position_x, &tmp_world_position_x, sizeof(tmp_world_position_x));
  if (raw_world_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(68, this->_internal_world_position_x(), target);
  }

  // float world_position_y = 69;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_y = this->_internal_world_position_y();
  uint32_t raw_world_position_y;
  memcpy(&raw_world_position_y, &tmp_world_position_y, sizeof(tmp_world_position_y));
  if (raw_world_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(69, this->_internal_world_position_y(), target);
  }

  // float world_position_z = 70;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_z = this->_internal_world_position_z();
  uint32_t raw_world_position_z;
  memcpy(&raw_world_position_z, &tmp_world_position_z, sizeof(tmp_world_position_z));
  if (raw_world_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(70, this->_internal_world_position_z(), target);
  }

  // float g_force_lateral = 71;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_lateral = this->_internal_g_force_lateral();
  uint32_t raw_g_force_lateral;
  memcpy(&raw_g_force_lateral, &tmp_g_force_lateral, sizeof(tmp_g_force_lateral));
  if (raw_g_force_lateral != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(71, this->_internal_g_force_lateral(), target);
  }

  // float g_force_longitudinal = 72;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_longitudinal = this->_internal_g_force_longitudinal();
  uint32_t raw_g_force_longitudinal;
  memcpy(&raw_g_force_longitudinal, &tmp_g_force_longitudinal, sizeof(tmp_g_force_longitudinal));
  if (raw_g_force_longitudinal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(72, this->_internal_g_force_longitudinal(), target);
  }

  // float g_force_vertical = 73;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_vertical = this->_internal_g_force_vertical();
  uint32_t raw_g_force_vertical;
  memcpy(&raw_g_force_vertical, &tmp_g_force_vertical, sizeof(tmp_g_force_vertical));
  if (raw_g_force_vertical != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(73, this->_internal_g_force_vertical(), target);
  }

  // float yaw = 74;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(74, this->_internal_yaw(), target);
  }

  // float pitch = 75;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(75, this->_internal_pitch(), target);
  }

  // float roll = 76;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(76, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Telemetry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 speed = 1;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // float throttle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_throttle = this->_internal_throttle();
  uint32_t raw_throttle;
  memcpy(&raw_throttle, &tmp_throttle, sizeof(tmp_throttle));
  if (raw_throttle != 0) {
    total_size += 1 + 4;
  }

  // float steer = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_steer = this->_internal_steer();
  uint32_t raw_steer;
  memcpy(&raw_steer, &tmp_steer, sizeof(tmp_steer));
  if (raw_steer != 0) {
    total_size += 1 + 4;
  }

  // float brake = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brake = this->_internal_brake();
  uint32_t raw_brake;
  memcpy(&raw_brake, &tmp_brake, sizeof(tmp_brake));
  if (raw_brake != 0) {
    total_size += 1 + 4;
  }

  // uint32 clutch = 5;
  if (this->_internal_clutch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clutch());
  }

  // int32 gear = 6;
  if (this->_internal_gear() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gear());
  }

  // uint32 engine_rpm = 7;
  if (this->_internal_engine_rpm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_engine_rpm());
  }

  // uint32 drs = 8;
  if (this->_internal_drs() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drs());
  }

  // uint32 rev_lights_percent = 9;
  if (this->_internal_rev_lights_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rev_lights_percent());
  }

  // uint32 rev_lights_bit_value = 10;
  if (this->_internal_rev_lights_bit_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rev_lights_bit_value());
  }

  // uint32 rear_left_brake_temperature = 11;
  if (this->_internal_rear_left_brake_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_left_brake_temperature());
  }

  // uint32 rear_right_brake_temperature = 12;
  if (this->_internal_rear_right_brake_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_right_brake_temperature());
  }

  // uint32 front_left_brake_temperature = 13;
  if (this->_internal_front_left_brake_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_left_brake_temperature());
  }

  // uint32 front_right_brake_temperature = 14;
  if (this->_internal_front_right_brake_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_right_brake_temperature());
  }

  // uint32 rear_left_tyre_surface_temperature = 15;
  if (this->_internal_rear_left_tyre_surface_temperature() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_left_tyre_surface_temperature());
  }

  // uint32 rear_right_tyre_surface_temperature = 16;
  if (this->_internal_rear_right_tyre_surface_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_right_tyre_surface_temperature());
  }

  // uint32 front_left_tyre_surface_temperature = 17;
  if (this->_internal_front_left_tyre_surface_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_left_tyre_surface_temperature());
  }

  // uint32 front_right_tyre_surface_temperature = 18;
  if (this->_internal_front_right_tyre_surface_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_right_tyre_surface_temperature());
  }

  // uint32 rear_left_tyre_inner_temperature = 19;
  if (this->_internal_rear_left_tyre_inner_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_left_tyre_inner_temperature());
  }

  // uint32 rear_right_tyre_inner_temperature = 20;
  if (this->_internal_rear_right_tyre_inner_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_right_tyre_inner_temperature());
  }

  // uint32 front_left_tyre_inner_temperature = 21;
  if (this->_internal_front_left_tyre_inner_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_left_tyre_inner_temperature());
  }

  // uint32 front_right_tyre_inner_temperature = 22;
  if (this->_internal_front_right_tyre_inner_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_right_tyre_inner_temperature());
  }

  // uint32 engine_temperature = 23;
  if (this->_internal_engine_temperature() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_temperature());
  }

  // float rear_left_tyre_pressure = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_pressure = this->_internal_rear_left_tyre_pressure();
  uint32_t raw_rear_left_tyre_pressure;
  memcpy(&raw_rear_left_tyre_pressure, &tmp_rear_left_tyre_pressure, sizeof(tmp_rear_left_tyre_pressure));
  if (raw_rear_left_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // float rear_right_tyre_pressure = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_pressure = this->_internal_rear_right_tyre_pressure();
  uint32_t raw_rear_right_tyre_pressure;
  memcpy(&raw_rear_right_tyre_pressure, &tmp_rear_right_tyre_pressure, sizeof(tmp_rear_right_tyre_pressure));
  if (raw_rear_right_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // float front_left_tyre_pressure = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_pressure = this->_internal_front_left_tyre_pressure();
  uint32_t raw_front_left_tyre_pressure;
  memcpy(&raw_front_left_tyre_pressure, &tmp_front_left_tyre_pressure, sizeof(tmp_front_left_tyre_pressure));
  if (raw_front_left_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // float front_right_tyre_pressure = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_pressure = this->_internal_front_right_tyre_pressure();
  uint32_t raw_front_right_tyre_pressure;
  memcpy(&raw_front_right_tyre_pressure, &tmp_front_right_tyre_pressure, sizeof(tmp_front_right_tyre_pressure));
  if (raw_front_right_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // uint32 rear_left_surface_type = 28;
  if (this->_internal_rear_left_surface_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_left_surface_type());
  }

  // uint32 rear_right_surface_type = 29;
  if (this->_internal_rear_right_surface_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_right_surface_type());
  }

  // uint32 front_left_surface_type = 30;
  if (this->_internal_front_left_surface_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_left_surface_type());
  }

  // uint32 front_right_surface_type = 31;
  if (this->_internal_front_right_surface_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_right_surface_type());
  }

  // float lap_distance = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lap_distance = this->_internal_lap_distance();
  uint32_t raw_lap_distance;
  memcpy(&raw_lap_distance, &tmp_lap_distance, sizeof(tmp_lap_distance));
  if (raw_lap_distance != 0) {
    total_size += 2 + 4;
  }

  // float fuel_in_tank = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_in_tank = this->_internal_fuel_in_tank();
  uint32_t raw_fuel_in_tank;
  memcpy(&raw_fuel_in_tank, &tmp_fuel_in_tank, sizeof(tmp_fuel_in_tank));
  if (raw_fuel_in_tank != 0) {
    total_size += 2 + 4;
  }

  // uint32 tyres_age_laps = 34;
  if (this->_internal_tyres_age_laps() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tyres_age_laps());
  }

  // float ers_store_energy = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_store_energy = this->_internal_ers_store_energy();
  uint32_t raw_ers_store_energy;
  memcpy(&raw_ers_store_energy, &tmp_ers_store_energy, sizeof(tmp_ers_store_energy));
  if (raw_ers_store_energy != 0) {
    total_size += 2 + 4;
  }

  // uint32 ers_deploy_mode = 36;
  if (this->_internal_ers_deploy_mode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ers_deploy_mode());
  }

  // float ers_harvested_this_lap_mguk = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_harvested_this_lap_mguk = this->_internal_ers_harvested_this_lap_mguk();
  uint32_t raw_ers_harvested_this_lap_mguk;
  memcpy(&raw_ers_harvested_this_lap_mguk, &tmp_ers_harvested_this_lap_mguk, sizeof(tmp_ers_harvested_this_lap_mguk));
  if (raw_ers_harvested_this_lap_mguk != 0) {
    total_size += 2 + 4;
  }

  // float ers_harvested_this_lap_mguh = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_harvested_this_lap_mguh = this->_internal_ers_harvested_this_lap_mguh();
  uint32_t raw_ers_harvested_this_lap_mguh;
  memcpy(&raw_ers_harvested_this_lap_mguh, &tmp_ers_harvested_this_lap_mguh, sizeof(tmp_ers_harvested_this_lap_mguh));
  if (raw_ers_harvested_this_lap_mguh != 0) {
    total_size += 2 + 4;
  }

  // float ers_deployed_this_lap = 39;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_deployed_this_lap = this->_internal_ers_deployed_this_lap();
  uint32_t raw_ers_deployed_this_lap;
  memcpy(&raw_ers_deployed_this_lap, &tmp_ers_deployed_this_lap, sizeof(tmp_ers_deployed_this_lap));
  if (raw_ers_deployed_this_lap != 0) {
    total_size += 2 + 4;
  }

  // float rear_left_tyre_wear = 40;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_wear = this->_internal_rear_left_tyre_wear();
  uint32_t raw_rear_left_tyre_wear;
  memcpy(&raw_rear_left_tyre_wear, &tmp_rear_left_tyre_wear, sizeof(tmp_rear_left_tyre_wear));
  if (raw_rear_left_tyre_wear != 0) {
    total_size += 2 + 4;
  }

  // float rear_right_tyre_wear = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_wear = this->_internal_rear_right_tyre_wear();
  uint32_t raw_rear_right_tyre_wear;
  memcpy(&raw_rear_right_tyre_wear, &tmp_rear_right_tyre_wear, sizeof(tmp_rear_right_tyre_wear));
  if (raw_rear_right_tyre_wear != 0) {
    total_size += 2 + 4;
  }

  // float front_left_tyre_wear = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_wear = this->_internal_front_left_tyre_wear();
  uint32_t raw_front_left_tyre_wear;
  memcpy(&raw_front_left_tyre_wear, &tmp_front_left_tyre_wear, sizeof(tmp_front_left_tyre_wear));
  if (raw_front_left_tyre_wear != 0) {
    total_size += 2 + 4;
  }

  // float front_right_tyre_wear = 43;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_wear = this->_internal_front_right_tyre_wear();
  uint32_t raw_front_right_tyre_wear;
  memcpy(&raw_front_right_tyre_wear, &tmp_front_right_tyre_wear, sizeof(tmp_front_right_tyre_wear));
  if (raw_front_right_tyre_wear != 0) {
    total_size += 2 + 4;
  }

  // uint32 rear_left_tyre_damage = 44;
  if (this->_internal_rear_left_tyre_damage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_left_tyre_damage());
  }

  // uint32 rear_right_tyre_damage = 45;
  if (this->_internal_rear_right_tyre_damage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_rear_right_tyre_damage());
  }

  // uint32 front_left_tyre_damage = 46;
  if (this->_internal_front_left_tyre_damage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_left_tyre_damage());
  }

  // uint32 front_right_tyre_damage = 47;
  if (this->_internal_front_right_tyre_damage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_front_right_tyre_damage());
  }

  // uint32 gear_box_damage = 48;
  if (this->_internal_gear_box_damage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_gear_box_damage());
  }

  // uint32 engine_damage = 49;
  if (this->_internal_engine_damage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_damage());
  }

  // uint32 engine_ce_wear = 50;
  if (this->_internal_engine_ce_wear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_ce_wear());
  }

  // uint32 engine_ice_wear = 51;
  if (this->_internal_engine_ice_wear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_ice_wear());
  }

  // uint32 engine_tc_wear = 52;
  if (this->_internal_engine_tc_wear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_tc_wear());
  }

  // uint32 engine_es_wear = 53;
  if (this->_internal_engine_es_wear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_es_wear());
  }

  // uint32 engine_mguh_wear = 54;
  if (this->_internal_engine_mguh_wear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_mguh_wear());
  }

  // uint32 engine_mguk_wear = 55;
  if (this->_internal_engine_mguk_wear() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_engine_mguk_wear());
  }

  // float rear_left_suspension_position = 56;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_suspension_position = this->_internal_rear_left_suspension_position();
  uint32_t raw_rear_left_suspension_position;
  memcpy(&raw_rear_left_suspension_position, &tmp_rear_left_suspension_position, sizeof(tmp_rear_left_suspension_position));
  if (raw_rear_left_suspension_position != 0) {
    total_size += 2 + 4;
  }

  // float rear_right_suspension_position = 57;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_suspension_position = this->_internal_rear_right_suspension_position();
  uint32_t raw_rear_right_suspension_position;
  memcpy(&raw_rear_right_suspension_position, &tmp_rear_right_suspension_position, sizeof(tmp_rear_right_suspension_position));
  if (raw_rear_right_suspension_position != 0) {
    total_size += 2 + 4;
  }

  // float front_left_suspension_position = 58;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_suspension_position = this->_internal_front_left_suspension_position();
  uint32_t raw_front_left_suspension_position;
  memcpy(&raw_front_left_suspension_position, &tmp_front_left_suspension_position, sizeof(tmp_front_left_suspension_position));
  if (raw_front_left_suspension_position != 0) {
    total_size += 2 + 4;
  }

  // float front_right_suspension_position = 59;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_suspension_position = this->_internal_front_right_suspension_position();
  uint32_t raw_front_right_suspension_position;
  memcpy(&raw_front_right_suspension_position, &tmp_front_right_suspension_position, sizeof(tmp_front_right_suspension_position));
  if (raw_front_right_suspension_position != 0) {
    total_size += 2 + 4;
  }

  // float rear_left_wheel_speed = 60;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_wheel_speed = this->_internal_rear_left_wheel_speed();
  uint32_t raw_rear_left_wheel_speed;
  memcpy(&raw_rear_left_wheel_speed, &tmp_rear_left_wheel_speed, sizeof(tmp_rear_left_wheel_speed));
  if (raw_rear_left_wheel_speed != 0) {
    total_size += 2 + 4;
  }

  // float rear_right_wheel_speed = 61;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_wheel_speed = this->_internal_rear_right_wheel_speed();
  uint32_t raw_rear_right_wheel_speed;
  memcpy(&raw_rear_right_wheel_speed, &tmp_rear_right_wheel_speed, sizeof(tmp_rear_right_wheel_speed));
  if (raw_rear_right_wheel_speed != 0) {
    total_size += 2 + 4;
  }

  // float front_left_wheel_speed = 62;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_wheel_speed = this->_internal_front_left_wheel_speed();
  uint32_t raw_front_left_wheel_speed;
  memcpy(&raw_front_left_wheel_speed, &tmp_front_left_wheel_speed, sizeof(tmp_front_left_wheel_speed));
  if (raw_front_left_wheel_speed != 0) {
    total_size += 2 + 4;
  }

  // float front_right_wheel_speed = 63;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_wheel_speed = this->_internal_front_right_wheel_speed();
  uint32_t raw_front_right_wheel_speed;
  memcpy(&raw_front_right_wheel_speed, &tmp_front_right_wheel_speed, sizeof(tmp_front_right_wheel_speed));
  if (raw_front_right_wheel_speed != 0) {
    total_size += 2 + 4;
  }

  // float rear_left_wheel_slip = 64;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_wheel_slip = this->_internal_rear_left_wheel_slip();
  uint32_t raw_rear_left_wheel_slip;
  memcpy(&raw_rear_left_wheel_slip, &tmp_rear_left_wheel_slip, sizeof(tmp_rear_left_wheel_slip));
  if (raw_rear_left_wheel_slip != 0) {
    total_size += 2 + 4;
  }

  // float rear_right_wheel_slip = 65;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_wheel_slip = this->_internal_rear_right_wheel_slip();
  uint32_t raw_rear_right_wheel_slip;
  memcpy(&raw_rear_right_wheel_slip, &tmp_rear_right_wheel_slip, sizeof(tmp_rear_right_wheel_slip));
  if (raw_rear_right_wheel_slip != 0) {
    total_size += 2 + 4;
  }

  // float front_left_wheel_slip = 66;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_wheel_slip = this->_internal_front_left_wheel_slip();
  uint32_t raw_front_left_wheel_slip;
  memcpy(&raw_front_left_wheel_slip, &tmp_front_left_wheel_slip, sizeof(tmp_front_left_wheel_slip));
  if (raw_front_left_wheel_slip != 0) {
    total_size += 2 + 4;
  }

  // float front_right_wheel_slip = 67;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_wheel_slip = this->_internal_front_right_wheel_slip();
  uint32_t raw_front_right_wheel_slip;
  memcpy(&raw_front_right_wheel_slip, &tmp_front_right_wheel_slip, sizeof(tmp_front_right_wheel_slip));
  if (raw_front_right_wheel_slip != 0) {
    total_size += 2 + 4;
  }

  // float world_position_x = 68;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_x = this->_internal_world_position_x();
  uint32_t raw_world_position_x;
  memcpy(&raw_world_position_x, &tmp_world_position_x, sizeof(tmp_world_position_x));
  if (raw_world_position_x != 0) {
    total_size += 2 + 4;
  }

  // float world_position_y = 69;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_y = this->_internal_world_position_y();
  uint32_t raw_world_position_y;
  memcpy(&raw_world_position_y, &tmp_world_position_y, sizeof(tmp_world_position_y));
  if (raw_world_position_y != 0) {
    total_size += 2 + 4;
  }

  // float world_position_z = 70;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_z = this->_internal_world_position_z();
  uint32_t raw_world_position_z;
  memcpy(&raw_world_position_z, &tmp_world_position_z, sizeof(tmp_world_position_z));
  if (raw_world_position_z != 0) {
    total_size += 2 + 4;
  }

  // float g_force_lateral = 71;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_lateral = this->_internal_g_force_lateral();
  uint32_t raw_g_force_lateral;
  memcpy(&raw_g_force_lateral, &tmp_g_force_lateral, sizeof(tmp_g_force_lateral));
  if (raw_g_force_lateral != 0) {
    total_size += 2 + 4;
  }

  // float g_force_longitudinal = 72;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_longitudinal = this->_internal_g_force_longitudinal();
  uint32_t raw_g_force_longitudinal;
  memcpy(&raw_g_force_longitudinal, &tmp_g_force_longitudinal, sizeof(tmp_g_force_longitudinal));
  if (raw_g_force_longitudinal != 0) {
    total_size += 2 + 4;
  }

  // float g_force_vertical = 73;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_vertical = this->_internal_g_force_vertical();
  uint32_t raw_g_force_vertical;
  memcpy(&raw_g_force_vertical, &tmp_g_force_vertical, sizeof(tmp_g_force_vertical));
  if (raw_g_force_vertical != 0) {
    total_size += 2 + 4;
  }

  // float yaw = 74;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 2 + 4;
  }

  // float pitch = 75;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 2 + 4;
  }

  // float roll = 76;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Telemetry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Telemetry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Telemetry::GetClassData() const { return &_class_data_; }


void Telemetry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Telemetry*>(&to_msg);
  auto& from = static_cast<const Telemetry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Telemetry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_throttle = from._internal_throttle();
  uint32_t raw_throttle;
  memcpy(&raw_throttle, &tmp_throttle, sizeof(tmp_throttle));
  if (raw_throttle != 0) {
    _this->_internal_set_throttle(from._internal_throttle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_steer = from._internal_steer();
  uint32_t raw_steer;
  memcpy(&raw_steer, &tmp_steer, sizeof(tmp_steer));
  if (raw_steer != 0) {
    _this->_internal_set_steer(from._internal_steer());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brake = from._internal_brake();
  uint32_t raw_brake;
  memcpy(&raw_brake, &tmp_brake, sizeof(tmp_brake));
  if (raw_brake != 0) {
    _this->_internal_set_brake(from._internal_brake());
  }
  if (from._internal_clutch() != 0) {
    _this->_internal_set_clutch(from._internal_clutch());
  }
  if (from._internal_gear() != 0) {
    _this->_internal_set_gear(from._internal_gear());
  }
  if (from._internal_engine_rpm() != 0) {
    _this->_internal_set_engine_rpm(from._internal_engine_rpm());
  }
  if (from._internal_drs() != 0) {
    _this->_internal_set_drs(from._internal_drs());
  }
  if (from._internal_rev_lights_percent() != 0) {
    _this->_internal_set_rev_lights_percent(from._internal_rev_lights_percent());
  }
  if (from._internal_rev_lights_bit_value() != 0) {
    _this->_internal_set_rev_lights_bit_value(from._internal_rev_lights_bit_value());
  }
  if (from._internal_rear_left_brake_temperature() != 0) {
    _this->_internal_set_rear_left_brake_temperature(from._internal_rear_left_brake_temperature());
  }
  if (from._internal_rear_right_brake_temperature() != 0) {
    _this->_internal_set_rear_right_brake_temperature(from._internal_rear_right_brake_temperature());
  }
  if (from._internal_front_left_brake_temperature() != 0) {
    _this->_internal_set_front_left_brake_temperature(from._internal_front_left_brake_temperature());
  }
  if (from._internal_front_right_brake_temperature() != 0) {
    _this->_internal_set_front_right_brake_temperature(from._internal_front_right_brake_temperature());
  }
  if (from._internal_rear_left_tyre_surface_temperature() != 0) {
    _this->_internal_set_rear_left_tyre_surface_temperature(from._internal_rear_left_tyre_surface_temperature());
  }
  if (from._internal_rear_right_tyre_surface_temperature() != 0) {
    _this->_internal_set_rear_right_tyre_surface_temperature(from._internal_rear_right_tyre_surface_temperature());
  }
  if (from._internal_front_left_tyre_surface_temperature() != 0) {
    _this->_internal_set_front_left_tyre_surface_temperature(from._internal_front_left_tyre_surface_temperature());
  }
  if (from._internal_front_right_tyre_surface_temperature() != 0) {
    _this->_internal_set_front_right_tyre_surface_temperature(from._internal_front_right_tyre_surface_temperature());
  }
  if (from._internal_rear_left_tyre_inner_temperature() != 0) {
    _this->_internal_set_rear_left_tyre_inner_temperature(from._internal_rear_left_tyre_inner_temperature());
  }
  if (from._internal_rear_right_tyre_inner_temperature() != 0) {
    _this->_internal_set_rear_right_tyre_inner_temperature(from._internal_rear_right_tyre_inner_temperature());
  }
  if (from._internal_front_left_tyre_inner_temperature() != 0) {
    _this->_internal_set_front_left_tyre_inner_temperature(from._internal_front_left_tyre_inner_temperature());
  }
  if (from._internal_front_right_tyre_inner_temperature() != 0) {
    _this->_internal_set_front_right_tyre_inner_temperature(from._internal_front_right_tyre_inner_temperature());
  }
  if (from._internal_engine_temperature() != 0) {
    _this->_internal_set_engine_temperature(from._internal_engine_temperature());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_pressure = from._internal_rear_left_tyre_pressure();
  uint32_t raw_rear_left_tyre_pressure;
  memcpy(&raw_rear_left_tyre_pressure, &tmp_rear_left_tyre_pressure, sizeof(tmp_rear_left_tyre_pressure));
  if (raw_rear_left_tyre_pressure != 0) {
    _this->_internal_set_rear_left_tyre_pressure(from._internal_rear_left_tyre_pressure());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_pressure = from._internal_rear_right_tyre_pressure();
  uint32_t raw_rear_right_tyre_pressure;
  memcpy(&raw_rear_right_tyre_pressure, &tmp_rear_right_tyre_pressure, sizeof(tmp_rear_right_tyre_pressure));
  if (raw_rear_right_tyre_pressure != 0) {
    _this->_internal_set_rear_right_tyre_pressure(from._internal_rear_right_tyre_pressure());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_pressure = from._internal_front_left_tyre_pressure();
  uint32_t raw_front_left_tyre_pressure;
  memcpy(&raw_front_left_tyre_pressure, &tmp_front_left_tyre_pressure, sizeof(tmp_front_left_tyre_pressure));
  if (raw_front_left_tyre_pressure != 0) {
    _this->_internal_set_front_left_tyre_pressure(from._internal_front_left_tyre_pressure());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_pressure = from._internal_front_right_tyre_pressure();
  uint32_t raw_front_right_tyre_pressure;
  memcpy(&raw_front_right_tyre_pressure, &tmp_front_right_tyre_pressure, sizeof(tmp_front_right_tyre_pressure));
  if (raw_front_right_tyre_pressure != 0) {
    _this->_internal_set_front_right_tyre_pressure(from._internal_front_right_tyre_pressure());
  }
  if (from._internal_rear_left_surface_type() != 0) {
    _this->_internal_set_rear_left_surface_type(from._internal_rear_left_surface_type());
  }
  if (from._internal_rear_right_surface_type() != 0) {
    _this->_internal_set_rear_right_surface_type(from._internal_rear_right_surface_type());
  }
  if (from._internal_front_left_surface_type() != 0) {
    _this->_internal_set_front_left_surface_type(from._internal_front_left_surface_type());
  }
  if (from._internal_front_right_surface_type() != 0) {
    _this->_internal_set_front_right_surface_type(from._internal_front_right_surface_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lap_distance = from._internal_lap_distance();
  uint32_t raw_lap_distance;
  memcpy(&raw_lap_distance, &tmp_lap_distance, sizeof(tmp_lap_distance));
  if (raw_lap_distance != 0) {
    _this->_internal_set_lap_distance(from._internal_lap_distance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_in_tank = from._internal_fuel_in_tank();
  uint32_t raw_fuel_in_tank;
  memcpy(&raw_fuel_in_tank, &tmp_fuel_in_tank, sizeof(tmp_fuel_in_tank));
  if (raw_fuel_in_tank != 0) {
    _this->_internal_set_fuel_in_tank(from._internal_fuel_in_tank());
  }
  if (from._internal_tyres_age_laps() != 0) {
    _this->_internal_set_tyres_age_laps(from._internal_tyres_age_laps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_store_energy = from._internal_ers_store_energy();
  uint32_t raw_ers_store_energy;
  memcpy(&raw_ers_store_energy, &tmp_ers_store_energy, sizeof(tmp_ers_store_energy));
  if (raw_ers_store_energy != 0) {
    _this->_internal_set_ers_store_energy(from._internal_ers_store_energy());
  }
  if (from._internal_ers_deploy_mode() != 0) {
    _this->_internal_set_ers_deploy_mode(from._internal_ers_deploy_mode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_harvested_this_lap_mguk = from._internal_ers_harvested_this_lap_mguk();
  uint32_t raw_ers_harvested_this_lap_mguk;
  memcpy(&raw_ers_harvested_this_lap_mguk, &tmp_ers_harvested_this_lap_mguk, sizeof(tmp_ers_harvested_this_lap_mguk));
  if (raw_ers_harvested_this_lap_mguk != 0) {
    _this->_internal_set_ers_harvested_this_lap_mguk(from._internal_ers_harvested_this_lap_mguk());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_harvested_this_lap_mguh = from._internal_ers_harvested_this_lap_mguh();
  uint32_t raw_ers_harvested_this_lap_mguh;
  memcpy(&raw_ers_harvested_this_lap_mguh, &tmp_ers_harvested_this_lap_mguh, sizeof(tmp_ers_harvested_this_lap_mguh));
  if (raw_ers_harvested_this_lap_mguh != 0) {
    _this->_internal_set_ers_harvested_this_lap_mguh(from._internal_ers_harvested_this_lap_mguh());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ers_deployed_this_lap = from._internal_ers_deployed_this_lap();
  uint32_t raw_ers_deployed_this_lap;
  memcpy(&raw_ers_deployed_this_lap, &tmp_ers_deployed_this_lap, sizeof(tmp_ers_deployed_this_lap));
  if (raw_ers_deployed_this_lap != 0) {
    _this->_internal_set_ers_deployed_this_lap(from._internal_ers_deployed_this_lap());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_wear = from._internal_rear_left_tyre_wear();
  uint32_t raw_rear_left_tyre_wear;
  memcpy(&raw_rear_left_tyre_wear, &tmp_rear_left_tyre_wear, sizeof(tmp_rear_left_tyre_wear));
  if (raw_rear_left_tyre_wear != 0) {
    _this->_internal_set_rear_left_tyre_wear(from._internal_rear_left_tyre_wear());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_wear = from._internal_rear_right_tyre_wear();
  uint32_t raw_rear_right_tyre_wear;
  memcpy(&raw_rear_right_tyre_wear, &tmp_rear_right_tyre_wear, sizeof(tmp_rear_right_tyre_wear));
  if (raw_rear_right_tyre_wear != 0) {
    _this->_internal_set_rear_right_tyre_wear(from._internal_rear_right_tyre_wear());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_wear = from._internal_front_left_tyre_wear();
  uint32_t raw_front_left_tyre_wear;
  memcpy(&raw_front_left_tyre_wear, &tmp_front_left_tyre_wear, sizeof(tmp_front_left_tyre_wear));
  if (raw_front_left_tyre_wear != 0) {
    _this->_internal_set_front_left_tyre_wear(from._internal_front_left_tyre_wear());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_wear = from._internal_front_right_tyre_wear();
  uint32_t raw_front_right_tyre_wear;
  memcpy(&raw_front_right_tyre_wear, &tmp_front_right_tyre_wear, sizeof(tmp_front_right_tyre_wear));
  if (raw_front_right_tyre_wear != 0) {
    _this->_internal_set_front_right_tyre_wear(from._internal_front_right_tyre_wear());
  }
  if (from._internal_rear_left_tyre_damage() != 0) {
    _this->_internal_set_rear_left_tyre_damage(from._internal_rear_left_tyre_damage());
  }
  if (from._internal_rear_right_tyre_damage() != 0) {
    _this->_internal_set_rear_right_tyre_damage(from._internal_rear_right_tyre_damage());
  }
  if (from._internal_front_left_tyre_damage() != 0) {
    _this->_internal_set_front_left_tyre_damage(from._internal_front_left_tyre_damage());
  }
  if (from._internal_front_right_tyre_damage() != 0) {
    _this->_internal_set_front_right_tyre_damage(from._internal_front_right_tyre_damage());
  }
  if (from._internal_gear_box_damage() != 0) {
    _this->_internal_set_gear_box_damage(from._internal_gear_box_damage());
  }
  if (from._internal_engine_damage() != 0) {
    _this->_internal_set_engine_damage(from._internal_engine_damage());
  }
  if (from._internal_engine_ce_wear() != 0) {
    _this->_internal_set_engine_ce_wear(from._internal_engine_ce_wear());
  }
  if (from._internal_engine_ice_wear() != 0) {
    _this->_internal_set_engine_ice_wear(from._internal_engine_ice_wear());
  }
  if (from._internal_engine_tc_wear() != 0) {
    _this->_internal_set_engine_tc_wear(from._internal_engine_tc_wear());
  }
  if (from._internal_engine_es_wear() != 0) {
    _this->_internal_set_engine_es_wear(from._internal_engine_es_wear());
  }
  if (from._internal_engine_mguh_wear() != 0) {
    _this->_internal_set_engine_mguh_wear(from._internal_engine_mguh_wear());
  }
  if (from._internal_engine_mguk_wear() != 0) {
    _this->_internal_set_engine_mguk_wear(from._internal_engine_mguk_wear());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_suspension_position = from._internal_rear_left_suspension_position();
  uint32_t raw_rear_left_suspension_position;
  memcpy(&raw_rear_left_suspension_position, &tmp_rear_left_suspension_position, sizeof(tmp_rear_left_suspension_position));
  if (raw_rear_left_suspension_position != 0) {
    _this->_internal_set_rear_left_suspension_position(from._internal_rear_left_suspension_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_suspension_position = from._internal_rear_right_suspension_position();
  uint32_t raw_rear_right_suspension_position;
  memcpy(&raw_rear_right_suspension_position, &tmp_rear_right_suspension_position, sizeof(tmp_rear_right_suspension_position));
  if (raw_rear_right_suspension_position != 0) {
    _this->_internal_set_rear_right_suspension_position(from._internal_rear_right_suspension_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_suspension_position = from._internal_front_left_suspension_position();
  uint32_t raw_front_left_suspension_position;
  memcpy(&raw_front_left_suspension_position, &tmp_front_left_suspension_position, sizeof(tmp_front_left_suspension_position));
  if (raw_front_left_suspension_position != 0) {
    _this->_internal_set_front_left_suspension_position(from._internal_front_left_suspension_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_suspension_position = from._internal_front_right_suspension_position();
  uint32_t raw_front_right_suspension_position;
  memcpy(&raw_front_right_suspension_position, &tmp_front_right_suspension_position, sizeof(tmp_front_right_suspension_position));
  if (raw_front_right_suspension_position != 0) {
    _this->_internal_set_front_right_suspension_position(from._internal_front_right_suspension_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_wheel_speed = from._internal_rear_left_wheel_speed();
  uint32_t raw_rear_left_wheel_speed;
  memcpy(&raw_rear_left_wheel_speed, &tmp_rear_left_wheel_speed, sizeof(tmp_rear_left_wheel_speed));
  if (raw_rear_left_wheel_speed != 0) {
    _this->_internal_set_rear_left_wheel_speed(from._internal_rear_left_wheel_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_wheel_speed = from._internal_rear_right_wheel_speed();
  uint32_t raw_rear_right_wheel_speed;
  memcpy(&raw_rear_right_wheel_speed, &tmp_rear_right_wheel_speed, sizeof(tmp_rear_right_wheel_speed));
  if (raw_rear_right_wheel_speed != 0) {
    _this->_internal_set_rear_right_wheel_speed(from._internal_rear_right_wheel_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_wheel_speed = from._internal_front_left_wheel_speed();
  uint32_t raw_front_left_wheel_speed;
  memcpy(&raw_front_left_wheel_speed, &tmp_front_left_wheel_speed, sizeof(tmp_front_left_wheel_speed));
  if (raw_front_left_wheel_speed != 0) {
    _this->_internal_set_front_left_wheel_speed(from._internal_front_left_wheel_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_wheel_speed = from._internal_front_right_wheel_speed();
  uint32_t raw_front_right_wheel_speed;
  memcpy(&raw_front_right_wheel_speed, &tmp_front_right_wheel_speed, sizeof(tmp_front_right_wheel_speed));
  if (raw_front_right_wheel_speed != 0) {
    _this->_internal_set_front_right_wheel_speed(from._internal_front_right_wheel_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_wheel_slip = from._internal_rear_left_wheel_slip();
  uint32_t raw_rear_left_wheel_slip;
  memcpy(&raw_rear_left_wheel_slip, &tmp_rear_left_wheel_slip, sizeof(tmp_rear_left_wheel_slip));
  if (raw_rear_left_wheel_slip != 0) {
    _this->_internal_set_rear_left_wheel_slip(from._internal_rear_left_wheel_slip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_wheel_slip = from._internal_rear_right_wheel_slip();
  uint32_t raw_rear_right_wheel_slip;
  memcpy(&raw_rear_right_wheel_slip, &tmp_rear_right_wheel_slip, sizeof(tmp_rear_right_wheel_slip));
  if (raw_rear_right_wheel_slip != 0) {
    _this->_internal_set_rear_right_wheel_slip(from._internal_rear_right_wheel_slip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_wheel_slip = from._internal_front_left_wheel_slip();
  uint32_t raw_front_left_wheel_slip;
  memcpy(&raw_front_left_wheel_slip, &tmp_front_left_wheel_slip, sizeof(tmp_front_left_wheel_slip));
  if (raw_front_left_wheel_slip != 0) {
    _this->_internal_set_front_left_wheel_slip(from._internal_front_left_wheel_slip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_wheel_slip = from._internal_front_right_wheel_slip();
  uint32_t raw_front_right_wheel_slip;
  memcpy(&raw_front_right_wheel_slip, &tmp_front_right_wheel_slip, sizeof(tmp_front_right_wheel_slip));
  if (raw_front_right_wheel_slip != 0) {
    _this->_internal_set_front_right_wheel_slip(from._internal_front_right_wheel_slip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_x = from._internal_world_position_x();
  uint32_t raw_world_position_x;
  memcpy(&raw_world_position_x, &tmp_world_position_x, sizeof(tmp_world_position_x));
  if (raw_world_position_x != 0) {
    _this->_internal_set_world_position_x(from._internal_world_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_y = from._internal_world_position_y();
  uint32_t raw_world_position_y;
  memcpy(&raw_world_position_y, &tmp_world_position_y, sizeof(tmp_world_position_y));
  if (raw_world_position_y != 0) {
    _this->_internal_set_world_position_y(from._internal_world_position_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_position_z = from._internal_world_position_z();
  uint32_t raw_world_position_z;
  memcpy(&raw_world_position_z, &tmp_world_position_z, sizeof(tmp_world_position_z));
  if (raw_world_position_z != 0) {
    _this->_internal_set_world_position_z(from._internal_world_position_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_lateral = from._internal_g_force_lateral();
  uint32_t raw_g_force_lateral;
  memcpy(&raw_g_force_lateral, &tmp_g_force_lateral, sizeof(tmp_g_force_lateral));
  if (raw_g_force_lateral != 0) {
    _this->_internal_set_g_force_lateral(from._internal_g_force_lateral());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_longitudinal = from._internal_g_force_longitudinal();
  uint32_t raw_g_force_longitudinal;
  memcpy(&raw_g_force_longitudinal, &tmp_g_force_longitudinal, sizeof(tmp_g_force_longitudinal));
  if (raw_g_force_longitudinal != 0) {
    _this->_internal_set_g_force_longitudinal(from._internal_g_force_longitudinal());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g_force_vertical = from._internal_g_force_vertical();
  uint32_t raw_g_force_vertical;
  memcpy(&raw_g_force_vertical, &tmp_g_force_vertical, sizeof(tmp_g_force_vertical));
  if (raw_g_force_vertical != 0) {
    _this->_internal_set_g_force_vertical(from._internal_g_force_vertical());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.roll_)
      + sizeof(Telemetry::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Telemetry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Telemetry_2eproto_getter, &descriptor_table_Telemetry_2eproto_once,
      file_level_metadata_Telemetry_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Telemetry*
Arena::CreateMaybeMessage< ::Telemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Telemetry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
