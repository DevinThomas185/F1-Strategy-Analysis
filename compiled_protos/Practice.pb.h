// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Practice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Practice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Practice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Stint.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Practice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Practice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Practice_2eproto;
class Practice;
struct PracticeDefaultTypeInternal;
extern PracticeDefaultTypeInternal _Practice_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Practice* Arena::CreateMaybeMessage<::Practice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Practice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Practice) */ {
 public:
  inline Practice() : Practice(nullptr) {}
  ~Practice() override;
  explicit PROTOBUF_CONSTEXPR Practice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Practice(const Practice& from);
  Practice(Practice&& from) noexcept
    : Practice() {
    *this = ::std::move(from);
  }

  inline Practice& operator=(const Practice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Practice& operator=(Practice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Practice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Practice* internal_default_instance() {
    return reinterpret_cast<const Practice*>(
               &_Practice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Practice& a, Practice& b) {
    a.Swap(&b);
  }
  inline void Swap(Practice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Practice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Practice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Practice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Practice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Practice& from) {
    Practice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Practice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Practice";
  }
  protected:
  explicit Practice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutLapsFieldNumber = 1,
    kInstallationLapsFieldNumber = 2,
    kAeroMappingFieldNumber = 3,
    kPerformanceRunsFieldNumber = 4,
    kLongRunsFieldNumber = 5,
    kRaceSimulationFieldNumber = 6,
    kQualifyingSimulationFieldNumber = 7,
    kPracticeStartsFieldNumber = 8,
  };
  // repeated .Stint out_laps = 1;
  int out_laps_size() const;
  private:
  int _internal_out_laps_size() const;
  public:
  void clear_out_laps();
  ::Stint* mutable_out_laps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_out_laps();
  private:
  const ::Stint& _internal_out_laps(int index) const;
  ::Stint* _internal_add_out_laps();
  public:
  const ::Stint& out_laps(int index) const;
  ::Stint* add_out_laps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      out_laps() const;

  // repeated .Stint installation_laps = 2;
  int installation_laps_size() const;
  private:
  int _internal_installation_laps_size() const;
  public:
  void clear_installation_laps();
  ::Stint* mutable_installation_laps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_installation_laps();
  private:
  const ::Stint& _internal_installation_laps(int index) const;
  ::Stint* _internal_add_installation_laps();
  public:
  const ::Stint& installation_laps(int index) const;
  ::Stint* add_installation_laps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      installation_laps() const;

  // repeated .Stint aero_mapping = 3;
  int aero_mapping_size() const;
  private:
  int _internal_aero_mapping_size() const;
  public:
  void clear_aero_mapping();
  ::Stint* mutable_aero_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_aero_mapping();
  private:
  const ::Stint& _internal_aero_mapping(int index) const;
  ::Stint* _internal_add_aero_mapping();
  public:
  const ::Stint& aero_mapping(int index) const;
  ::Stint* add_aero_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      aero_mapping() const;

  // repeated .Stint performance_runs = 4;
  int performance_runs_size() const;
  private:
  int _internal_performance_runs_size() const;
  public:
  void clear_performance_runs();
  ::Stint* mutable_performance_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_performance_runs();
  private:
  const ::Stint& _internal_performance_runs(int index) const;
  ::Stint* _internal_add_performance_runs();
  public:
  const ::Stint& performance_runs(int index) const;
  ::Stint* add_performance_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      performance_runs() const;

  // repeated .Stint long_runs = 5;
  int long_runs_size() const;
  private:
  int _internal_long_runs_size() const;
  public:
  void clear_long_runs();
  ::Stint* mutable_long_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_long_runs();
  private:
  const ::Stint& _internal_long_runs(int index) const;
  ::Stint* _internal_add_long_runs();
  public:
  const ::Stint& long_runs(int index) const;
  ::Stint* add_long_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      long_runs() const;

  // repeated .Stint race_simulation = 6;
  int race_simulation_size() const;
  private:
  int _internal_race_simulation_size() const;
  public:
  void clear_race_simulation();
  ::Stint* mutable_race_simulation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_race_simulation();
  private:
  const ::Stint& _internal_race_simulation(int index) const;
  ::Stint* _internal_add_race_simulation();
  public:
  const ::Stint& race_simulation(int index) const;
  ::Stint* add_race_simulation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      race_simulation() const;

  // repeated .Stint qualifying_simulation = 7;
  int qualifying_simulation_size() const;
  private:
  int _internal_qualifying_simulation_size() const;
  public:
  void clear_qualifying_simulation();
  ::Stint* mutable_qualifying_simulation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_qualifying_simulation();
  private:
  const ::Stint& _internal_qualifying_simulation(int index) const;
  ::Stint* _internal_add_qualifying_simulation();
  public:
  const ::Stint& qualifying_simulation(int index) const;
  ::Stint* add_qualifying_simulation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      qualifying_simulation() const;

  // repeated .Stint practice_starts = 8;
  int practice_starts_size() const;
  private:
  int _internal_practice_starts_size() const;
  public:
  void clear_practice_starts();
  ::Stint* mutable_practice_starts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
      mutable_practice_starts();
  private:
  const ::Stint& _internal_practice_starts(int index) const;
  ::Stint* _internal_add_practice_starts();
  public:
  const ::Stint& practice_starts(int index) const;
  ::Stint* add_practice_starts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
      practice_starts() const;

  // @@protoc_insertion_point(class_scope:Practice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > out_laps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > installation_laps_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > aero_mapping_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > performance_runs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > long_runs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > race_simulation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > qualifying_simulation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint > practice_starts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Practice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Practice

// repeated .Stint out_laps = 1;
inline int Practice::_internal_out_laps_size() const {
  return _impl_.out_laps_.size();
}
inline int Practice::out_laps_size() const {
  return _internal_out_laps_size();
}
inline ::Stint* Practice::mutable_out_laps(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.out_laps)
  return _impl_.out_laps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_out_laps() {
  // @@protoc_insertion_point(field_mutable_list:Practice.out_laps)
  return &_impl_.out_laps_;
}
inline const ::Stint& Practice::_internal_out_laps(int index) const {
  return _impl_.out_laps_.Get(index);
}
inline const ::Stint& Practice::out_laps(int index) const {
  // @@protoc_insertion_point(field_get:Practice.out_laps)
  return _internal_out_laps(index);
}
inline ::Stint* Practice::_internal_add_out_laps() {
  return _impl_.out_laps_.Add();
}
inline ::Stint* Practice::add_out_laps() {
  ::Stint* _add = _internal_add_out_laps();
  // @@protoc_insertion_point(field_add:Practice.out_laps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::out_laps() const {
  // @@protoc_insertion_point(field_list:Practice.out_laps)
  return _impl_.out_laps_;
}

// repeated .Stint installation_laps = 2;
inline int Practice::_internal_installation_laps_size() const {
  return _impl_.installation_laps_.size();
}
inline int Practice::installation_laps_size() const {
  return _internal_installation_laps_size();
}
inline ::Stint* Practice::mutable_installation_laps(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.installation_laps)
  return _impl_.installation_laps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_installation_laps() {
  // @@protoc_insertion_point(field_mutable_list:Practice.installation_laps)
  return &_impl_.installation_laps_;
}
inline const ::Stint& Practice::_internal_installation_laps(int index) const {
  return _impl_.installation_laps_.Get(index);
}
inline const ::Stint& Practice::installation_laps(int index) const {
  // @@protoc_insertion_point(field_get:Practice.installation_laps)
  return _internal_installation_laps(index);
}
inline ::Stint* Practice::_internal_add_installation_laps() {
  return _impl_.installation_laps_.Add();
}
inline ::Stint* Practice::add_installation_laps() {
  ::Stint* _add = _internal_add_installation_laps();
  // @@protoc_insertion_point(field_add:Practice.installation_laps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::installation_laps() const {
  // @@protoc_insertion_point(field_list:Practice.installation_laps)
  return _impl_.installation_laps_;
}

// repeated .Stint aero_mapping = 3;
inline int Practice::_internal_aero_mapping_size() const {
  return _impl_.aero_mapping_.size();
}
inline int Practice::aero_mapping_size() const {
  return _internal_aero_mapping_size();
}
inline ::Stint* Practice::mutable_aero_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.aero_mapping)
  return _impl_.aero_mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_aero_mapping() {
  // @@protoc_insertion_point(field_mutable_list:Practice.aero_mapping)
  return &_impl_.aero_mapping_;
}
inline const ::Stint& Practice::_internal_aero_mapping(int index) const {
  return _impl_.aero_mapping_.Get(index);
}
inline const ::Stint& Practice::aero_mapping(int index) const {
  // @@protoc_insertion_point(field_get:Practice.aero_mapping)
  return _internal_aero_mapping(index);
}
inline ::Stint* Practice::_internal_add_aero_mapping() {
  return _impl_.aero_mapping_.Add();
}
inline ::Stint* Practice::add_aero_mapping() {
  ::Stint* _add = _internal_add_aero_mapping();
  // @@protoc_insertion_point(field_add:Practice.aero_mapping)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::aero_mapping() const {
  // @@protoc_insertion_point(field_list:Practice.aero_mapping)
  return _impl_.aero_mapping_;
}

// repeated .Stint performance_runs = 4;
inline int Practice::_internal_performance_runs_size() const {
  return _impl_.performance_runs_.size();
}
inline int Practice::performance_runs_size() const {
  return _internal_performance_runs_size();
}
inline ::Stint* Practice::mutable_performance_runs(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.performance_runs)
  return _impl_.performance_runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_performance_runs() {
  // @@protoc_insertion_point(field_mutable_list:Practice.performance_runs)
  return &_impl_.performance_runs_;
}
inline const ::Stint& Practice::_internal_performance_runs(int index) const {
  return _impl_.performance_runs_.Get(index);
}
inline const ::Stint& Practice::performance_runs(int index) const {
  // @@protoc_insertion_point(field_get:Practice.performance_runs)
  return _internal_performance_runs(index);
}
inline ::Stint* Practice::_internal_add_performance_runs() {
  return _impl_.performance_runs_.Add();
}
inline ::Stint* Practice::add_performance_runs() {
  ::Stint* _add = _internal_add_performance_runs();
  // @@protoc_insertion_point(field_add:Practice.performance_runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::performance_runs() const {
  // @@protoc_insertion_point(field_list:Practice.performance_runs)
  return _impl_.performance_runs_;
}

// repeated .Stint long_runs = 5;
inline int Practice::_internal_long_runs_size() const {
  return _impl_.long_runs_.size();
}
inline int Practice::long_runs_size() const {
  return _internal_long_runs_size();
}
inline ::Stint* Practice::mutable_long_runs(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.long_runs)
  return _impl_.long_runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_long_runs() {
  // @@protoc_insertion_point(field_mutable_list:Practice.long_runs)
  return &_impl_.long_runs_;
}
inline const ::Stint& Practice::_internal_long_runs(int index) const {
  return _impl_.long_runs_.Get(index);
}
inline const ::Stint& Practice::long_runs(int index) const {
  // @@protoc_insertion_point(field_get:Practice.long_runs)
  return _internal_long_runs(index);
}
inline ::Stint* Practice::_internal_add_long_runs() {
  return _impl_.long_runs_.Add();
}
inline ::Stint* Practice::add_long_runs() {
  ::Stint* _add = _internal_add_long_runs();
  // @@protoc_insertion_point(field_add:Practice.long_runs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::long_runs() const {
  // @@protoc_insertion_point(field_list:Practice.long_runs)
  return _impl_.long_runs_;
}

// repeated .Stint race_simulation = 6;
inline int Practice::_internal_race_simulation_size() const {
  return _impl_.race_simulation_.size();
}
inline int Practice::race_simulation_size() const {
  return _internal_race_simulation_size();
}
inline ::Stint* Practice::mutable_race_simulation(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.race_simulation)
  return _impl_.race_simulation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_race_simulation() {
  // @@protoc_insertion_point(field_mutable_list:Practice.race_simulation)
  return &_impl_.race_simulation_;
}
inline const ::Stint& Practice::_internal_race_simulation(int index) const {
  return _impl_.race_simulation_.Get(index);
}
inline const ::Stint& Practice::race_simulation(int index) const {
  // @@protoc_insertion_point(field_get:Practice.race_simulation)
  return _internal_race_simulation(index);
}
inline ::Stint* Practice::_internal_add_race_simulation() {
  return _impl_.race_simulation_.Add();
}
inline ::Stint* Practice::add_race_simulation() {
  ::Stint* _add = _internal_add_race_simulation();
  // @@protoc_insertion_point(field_add:Practice.race_simulation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::race_simulation() const {
  // @@protoc_insertion_point(field_list:Practice.race_simulation)
  return _impl_.race_simulation_;
}

// repeated .Stint qualifying_simulation = 7;
inline int Practice::_internal_qualifying_simulation_size() const {
  return _impl_.qualifying_simulation_.size();
}
inline int Practice::qualifying_simulation_size() const {
  return _internal_qualifying_simulation_size();
}
inline ::Stint* Practice::mutable_qualifying_simulation(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.qualifying_simulation)
  return _impl_.qualifying_simulation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_qualifying_simulation() {
  // @@protoc_insertion_point(field_mutable_list:Practice.qualifying_simulation)
  return &_impl_.qualifying_simulation_;
}
inline const ::Stint& Practice::_internal_qualifying_simulation(int index) const {
  return _impl_.qualifying_simulation_.Get(index);
}
inline const ::Stint& Practice::qualifying_simulation(int index) const {
  // @@protoc_insertion_point(field_get:Practice.qualifying_simulation)
  return _internal_qualifying_simulation(index);
}
inline ::Stint* Practice::_internal_add_qualifying_simulation() {
  return _impl_.qualifying_simulation_.Add();
}
inline ::Stint* Practice::add_qualifying_simulation() {
  ::Stint* _add = _internal_add_qualifying_simulation();
  // @@protoc_insertion_point(field_add:Practice.qualifying_simulation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::qualifying_simulation() const {
  // @@protoc_insertion_point(field_list:Practice.qualifying_simulation)
  return _impl_.qualifying_simulation_;
}

// repeated .Stint practice_starts = 8;
inline int Practice::_internal_practice_starts_size() const {
  return _impl_.practice_starts_.size();
}
inline int Practice::practice_starts_size() const {
  return _internal_practice_starts_size();
}
inline ::Stint* Practice::mutable_practice_starts(int index) {
  // @@protoc_insertion_point(field_mutable:Practice.practice_starts)
  return _impl_.practice_starts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >*
Practice::mutable_practice_starts() {
  // @@protoc_insertion_point(field_mutable_list:Practice.practice_starts)
  return &_impl_.practice_starts_;
}
inline const ::Stint& Practice::_internal_practice_starts(int index) const {
  return _impl_.practice_starts_.Get(index);
}
inline const ::Stint& Practice::practice_starts(int index) const {
  // @@protoc_insertion_point(field_get:Practice.practice_starts)
  return _internal_practice_starts(index);
}
inline ::Stint* Practice::_internal_add_practice_starts() {
  return _impl_.practice_starts_.Add();
}
inline ::Stint* Practice::add_practice_starts() {
  ::Stint* _add = _internal_add_practice_starts();
  // @@protoc_insertion_point(field_add:Practice.practice_starts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Stint >&
Practice::practice_starts() const {
  // @@protoc_insertion_point(field_list:Practice.practice_starts)
  return _impl_.practice_starts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Practice_2eproto
