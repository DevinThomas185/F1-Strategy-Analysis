// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaceWeekend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RaceWeekend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RaceWeekend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "RaceSessions.pb.h"
#include "SprintRaceSessions.pb.h"
#include "SprintRaceSessions2023.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RaceWeekend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RaceWeekend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RaceWeekend_2eproto;
class RaceWeekend;
struct RaceWeekendDefaultTypeInternal;
extern RaceWeekendDefaultTypeInternal _RaceWeekend_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RaceWeekend* Arena::CreateMaybeMessage<::RaceWeekend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RaceWeekend_RaceType : int {
  RaceWeekend_RaceType_RACE_WEEKEND = 0,
  RaceWeekend_RaceType_SPRINT_WEEKEND = 1,
  RaceWeekend_RaceType_SPRINT_WEEKEND_2023 = 2,
  RaceWeekend_RaceType_RaceWeekend_RaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RaceWeekend_RaceType_RaceWeekend_RaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RaceWeekend_RaceType_IsValid(int value);
constexpr RaceWeekend_RaceType RaceWeekend_RaceType_RaceType_MIN = RaceWeekend_RaceType_RACE_WEEKEND;
constexpr RaceWeekend_RaceType RaceWeekend_RaceType_RaceType_MAX = RaceWeekend_RaceType_SPRINT_WEEKEND_2023;
constexpr int RaceWeekend_RaceType_RaceType_ARRAYSIZE = RaceWeekend_RaceType_RaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaceWeekend_RaceType_descriptor();
template<typename T>
inline const std::string& RaceWeekend_RaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RaceWeekend_RaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RaceWeekend_RaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RaceWeekend_RaceType_descriptor(), enum_t_value);
}
inline bool RaceWeekend_RaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RaceWeekend_RaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RaceWeekend_RaceType>(
    RaceWeekend_RaceType_descriptor(), name, value);
}
// ===================================================================

class RaceWeekend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaceWeekend) */ {
 public:
  inline RaceWeekend() : RaceWeekend(nullptr) {}
  ~RaceWeekend() override;
  explicit PROTOBUF_CONSTEXPR RaceWeekend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaceWeekend(const RaceWeekend& from);
  RaceWeekend(RaceWeekend&& from) noexcept
    : RaceWeekend() {
    *this = ::std::move(from);
  }

  inline RaceWeekend& operator=(const RaceWeekend& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaceWeekend& operator=(RaceWeekend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaceWeekend& default_instance() {
    return *internal_default_instance();
  }
  enum SessionsCase {
    kRaceSessions = 3,
    kSprintRaceSessions = 4,
    kSprintRaceSessions2023 = 5,
    SESSIONS_NOT_SET = 0,
  };

  static inline const RaceWeekend* internal_default_instance() {
    return reinterpret_cast<const RaceWeekend*>(
               &_RaceWeekend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaceWeekend& a, RaceWeekend& b) {
    a.Swap(&b);
  }
  inline void Swap(RaceWeekend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaceWeekend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaceWeekend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaceWeekend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaceWeekend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaceWeekend& from) {
    RaceWeekend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaceWeekend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaceWeekend";
  }
  protected:
  explicit RaceWeekend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RaceWeekend_RaceType RaceType;
  static constexpr RaceType RACE_WEEKEND =
    RaceWeekend_RaceType_RACE_WEEKEND;
  static constexpr RaceType SPRINT_WEEKEND =
    RaceWeekend_RaceType_SPRINT_WEEKEND;
  static constexpr RaceType SPRINT_WEEKEND_2023 =
    RaceWeekend_RaceType_SPRINT_WEEKEND_2023;
  static inline bool RaceType_IsValid(int value) {
    return RaceWeekend_RaceType_IsValid(value);
  }
  static constexpr RaceType RaceType_MIN =
    RaceWeekend_RaceType_RaceType_MIN;
  static constexpr RaceType RaceType_MAX =
    RaceWeekend_RaceType_RaceType_MAX;
  static constexpr int RaceType_ARRAYSIZE =
    RaceWeekend_RaceType_RaceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RaceType_descriptor() {
    return RaceWeekend_RaceType_descriptor();
  }
  template<typename T>
  static inline const std::string& RaceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RaceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RaceType_Name.");
    return RaceWeekend_RaceType_Name(enum_t_value);
  }
  static inline bool RaceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RaceType* value) {
    return RaceWeekend_RaceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrackIdFieldNumber = 1,
    kRaceTypeFieldNumber = 2,
    kRaceSessionsFieldNumber = 3,
    kSprintRaceSessionsFieldNumber = 4,
    kSprintRaceSessions2023FieldNumber = 5,
  };
  // int32 track_id = 1;
  void clear_track_id();
  int32_t track_id() const;
  void set_track_id(int32_t value);
  private:
  int32_t _internal_track_id() const;
  void _internal_set_track_id(int32_t value);
  public:

  // .RaceWeekend.RaceType race_type = 2;
  void clear_race_type();
  ::RaceWeekend_RaceType race_type() const;
  void set_race_type(::RaceWeekend_RaceType value);
  private:
  ::RaceWeekend_RaceType _internal_race_type() const;
  void _internal_set_race_type(::RaceWeekend_RaceType value);
  public:

  // .RaceSessions race_sessions = 3;
  bool has_race_sessions() const;
  private:
  bool _internal_has_race_sessions() const;
  public:
  void clear_race_sessions();
  const ::RaceSessions& race_sessions() const;
  PROTOBUF_NODISCARD ::RaceSessions* release_race_sessions();
  ::RaceSessions* mutable_race_sessions();
  void set_allocated_race_sessions(::RaceSessions* race_sessions);
  private:
  const ::RaceSessions& _internal_race_sessions() const;
  ::RaceSessions* _internal_mutable_race_sessions();
  public:
  void unsafe_arena_set_allocated_race_sessions(
      ::RaceSessions* race_sessions);
  ::RaceSessions* unsafe_arena_release_race_sessions();

  // .SprintRaceSessions sprint_race_sessions = 4;
  bool has_sprint_race_sessions() const;
  private:
  bool _internal_has_sprint_race_sessions() const;
  public:
  void clear_sprint_race_sessions();
  const ::SprintRaceSessions& sprint_race_sessions() const;
  PROTOBUF_NODISCARD ::SprintRaceSessions* release_sprint_race_sessions();
  ::SprintRaceSessions* mutable_sprint_race_sessions();
  void set_allocated_sprint_race_sessions(::SprintRaceSessions* sprint_race_sessions);
  private:
  const ::SprintRaceSessions& _internal_sprint_race_sessions() const;
  ::SprintRaceSessions* _internal_mutable_sprint_race_sessions();
  public:
  void unsafe_arena_set_allocated_sprint_race_sessions(
      ::SprintRaceSessions* sprint_race_sessions);
  ::SprintRaceSessions* unsafe_arena_release_sprint_race_sessions();

  // .SprintRaceSessions2023 sprint_race_sessions_2023 = 5;
  bool has_sprint_race_sessions_2023() const;
  private:
  bool _internal_has_sprint_race_sessions_2023() const;
  public:
  void clear_sprint_race_sessions_2023();
  const ::SprintRaceSessions2023& sprint_race_sessions_2023() const;
  PROTOBUF_NODISCARD ::SprintRaceSessions2023* release_sprint_race_sessions_2023();
  ::SprintRaceSessions2023* mutable_sprint_race_sessions_2023();
  void set_allocated_sprint_race_sessions_2023(::SprintRaceSessions2023* sprint_race_sessions_2023);
  private:
  const ::SprintRaceSessions2023& _internal_sprint_race_sessions_2023() const;
  ::SprintRaceSessions2023* _internal_mutable_sprint_race_sessions_2023();
  public:
  void unsafe_arena_set_allocated_sprint_race_sessions_2023(
      ::SprintRaceSessions2023* sprint_race_sessions_2023);
  ::SprintRaceSessions2023* unsafe_arena_release_sprint_race_sessions_2023();

  void clear_sessions();
  SessionsCase sessions_case() const;
  // @@protoc_insertion_point(class_scope:RaceWeekend)
 private:
  class _Internal;
  void set_has_race_sessions();
  void set_has_sprint_race_sessions();
  void set_has_sprint_race_sessions_2023();

  inline bool has_sessions() const;
  inline void clear_has_sessions();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t track_id_;
    int race_type_;
    union SessionsUnion {
      constexpr SessionsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::RaceSessions* race_sessions_;
      ::SprintRaceSessions* sprint_race_sessions_;
      ::SprintRaceSessions2023* sprint_race_sessions_2023_;
    } sessions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaceWeekend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaceWeekend

// int32 track_id = 1;
inline void RaceWeekend::clear_track_id() {
  _impl_.track_id_ = 0;
}
inline int32_t RaceWeekend::_internal_track_id() const {
  return _impl_.track_id_;
}
inline int32_t RaceWeekend::track_id() const {
  // @@protoc_insertion_point(field_get:RaceWeekend.track_id)
  return _internal_track_id();
}
inline void RaceWeekend::_internal_set_track_id(int32_t value) {
  
  _impl_.track_id_ = value;
}
inline void RaceWeekend::set_track_id(int32_t value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:RaceWeekend.track_id)
}

// .RaceWeekend.RaceType race_type = 2;
inline void RaceWeekend::clear_race_type() {
  _impl_.race_type_ = 0;
}
inline ::RaceWeekend_RaceType RaceWeekend::_internal_race_type() const {
  return static_cast< ::RaceWeekend_RaceType >(_impl_.race_type_);
}
inline ::RaceWeekend_RaceType RaceWeekend::race_type() const {
  // @@protoc_insertion_point(field_get:RaceWeekend.race_type)
  return _internal_race_type();
}
inline void RaceWeekend::_internal_set_race_type(::RaceWeekend_RaceType value) {
  
  _impl_.race_type_ = value;
}
inline void RaceWeekend::set_race_type(::RaceWeekend_RaceType value) {
  _internal_set_race_type(value);
  // @@protoc_insertion_point(field_set:RaceWeekend.race_type)
}

// .RaceSessions race_sessions = 3;
inline bool RaceWeekend::_internal_has_race_sessions() const {
  return sessions_case() == kRaceSessions;
}
inline bool RaceWeekend::has_race_sessions() const {
  return _internal_has_race_sessions();
}
inline void RaceWeekend::set_has_race_sessions() {
  _impl_._oneof_case_[0] = kRaceSessions;
}
inline ::RaceSessions* RaceWeekend::release_race_sessions() {
  // @@protoc_insertion_point(field_release:RaceWeekend.race_sessions)
  if (_internal_has_race_sessions()) {
    clear_has_sessions();
    ::RaceSessions* temp = _impl_.sessions_.race_sessions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sessions_.race_sessions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RaceSessions& RaceWeekend::_internal_race_sessions() const {
  return _internal_has_race_sessions()
      ? *_impl_.sessions_.race_sessions_
      : reinterpret_cast< ::RaceSessions&>(::_RaceSessions_default_instance_);
}
inline const ::RaceSessions& RaceWeekend::race_sessions() const {
  // @@protoc_insertion_point(field_get:RaceWeekend.race_sessions)
  return _internal_race_sessions();
}
inline ::RaceSessions* RaceWeekend::unsafe_arena_release_race_sessions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaceWeekend.race_sessions)
  if (_internal_has_race_sessions()) {
    clear_has_sessions();
    ::RaceSessions* temp = _impl_.sessions_.race_sessions_;
    _impl_.sessions_.race_sessions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaceWeekend::unsafe_arena_set_allocated_race_sessions(::RaceSessions* race_sessions) {
  clear_sessions();
  if (race_sessions) {
    set_has_race_sessions();
    _impl_.sessions_.race_sessions_ = race_sessions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceWeekend.race_sessions)
}
inline ::RaceSessions* RaceWeekend::_internal_mutable_race_sessions() {
  if (!_internal_has_race_sessions()) {
    clear_sessions();
    set_has_race_sessions();
    _impl_.sessions_.race_sessions_ = CreateMaybeMessage< ::RaceSessions >(GetArenaForAllocation());
  }
  return _impl_.sessions_.race_sessions_;
}
inline ::RaceSessions* RaceWeekend::mutable_race_sessions() {
  ::RaceSessions* _msg = _internal_mutable_race_sessions();
  // @@protoc_insertion_point(field_mutable:RaceWeekend.race_sessions)
  return _msg;
}

// .SprintRaceSessions sprint_race_sessions = 4;
inline bool RaceWeekend::_internal_has_sprint_race_sessions() const {
  return sessions_case() == kSprintRaceSessions;
}
inline bool RaceWeekend::has_sprint_race_sessions() const {
  return _internal_has_sprint_race_sessions();
}
inline void RaceWeekend::set_has_sprint_race_sessions() {
  _impl_._oneof_case_[0] = kSprintRaceSessions;
}
inline ::SprintRaceSessions* RaceWeekend::release_sprint_race_sessions() {
  // @@protoc_insertion_point(field_release:RaceWeekend.sprint_race_sessions)
  if (_internal_has_sprint_race_sessions()) {
    clear_has_sessions();
    ::SprintRaceSessions* temp = _impl_.sessions_.sprint_race_sessions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sessions_.sprint_race_sessions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SprintRaceSessions& RaceWeekend::_internal_sprint_race_sessions() const {
  return _internal_has_sprint_race_sessions()
      ? *_impl_.sessions_.sprint_race_sessions_
      : reinterpret_cast< ::SprintRaceSessions&>(::_SprintRaceSessions_default_instance_);
}
inline const ::SprintRaceSessions& RaceWeekend::sprint_race_sessions() const {
  // @@protoc_insertion_point(field_get:RaceWeekend.sprint_race_sessions)
  return _internal_sprint_race_sessions();
}
inline ::SprintRaceSessions* RaceWeekend::unsafe_arena_release_sprint_race_sessions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaceWeekend.sprint_race_sessions)
  if (_internal_has_sprint_race_sessions()) {
    clear_has_sessions();
    ::SprintRaceSessions* temp = _impl_.sessions_.sprint_race_sessions_;
    _impl_.sessions_.sprint_race_sessions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaceWeekend::unsafe_arena_set_allocated_sprint_race_sessions(::SprintRaceSessions* sprint_race_sessions) {
  clear_sessions();
  if (sprint_race_sessions) {
    set_has_sprint_race_sessions();
    _impl_.sessions_.sprint_race_sessions_ = sprint_race_sessions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceWeekend.sprint_race_sessions)
}
inline ::SprintRaceSessions* RaceWeekend::_internal_mutable_sprint_race_sessions() {
  if (!_internal_has_sprint_race_sessions()) {
    clear_sessions();
    set_has_sprint_race_sessions();
    _impl_.sessions_.sprint_race_sessions_ = CreateMaybeMessage< ::SprintRaceSessions >(GetArenaForAllocation());
  }
  return _impl_.sessions_.sprint_race_sessions_;
}
inline ::SprintRaceSessions* RaceWeekend::mutable_sprint_race_sessions() {
  ::SprintRaceSessions* _msg = _internal_mutable_sprint_race_sessions();
  // @@protoc_insertion_point(field_mutable:RaceWeekend.sprint_race_sessions)
  return _msg;
}

// .SprintRaceSessions2023 sprint_race_sessions_2023 = 5;
inline bool RaceWeekend::_internal_has_sprint_race_sessions_2023() const {
  return sessions_case() == kSprintRaceSessions2023;
}
inline bool RaceWeekend::has_sprint_race_sessions_2023() const {
  return _internal_has_sprint_race_sessions_2023();
}
inline void RaceWeekend::set_has_sprint_race_sessions_2023() {
  _impl_._oneof_case_[0] = kSprintRaceSessions2023;
}
inline ::SprintRaceSessions2023* RaceWeekend::release_sprint_race_sessions_2023() {
  // @@protoc_insertion_point(field_release:RaceWeekend.sprint_race_sessions_2023)
  if (_internal_has_sprint_race_sessions_2023()) {
    clear_has_sessions();
    ::SprintRaceSessions2023* temp = _impl_.sessions_.sprint_race_sessions_2023_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sessions_.sprint_race_sessions_2023_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SprintRaceSessions2023& RaceWeekend::_internal_sprint_race_sessions_2023() const {
  return _internal_has_sprint_race_sessions_2023()
      ? *_impl_.sessions_.sprint_race_sessions_2023_
      : reinterpret_cast< ::SprintRaceSessions2023&>(::_SprintRaceSessions2023_default_instance_);
}
inline const ::SprintRaceSessions2023& RaceWeekend::sprint_race_sessions_2023() const {
  // @@protoc_insertion_point(field_get:RaceWeekend.sprint_race_sessions_2023)
  return _internal_sprint_race_sessions_2023();
}
inline ::SprintRaceSessions2023* RaceWeekend::unsafe_arena_release_sprint_race_sessions_2023() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RaceWeekend.sprint_race_sessions_2023)
  if (_internal_has_sprint_race_sessions_2023()) {
    clear_has_sessions();
    ::SprintRaceSessions2023* temp = _impl_.sessions_.sprint_race_sessions_2023_;
    _impl_.sessions_.sprint_race_sessions_2023_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RaceWeekend::unsafe_arena_set_allocated_sprint_race_sessions_2023(::SprintRaceSessions2023* sprint_race_sessions_2023) {
  clear_sessions();
  if (sprint_race_sessions_2023) {
    set_has_sprint_race_sessions_2023();
    _impl_.sessions_.sprint_race_sessions_2023_ = sprint_race_sessions_2023;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceWeekend.sprint_race_sessions_2023)
}
inline ::SprintRaceSessions2023* RaceWeekend::_internal_mutable_sprint_race_sessions_2023() {
  if (!_internal_has_sprint_race_sessions_2023()) {
    clear_sessions();
    set_has_sprint_race_sessions_2023();
    _impl_.sessions_.sprint_race_sessions_2023_ = CreateMaybeMessage< ::SprintRaceSessions2023 >(GetArenaForAllocation());
  }
  return _impl_.sessions_.sprint_race_sessions_2023_;
}
inline ::SprintRaceSessions2023* RaceWeekend::mutable_sprint_race_sessions_2023() {
  ::SprintRaceSessions2023* _msg = _internal_mutable_sprint_race_sessions_2023();
  // @@protoc_insertion_point(field_mutable:RaceWeekend.sprint_race_sessions_2023)
  return _msg;
}

inline bool RaceWeekend::has_sessions() const {
  return sessions_case() != SESSIONS_NOT_SET;
}
inline void RaceWeekend::clear_has_sessions() {
  _impl_._oneof_case_[0] = SESSIONS_NOT_SET;
}
inline RaceWeekend::SessionsCase RaceWeekend::sessions_case() const {
  return RaceWeekend::SessionsCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RaceWeekend_RaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RaceWeekend_RaceType>() {
  return ::RaceWeekend_RaceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RaceWeekend_2eproto
