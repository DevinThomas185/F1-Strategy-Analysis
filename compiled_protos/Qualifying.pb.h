// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qualifying.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Qualifying_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Qualifying_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "QualifyingSession.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Qualifying_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Qualifying_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Qualifying_2eproto;
class Qualifying;
struct QualifyingDefaultTypeInternal;
extern QualifyingDefaultTypeInternal _Qualifying_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Qualifying* Arena::CreateMaybeMessage<::Qualifying>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Qualifying final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Qualifying) */ {
 public:
  inline Qualifying() : Qualifying(nullptr) {}
  ~Qualifying() override;
  explicit PROTOBUF_CONSTEXPR Qualifying(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Qualifying(const Qualifying& from);
  Qualifying(Qualifying&& from) noexcept
    : Qualifying() {
    *this = ::std::move(from);
  }

  inline Qualifying& operator=(const Qualifying& from) {
    CopyFrom(from);
    return *this;
  }
  inline Qualifying& operator=(Qualifying&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Qualifying& default_instance() {
    return *internal_default_instance();
  }
  static inline const Qualifying* internal_default_instance() {
    return reinterpret_cast<const Qualifying*>(
               &_Qualifying_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Qualifying& a, Qualifying& b) {
    a.Swap(&b);
  }
  inline void Swap(Qualifying* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Qualifying* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Qualifying* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Qualifying>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Qualifying& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Qualifying& from) {
    Qualifying::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Qualifying* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Qualifying";
  }
  protected:
  explicit Qualifying(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSession1FieldNumber = 1,
    kSession2FieldNumber = 2,
    kSession3FieldNumber = 3,
  };
  // .QualifyingSession session_1 = 1;
  bool has_session_1() const;
  private:
  bool _internal_has_session_1() const;
  public:
  void clear_session_1();
  const ::QualifyingSession& session_1() const;
  PROTOBUF_NODISCARD ::QualifyingSession* release_session_1();
  ::QualifyingSession* mutable_session_1();
  void set_allocated_session_1(::QualifyingSession* session_1);
  private:
  const ::QualifyingSession& _internal_session_1() const;
  ::QualifyingSession* _internal_mutable_session_1();
  public:
  void unsafe_arena_set_allocated_session_1(
      ::QualifyingSession* session_1);
  ::QualifyingSession* unsafe_arena_release_session_1();

  // .QualifyingSession session_2 = 2;
  bool has_session_2() const;
  private:
  bool _internal_has_session_2() const;
  public:
  void clear_session_2();
  const ::QualifyingSession& session_2() const;
  PROTOBUF_NODISCARD ::QualifyingSession* release_session_2();
  ::QualifyingSession* mutable_session_2();
  void set_allocated_session_2(::QualifyingSession* session_2);
  private:
  const ::QualifyingSession& _internal_session_2() const;
  ::QualifyingSession* _internal_mutable_session_2();
  public:
  void unsafe_arena_set_allocated_session_2(
      ::QualifyingSession* session_2);
  ::QualifyingSession* unsafe_arena_release_session_2();

  // .QualifyingSession session_3 = 3;
  bool has_session_3() const;
  private:
  bool _internal_has_session_3() const;
  public:
  void clear_session_3();
  const ::QualifyingSession& session_3() const;
  PROTOBUF_NODISCARD ::QualifyingSession* release_session_3();
  ::QualifyingSession* mutable_session_3();
  void set_allocated_session_3(::QualifyingSession* session_3);
  private:
  const ::QualifyingSession& _internal_session_3() const;
  ::QualifyingSession* _internal_mutable_session_3();
  public:
  void unsafe_arena_set_allocated_session_3(
      ::QualifyingSession* session_3);
  ::QualifyingSession* unsafe_arena_release_session_3();

  // @@protoc_insertion_point(class_scope:Qualifying)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::QualifyingSession* session_1_;
    ::QualifyingSession* session_2_;
    ::QualifyingSession* session_3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Qualifying_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Qualifying

// .QualifyingSession session_1 = 1;
inline bool Qualifying::_internal_has_session_1() const {
  return this != internal_default_instance() && _impl_.session_1_ != nullptr;
}
inline bool Qualifying::has_session_1() const {
  return _internal_has_session_1();
}
inline const ::QualifyingSession& Qualifying::_internal_session_1() const {
  const ::QualifyingSession* p = _impl_.session_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::QualifyingSession&>(
      ::_QualifyingSession_default_instance_);
}
inline const ::QualifyingSession& Qualifying::session_1() const {
  // @@protoc_insertion_point(field_get:Qualifying.session_1)
  return _internal_session_1();
}
inline void Qualifying::unsafe_arena_set_allocated_session_1(
    ::QualifyingSession* session_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_1_);
  }
  _impl_.session_1_ = session_1;
  if (session_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Qualifying.session_1)
}
inline ::QualifyingSession* Qualifying::release_session_1() {
  
  ::QualifyingSession* temp = _impl_.session_1_;
  _impl_.session_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QualifyingSession* Qualifying::unsafe_arena_release_session_1() {
  // @@protoc_insertion_point(field_release:Qualifying.session_1)
  
  ::QualifyingSession* temp = _impl_.session_1_;
  _impl_.session_1_ = nullptr;
  return temp;
}
inline ::QualifyingSession* Qualifying::_internal_mutable_session_1() {
  
  if (_impl_.session_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::QualifyingSession>(GetArenaForAllocation());
    _impl_.session_1_ = p;
  }
  return _impl_.session_1_;
}
inline ::QualifyingSession* Qualifying::mutable_session_1() {
  ::QualifyingSession* _msg = _internal_mutable_session_1();
  // @@protoc_insertion_point(field_mutable:Qualifying.session_1)
  return _msg;
}
inline void Qualifying::set_allocated_session_1(::QualifyingSession* session_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_1_);
  }
  if (session_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_1));
    if (message_arena != submessage_arena) {
      session_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.session_1_ = session_1;
  // @@protoc_insertion_point(field_set_allocated:Qualifying.session_1)
}

// .QualifyingSession session_2 = 2;
inline bool Qualifying::_internal_has_session_2() const {
  return this != internal_default_instance() && _impl_.session_2_ != nullptr;
}
inline bool Qualifying::has_session_2() const {
  return _internal_has_session_2();
}
inline const ::QualifyingSession& Qualifying::_internal_session_2() const {
  const ::QualifyingSession* p = _impl_.session_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::QualifyingSession&>(
      ::_QualifyingSession_default_instance_);
}
inline const ::QualifyingSession& Qualifying::session_2() const {
  // @@protoc_insertion_point(field_get:Qualifying.session_2)
  return _internal_session_2();
}
inline void Qualifying::unsafe_arena_set_allocated_session_2(
    ::QualifyingSession* session_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_2_);
  }
  _impl_.session_2_ = session_2;
  if (session_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Qualifying.session_2)
}
inline ::QualifyingSession* Qualifying::release_session_2() {
  
  ::QualifyingSession* temp = _impl_.session_2_;
  _impl_.session_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QualifyingSession* Qualifying::unsafe_arena_release_session_2() {
  // @@protoc_insertion_point(field_release:Qualifying.session_2)
  
  ::QualifyingSession* temp = _impl_.session_2_;
  _impl_.session_2_ = nullptr;
  return temp;
}
inline ::QualifyingSession* Qualifying::_internal_mutable_session_2() {
  
  if (_impl_.session_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::QualifyingSession>(GetArenaForAllocation());
    _impl_.session_2_ = p;
  }
  return _impl_.session_2_;
}
inline ::QualifyingSession* Qualifying::mutable_session_2() {
  ::QualifyingSession* _msg = _internal_mutable_session_2();
  // @@protoc_insertion_point(field_mutable:Qualifying.session_2)
  return _msg;
}
inline void Qualifying::set_allocated_session_2(::QualifyingSession* session_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_2_);
  }
  if (session_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_2));
    if (message_arena != submessage_arena) {
      session_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.session_2_ = session_2;
  // @@protoc_insertion_point(field_set_allocated:Qualifying.session_2)
}

// .QualifyingSession session_3 = 3;
inline bool Qualifying::_internal_has_session_3() const {
  return this != internal_default_instance() && _impl_.session_3_ != nullptr;
}
inline bool Qualifying::has_session_3() const {
  return _internal_has_session_3();
}
inline const ::QualifyingSession& Qualifying::_internal_session_3() const {
  const ::QualifyingSession* p = _impl_.session_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::QualifyingSession&>(
      ::_QualifyingSession_default_instance_);
}
inline const ::QualifyingSession& Qualifying::session_3() const {
  // @@protoc_insertion_point(field_get:Qualifying.session_3)
  return _internal_session_3();
}
inline void Qualifying::unsafe_arena_set_allocated_session_3(
    ::QualifyingSession* session_3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_3_);
  }
  _impl_.session_3_ = session_3;
  if (session_3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Qualifying.session_3)
}
inline ::QualifyingSession* Qualifying::release_session_3() {
  
  ::QualifyingSession* temp = _impl_.session_3_;
  _impl_.session_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QualifyingSession* Qualifying::unsafe_arena_release_session_3() {
  // @@protoc_insertion_point(field_release:Qualifying.session_3)
  
  ::QualifyingSession* temp = _impl_.session_3_;
  _impl_.session_3_ = nullptr;
  return temp;
}
inline ::QualifyingSession* Qualifying::_internal_mutable_session_3() {
  
  if (_impl_.session_3_ == nullptr) {
    auto* p = CreateMaybeMessage<::QualifyingSession>(GetArenaForAllocation());
    _impl_.session_3_ = p;
  }
  return _impl_.session_3_;
}
inline ::QualifyingSession* Qualifying::mutable_session_3() {
  ::QualifyingSession* _msg = _internal_mutable_session_3();
  // @@protoc_insertion_point(field_mutable:Qualifying.session_3)
  return _msg;
}
inline void Qualifying::set_allocated_session_3(::QualifyingSession* session_3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_3_);
  }
  if (session_3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_3));
    if (message_arena != submessage_arena) {
      session_3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.session_3_ = session_3;
  // @@protoc_insertion_point(field_set_allocated:Qualifying.session_3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Qualifying_2eproto
