// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Setup.proto

#include "Setup.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Setup::Setup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.front_wing_)*/0u
  , /*decltype(_impl_.rear_wing_)*/0u
  , /*decltype(_impl_.differential_on_throttle_)*/0u
  , /*decltype(_impl_.differential_off_throttle_)*/0u
  , /*decltype(_impl_.front_camber_)*/0
  , /*decltype(_impl_.rear_camber_)*/0
  , /*decltype(_impl_.front_toe_)*/0
  , /*decltype(_impl_.rear_toe_)*/0
  , /*decltype(_impl_.front_suspension_)*/0u
  , /*decltype(_impl_.rear_suspension_)*/0u
  , /*decltype(_impl_.front_anti_roll_bar_)*/0u
  , /*decltype(_impl_.rear_anti_roll_bar_)*/0u
  , /*decltype(_impl_.front_suspension_height_)*/0u
  , /*decltype(_impl_.rear_suspension_height_)*/0u
  , /*decltype(_impl_.brake_pressure_)*/0u
  , /*decltype(_impl_.brake_bias_)*/0u
  , /*decltype(_impl_.rear_left_tyre_pressure_)*/0
  , /*decltype(_impl_.rear_right_tyre_pressure_)*/0
  , /*decltype(_impl_.front_left_tyre_pressure_)*/0
  , /*decltype(_impl_.front_right_tyre_pressure_)*/0
  , /*decltype(_impl_.ballast_)*/0u
  , /*decltype(_impl_.fuel_load_)*/0
  , /*decltype(_impl_.fuel_capacity_)*/0
  , /*decltype(_impl_.actual_tyre_compound_)*/0u
  , /*decltype(_impl_.visual_tyre_compound_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupDefaultTypeInternal() {}
  union {
    Setup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupDefaultTypeInternal _Setup_default_instance_;
static ::_pb::Metadata file_level_metadata_Setup_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Setup_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Setup_2eproto = nullptr;

const uint32_t TableStruct_Setup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Setup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_wing_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_wing_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.differential_on_throttle_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.differential_off_throttle_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_camber_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_camber_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_toe_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_toe_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_suspension_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_suspension_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_anti_roll_bar_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_anti_roll_bar_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_suspension_height_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_suspension_height_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.brake_pressure_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.brake_bias_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_left_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.rear_right_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_left_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.front_right_tyre_pressure_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.ballast_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.fuel_load_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.fuel_capacity_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.actual_tyre_compound_),
  PROTOBUF_FIELD_OFFSET(::Setup, _impl_.visual_tyre_compound_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Setup)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Setup_default_instance_._instance,
};

const char descriptor_table_protodef_Setup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Setup.proto\"\233\005\n\005Setup\022\022\n\nfront_wing\030\001 "
  "\001(\r\022\021\n\trear_wing\030\002 \001(\r\022 \n\030differential_o"
  "n_throttle\030\003 \001(\r\022!\n\031differential_off_thr"
  "ottle\030\004 \001(\r\022\024\n\014front_camber\030\005 \001(\002\022\023\n\013rea"
  "r_camber\030\006 \001(\002\022\021\n\tfront_toe\030\007 \001(\002\022\020\n\010rea"
  "r_toe\030\010 \001(\002\022\030\n\020front_suspension\030\t \001(\r\022\027\n"
  "\017rear_suspension\030\n \001(\r\022\033\n\023front_anti_rol"
  "l_bar\030\013 \001(\r\022\032\n\022rear_anti_roll_bar\030\014 \001(\r\022"
  "\037\n\027front_suspension_height\030\r \001(\r\022\036\n\026rear"
  "_suspension_height\030\016 \001(\r\022\026\n\016brake_pressu"
  "re\030\017 \001(\r\022\022\n\nbrake_bias\030\020 \001(\r\022\037\n\027rear_lef"
  "t_tyre_pressure\030\021 \001(\002\022 \n\030rear_right_tyre"
  "_pressure\030\022 \001(\002\022 \n\030front_left_tyre_press"
  "ure\030\023 \001(\002\022!\n\031front_right_tyre_pressure\030\024"
  " \001(\002\022\017\n\007ballast\030\025 \001(\r\022\021\n\tfuel_load\030\026 \001(\002"
  "\022\025\n\rfuel_capacity\030\027 \001(\002\022\034\n\024actual_tyre_c"
  "ompound\030\030 \001(\r\022\034\n\024visual_tyre_compound\030\031 "
  "\001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Setup_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Setup_2eproto = {
    false, false, 691, descriptor_table_protodef_Setup_2eproto,
    "Setup.proto",
    &descriptor_table_Setup_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_Setup_2eproto::offsets,
    file_level_metadata_Setup_2eproto, file_level_enum_descriptors_Setup_2eproto,
    file_level_service_descriptors_Setup_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Setup_2eproto_getter() {
  return &descriptor_table_Setup_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Setup_2eproto(&descriptor_table_Setup_2eproto);

// ===================================================================

class Setup::_Internal {
 public:
};

Setup::Setup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Setup)
}
Setup::Setup(const Setup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Setup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.front_wing_){}
    , decltype(_impl_.rear_wing_){}
    , decltype(_impl_.differential_on_throttle_){}
    , decltype(_impl_.differential_off_throttle_){}
    , decltype(_impl_.front_camber_){}
    , decltype(_impl_.rear_camber_){}
    , decltype(_impl_.front_toe_){}
    , decltype(_impl_.rear_toe_){}
    , decltype(_impl_.front_suspension_){}
    , decltype(_impl_.rear_suspension_){}
    , decltype(_impl_.front_anti_roll_bar_){}
    , decltype(_impl_.rear_anti_roll_bar_){}
    , decltype(_impl_.front_suspension_height_){}
    , decltype(_impl_.rear_suspension_height_){}
    , decltype(_impl_.brake_pressure_){}
    , decltype(_impl_.brake_bias_){}
    , decltype(_impl_.rear_left_tyre_pressure_){}
    , decltype(_impl_.rear_right_tyre_pressure_){}
    , decltype(_impl_.front_left_tyre_pressure_){}
    , decltype(_impl_.front_right_tyre_pressure_){}
    , decltype(_impl_.ballast_){}
    , decltype(_impl_.fuel_load_){}
    , decltype(_impl_.fuel_capacity_){}
    , decltype(_impl_.actual_tyre_compound_){}
    , decltype(_impl_.visual_tyre_compound_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_wing_, &from._impl_.front_wing_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.visual_tyre_compound_) -
    reinterpret_cast<char*>(&_impl_.front_wing_)) + sizeof(_impl_.visual_tyre_compound_));
  // @@protoc_insertion_point(copy_constructor:Setup)
}

inline void Setup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.front_wing_){0u}
    , decltype(_impl_.rear_wing_){0u}
    , decltype(_impl_.differential_on_throttle_){0u}
    , decltype(_impl_.differential_off_throttle_){0u}
    , decltype(_impl_.front_camber_){0}
    , decltype(_impl_.rear_camber_){0}
    , decltype(_impl_.front_toe_){0}
    , decltype(_impl_.rear_toe_){0}
    , decltype(_impl_.front_suspension_){0u}
    , decltype(_impl_.rear_suspension_){0u}
    , decltype(_impl_.front_anti_roll_bar_){0u}
    , decltype(_impl_.rear_anti_roll_bar_){0u}
    , decltype(_impl_.front_suspension_height_){0u}
    , decltype(_impl_.rear_suspension_height_){0u}
    , decltype(_impl_.brake_pressure_){0u}
    , decltype(_impl_.brake_bias_){0u}
    , decltype(_impl_.rear_left_tyre_pressure_){0}
    , decltype(_impl_.rear_right_tyre_pressure_){0}
    , decltype(_impl_.front_left_tyre_pressure_){0}
    , decltype(_impl_.front_right_tyre_pressure_){0}
    , decltype(_impl_.ballast_){0u}
    , decltype(_impl_.fuel_load_){0}
    , decltype(_impl_.fuel_capacity_){0}
    , decltype(_impl_.actual_tyre_compound_){0u}
    , decltype(_impl_.visual_tyre_compound_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Setup::~Setup() {
  // @@protoc_insertion_point(destructor:Setup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Setup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Setup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Setup::Clear() {
// @@protoc_insertion_point(message_clear_start:Setup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.front_wing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.visual_tyre_compound_) -
      reinterpret_cast<char*>(&_impl_.front_wing_)) + sizeof(_impl_.visual_tyre_compound_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Setup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 front_wing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.front_wing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_wing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rear_wing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 differential_on_throttle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.differential_on_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 differential_off_throttle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.differential_off_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float front_camber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.front_camber_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_camber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.rear_camber_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_toe = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.front_toe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_toe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.rear_toe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_suspension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.front_suspension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_suspension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rear_suspension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_anti_roll_bar = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.front_anti_roll_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_anti_roll_bar = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.rear_anti_roll_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 front_suspension_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.front_suspension_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rear_suspension_height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.rear_suspension_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 brake_pressure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.brake_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 brake_bias = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.brake_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rear_left_tyre_pressure = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.rear_left_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rear_right_tyre_pressure = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.rear_right_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_tyre_pressure = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.front_left_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_tyre_pressure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.front_right_tyre_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 ballast = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.ballast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fuel_load = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.fuel_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fuel_capacity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.fuel_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 actual_tyre_compound = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.actual_tyre_compound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 visual_tyre_compound = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.visual_tyre_compound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Setup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Setup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 front_wing = 1;
  if (this->_internal_front_wing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_front_wing(), target);
  }

  // uint32 rear_wing = 2;
  if (this->_internal_rear_wing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rear_wing(), target);
  }

  // uint32 differential_on_throttle = 3;
  if (this->_internal_differential_on_throttle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_differential_on_throttle(), target);
  }

  // uint32 differential_off_throttle = 4;
  if (this->_internal_differential_off_throttle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_differential_off_throttle(), target);
  }

  // float front_camber = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_camber = this->_internal_front_camber();
  uint32_t raw_front_camber;
  memcpy(&raw_front_camber, &tmp_front_camber, sizeof(tmp_front_camber));
  if (raw_front_camber != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_front_camber(), target);
  }

  // float rear_camber = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_camber = this->_internal_rear_camber();
  uint32_t raw_rear_camber;
  memcpy(&raw_rear_camber, &tmp_rear_camber, sizeof(tmp_rear_camber));
  if (raw_rear_camber != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_rear_camber(), target);
  }

  // float front_toe = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_toe = this->_internal_front_toe();
  uint32_t raw_front_toe;
  memcpy(&raw_front_toe, &tmp_front_toe, sizeof(tmp_front_toe));
  if (raw_front_toe != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_front_toe(), target);
  }

  // float rear_toe = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_toe = this->_internal_rear_toe();
  uint32_t raw_rear_toe;
  memcpy(&raw_rear_toe, &tmp_rear_toe, sizeof(tmp_rear_toe));
  if (raw_rear_toe != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_rear_toe(), target);
  }

  // uint32 front_suspension = 9;
  if (this->_internal_front_suspension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_front_suspension(), target);
  }

  // uint32 rear_suspension = 10;
  if (this->_internal_rear_suspension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rear_suspension(), target);
  }

  // uint32 front_anti_roll_bar = 11;
  if (this->_internal_front_anti_roll_bar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_front_anti_roll_bar(), target);
  }

  // uint32 rear_anti_roll_bar = 12;
  if (this->_internal_rear_anti_roll_bar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rear_anti_roll_bar(), target);
  }

  // uint32 front_suspension_height = 13;
  if (this->_internal_front_suspension_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_front_suspension_height(), target);
  }

  // uint32 rear_suspension_height = 14;
  if (this->_internal_rear_suspension_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rear_suspension_height(), target);
  }

  // uint32 brake_pressure = 15;
  if (this->_internal_brake_pressure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_brake_pressure(), target);
  }

  // uint32 brake_bias = 16;
  if (this->_internal_brake_bias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_brake_bias(), target);
  }

  // float rear_left_tyre_pressure = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_pressure = this->_internal_rear_left_tyre_pressure();
  uint32_t raw_rear_left_tyre_pressure;
  memcpy(&raw_rear_left_tyre_pressure, &tmp_rear_left_tyre_pressure, sizeof(tmp_rear_left_tyre_pressure));
  if (raw_rear_left_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_rear_left_tyre_pressure(), target);
  }

  // float rear_right_tyre_pressure = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_pressure = this->_internal_rear_right_tyre_pressure();
  uint32_t raw_rear_right_tyre_pressure;
  memcpy(&raw_rear_right_tyre_pressure, &tmp_rear_right_tyre_pressure, sizeof(tmp_rear_right_tyre_pressure));
  if (raw_rear_right_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_rear_right_tyre_pressure(), target);
  }

  // float front_left_tyre_pressure = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_pressure = this->_internal_front_left_tyre_pressure();
  uint32_t raw_front_left_tyre_pressure;
  memcpy(&raw_front_left_tyre_pressure, &tmp_front_left_tyre_pressure, sizeof(tmp_front_left_tyre_pressure));
  if (raw_front_left_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_front_left_tyre_pressure(), target);
  }

  // float front_right_tyre_pressure = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_pressure = this->_internal_front_right_tyre_pressure();
  uint32_t raw_front_right_tyre_pressure;
  memcpy(&raw_front_right_tyre_pressure, &tmp_front_right_tyre_pressure, sizeof(tmp_front_right_tyre_pressure));
  if (raw_front_right_tyre_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_front_right_tyre_pressure(), target);
  }

  // uint32 ballast = 21;
  if (this->_internal_ballast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_ballast(), target);
  }

  // float fuel_load = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_load = this->_internal_fuel_load();
  uint32_t raw_fuel_load;
  memcpy(&raw_fuel_load, &tmp_fuel_load, sizeof(tmp_fuel_load));
  if (raw_fuel_load != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_fuel_load(), target);
  }

  // float fuel_capacity = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_capacity = this->_internal_fuel_capacity();
  uint32_t raw_fuel_capacity;
  memcpy(&raw_fuel_capacity, &tmp_fuel_capacity, sizeof(tmp_fuel_capacity));
  if (raw_fuel_capacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_fuel_capacity(), target);
  }

  // uint32 actual_tyre_compound = 24;
  if (this->_internal_actual_tyre_compound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_actual_tyre_compound(), target);
  }

  // uint32 visual_tyre_compound = 25;
  if (this->_internal_visual_tyre_compound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_visual_tyre_compound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Setup)
  return target;
}

size_t Setup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Setup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 front_wing = 1;
  if (this->_internal_front_wing() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_wing());
  }

  // uint32 rear_wing = 2;
  if (this->_internal_rear_wing() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_wing());
  }

  // uint32 differential_on_throttle = 3;
  if (this->_internal_differential_on_throttle() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_differential_on_throttle());
  }

  // uint32 differential_off_throttle = 4;
  if (this->_internal_differential_off_throttle() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_differential_off_throttle());
  }

  // float front_camber = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_camber = this->_internal_front_camber();
  uint32_t raw_front_camber;
  memcpy(&raw_front_camber, &tmp_front_camber, sizeof(tmp_front_camber));
  if (raw_front_camber != 0) {
    total_size += 1 + 4;
  }

  // float rear_camber = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_camber = this->_internal_rear_camber();
  uint32_t raw_rear_camber;
  memcpy(&raw_rear_camber, &tmp_rear_camber, sizeof(tmp_rear_camber));
  if (raw_rear_camber != 0) {
    total_size += 1 + 4;
  }

  // float front_toe = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_toe = this->_internal_front_toe();
  uint32_t raw_front_toe;
  memcpy(&raw_front_toe, &tmp_front_toe, sizeof(tmp_front_toe));
  if (raw_front_toe != 0) {
    total_size += 1 + 4;
  }

  // float rear_toe = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_toe = this->_internal_rear_toe();
  uint32_t raw_rear_toe;
  memcpy(&raw_rear_toe, &tmp_rear_toe, sizeof(tmp_rear_toe));
  if (raw_rear_toe != 0) {
    total_size += 1 + 4;
  }

  // uint32 front_suspension = 9;
  if (this->_internal_front_suspension() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_suspension());
  }

  // uint32 rear_suspension = 10;
  if (this->_internal_rear_suspension() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_suspension());
  }

  // uint32 front_anti_roll_bar = 11;
  if (this->_internal_front_anti_roll_bar() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_anti_roll_bar());
  }

  // uint32 rear_anti_roll_bar = 12;
  if (this->_internal_rear_anti_roll_bar() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_anti_roll_bar());
  }

  // uint32 front_suspension_height = 13;
  if (this->_internal_front_suspension_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_front_suspension_height());
  }

  // uint32 rear_suspension_height = 14;
  if (this->_internal_rear_suspension_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rear_suspension_height());
  }

  // uint32 brake_pressure = 15;
  if (this->_internal_brake_pressure() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_brake_pressure());
  }

  // uint32 brake_bias = 16;
  if (this->_internal_brake_bias() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_brake_bias());
  }

  // float rear_left_tyre_pressure = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_pressure = this->_internal_rear_left_tyre_pressure();
  uint32_t raw_rear_left_tyre_pressure;
  memcpy(&raw_rear_left_tyre_pressure, &tmp_rear_left_tyre_pressure, sizeof(tmp_rear_left_tyre_pressure));
  if (raw_rear_left_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // float rear_right_tyre_pressure = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_pressure = this->_internal_rear_right_tyre_pressure();
  uint32_t raw_rear_right_tyre_pressure;
  memcpy(&raw_rear_right_tyre_pressure, &tmp_rear_right_tyre_pressure, sizeof(tmp_rear_right_tyre_pressure));
  if (raw_rear_right_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // float front_left_tyre_pressure = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_pressure = this->_internal_front_left_tyre_pressure();
  uint32_t raw_front_left_tyre_pressure;
  memcpy(&raw_front_left_tyre_pressure, &tmp_front_left_tyre_pressure, sizeof(tmp_front_left_tyre_pressure));
  if (raw_front_left_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // float front_right_tyre_pressure = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_pressure = this->_internal_front_right_tyre_pressure();
  uint32_t raw_front_right_tyre_pressure;
  memcpy(&raw_front_right_tyre_pressure, &tmp_front_right_tyre_pressure, sizeof(tmp_front_right_tyre_pressure));
  if (raw_front_right_tyre_pressure != 0) {
    total_size += 2 + 4;
  }

  // uint32 ballast = 21;
  if (this->_internal_ballast() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ballast());
  }

  // float fuel_load = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_load = this->_internal_fuel_load();
  uint32_t raw_fuel_load;
  memcpy(&raw_fuel_load, &tmp_fuel_load, sizeof(tmp_fuel_load));
  if (raw_fuel_load != 0) {
    total_size += 2 + 4;
  }

  // float fuel_capacity = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_capacity = this->_internal_fuel_capacity();
  uint32_t raw_fuel_capacity;
  memcpy(&raw_fuel_capacity, &tmp_fuel_capacity, sizeof(tmp_fuel_capacity));
  if (raw_fuel_capacity != 0) {
    total_size += 2 + 4;
  }

  // uint32 actual_tyre_compound = 24;
  if (this->_internal_actual_tyre_compound() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_actual_tyre_compound());
  }

  // uint32 visual_tyre_compound = 25;
  if (this->_internal_visual_tyre_compound() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_visual_tyre_compound());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Setup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Setup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Setup::GetClassData() const { return &_class_data_; }


void Setup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Setup*>(&to_msg);
  auto& from = static_cast<const Setup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Setup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_front_wing() != 0) {
    _this->_internal_set_front_wing(from._internal_front_wing());
  }
  if (from._internal_rear_wing() != 0) {
    _this->_internal_set_rear_wing(from._internal_rear_wing());
  }
  if (from._internal_differential_on_throttle() != 0) {
    _this->_internal_set_differential_on_throttle(from._internal_differential_on_throttle());
  }
  if (from._internal_differential_off_throttle() != 0) {
    _this->_internal_set_differential_off_throttle(from._internal_differential_off_throttle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_camber = from._internal_front_camber();
  uint32_t raw_front_camber;
  memcpy(&raw_front_camber, &tmp_front_camber, sizeof(tmp_front_camber));
  if (raw_front_camber != 0) {
    _this->_internal_set_front_camber(from._internal_front_camber());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_camber = from._internal_rear_camber();
  uint32_t raw_rear_camber;
  memcpy(&raw_rear_camber, &tmp_rear_camber, sizeof(tmp_rear_camber));
  if (raw_rear_camber != 0) {
    _this->_internal_set_rear_camber(from._internal_rear_camber());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_toe = from._internal_front_toe();
  uint32_t raw_front_toe;
  memcpy(&raw_front_toe, &tmp_front_toe, sizeof(tmp_front_toe));
  if (raw_front_toe != 0) {
    _this->_internal_set_front_toe(from._internal_front_toe());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_toe = from._internal_rear_toe();
  uint32_t raw_rear_toe;
  memcpy(&raw_rear_toe, &tmp_rear_toe, sizeof(tmp_rear_toe));
  if (raw_rear_toe != 0) {
    _this->_internal_set_rear_toe(from._internal_rear_toe());
  }
  if (from._internal_front_suspension() != 0) {
    _this->_internal_set_front_suspension(from._internal_front_suspension());
  }
  if (from._internal_rear_suspension() != 0) {
    _this->_internal_set_rear_suspension(from._internal_rear_suspension());
  }
  if (from._internal_front_anti_roll_bar() != 0) {
    _this->_internal_set_front_anti_roll_bar(from._internal_front_anti_roll_bar());
  }
  if (from._internal_rear_anti_roll_bar() != 0) {
    _this->_internal_set_rear_anti_roll_bar(from._internal_rear_anti_roll_bar());
  }
  if (from._internal_front_suspension_height() != 0) {
    _this->_internal_set_front_suspension_height(from._internal_front_suspension_height());
  }
  if (from._internal_rear_suspension_height() != 0) {
    _this->_internal_set_rear_suspension_height(from._internal_rear_suspension_height());
  }
  if (from._internal_brake_pressure() != 0) {
    _this->_internal_set_brake_pressure(from._internal_brake_pressure());
  }
  if (from._internal_brake_bias() != 0) {
    _this->_internal_set_brake_bias(from._internal_brake_bias());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_left_tyre_pressure = from._internal_rear_left_tyre_pressure();
  uint32_t raw_rear_left_tyre_pressure;
  memcpy(&raw_rear_left_tyre_pressure, &tmp_rear_left_tyre_pressure, sizeof(tmp_rear_left_tyre_pressure));
  if (raw_rear_left_tyre_pressure != 0) {
    _this->_internal_set_rear_left_tyre_pressure(from._internal_rear_left_tyre_pressure());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rear_right_tyre_pressure = from._internal_rear_right_tyre_pressure();
  uint32_t raw_rear_right_tyre_pressure;
  memcpy(&raw_rear_right_tyre_pressure, &tmp_rear_right_tyre_pressure, sizeof(tmp_rear_right_tyre_pressure));
  if (raw_rear_right_tyre_pressure != 0) {
    _this->_internal_set_rear_right_tyre_pressure(from._internal_rear_right_tyre_pressure());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_left_tyre_pressure = from._internal_front_left_tyre_pressure();
  uint32_t raw_front_left_tyre_pressure;
  memcpy(&raw_front_left_tyre_pressure, &tmp_front_left_tyre_pressure, sizeof(tmp_front_left_tyre_pressure));
  if (raw_front_left_tyre_pressure != 0) {
    _this->_internal_set_front_left_tyre_pressure(from._internal_front_left_tyre_pressure());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_front_right_tyre_pressure = from._internal_front_right_tyre_pressure();
  uint32_t raw_front_right_tyre_pressure;
  memcpy(&raw_front_right_tyre_pressure, &tmp_front_right_tyre_pressure, sizeof(tmp_front_right_tyre_pressure));
  if (raw_front_right_tyre_pressure != 0) {
    _this->_internal_set_front_right_tyre_pressure(from._internal_front_right_tyre_pressure());
  }
  if (from._internal_ballast() != 0) {
    _this->_internal_set_ballast(from._internal_ballast());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_load = from._internal_fuel_load();
  uint32_t raw_fuel_load;
  memcpy(&raw_fuel_load, &tmp_fuel_load, sizeof(tmp_fuel_load));
  if (raw_fuel_load != 0) {
    _this->_internal_set_fuel_load(from._internal_fuel_load());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fuel_capacity = from._internal_fuel_capacity();
  uint32_t raw_fuel_capacity;
  memcpy(&raw_fuel_capacity, &tmp_fuel_capacity, sizeof(tmp_fuel_capacity));
  if (raw_fuel_capacity != 0) {
    _this->_internal_set_fuel_capacity(from._internal_fuel_capacity());
  }
  if (from._internal_actual_tyre_compound() != 0) {
    _this->_internal_set_actual_tyre_compound(from._internal_actual_tyre_compound());
  }
  if (from._internal_visual_tyre_compound() != 0) {
    _this->_internal_set_visual_tyre_compound(from._internal_visual_tyre_compound());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Setup::CopyFrom(const Setup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Setup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setup::IsInitialized() const {
  return true;
}

void Setup::InternalSwap(Setup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Setup, _impl_.visual_tyre_compound_)
      + sizeof(Setup::_impl_.visual_tyre_compound_)
      - PROTOBUF_FIELD_OFFSET(Setup, _impl_.front_wing_)>(
          reinterpret_cast<char*>(&_impl_.front_wing_),
          reinterpret_cast<char*>(&other->_impl_.front_wing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Setup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Setup_2eproto_getter, &descriptor_table_Setup_2eproto_once,
      file_level_metadata_Setup_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Setup*
Arena::CreateMaybeMessage< ::Setup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Setup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
