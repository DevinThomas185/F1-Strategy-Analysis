// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaceSessions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RaceSessions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RaceSessions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Practice.pb.h"
#include "Qualifying.pb.h"
#include "Race.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RaceSessions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RaceSessions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RaceSessions_2eproto;
class RaceSessions;
struct RaceSessionsDefaultTypeInternal;
extern RaceSessionsDefaultTypeInternal _RaceSessions_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RaceSessions* Arena::CreateMaybeMessage<::RaceSessions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RaceSessions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaceSessions) */ {
 public:
  inline RaceSessions() : RaceSessions(nullptr) {}
  ~RaceSessions() override;
  explicit PROTOBUF_CONSTEXPR RaceSessions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaceSessions(const RaceSessions& from);
  RaceSessions(RaceSessions&& from) noexcept
    : RaceSessions() {
    *this = ::std::move(from);
  }

  inline RaceSessions& operator=(const RaceSessions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaceSessions& operator=(RaceSessions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaceSessions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaceSessions* internal_default_instance() {
    return reinterpret_cast<const RaceSessions*>(
               &_RaceSessions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaceSessions& a, RaceSessions& b) {
    a.Swap(&b);
  }
  inline void Swap(RaceSessions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaceSessions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaceSessions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaceSessions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaceSessions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaceSessions& from) {
    RaceSessions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaceSessions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaceSessions";
  }
  protected:
  explicit RaceSessions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFp1FieldNumber = 1,
    kFp2FieldNumber = 2,
    kFp3FieldNumber = 3,
    kQualifyingFieldNumber = 4,
    kRaceFieldNumber = 5,
  };
  // .Practice fp1 = 1;
  bool has_fp1() const;
  private:
  bool _internal_has_fp1() const;
  public:
  void clear_fp1();
  const ::Practice& fp1() const;
  PROTOBUF_NODISCARD ::Practice* release_fp1();
  ::Practice* mutable_fp1();
  void set_allocated_fp1(::Practice* fp1);
  private:
  const ::Practice& _internal_fp1() const;
  ::Practice* _internal_mutable_fp1();
  public:
  void unsafe_arena_set_allocated_fp1(
      ::Practice* fp1);
  ::Practice* unsafe_arena_release_fp1();

  // .Practice fp2 = 2;
  bool has_fp2() const;
  private:
  bool _internal_has_fp2() const;
  public:
  void clear_fp2();
  const ::Practice& fp2() const;
  PROTOBUF_NODISCARD ::Practice* release_fp2();
  ::Practice* mutable_fp2();
  void set_allocated_fp2(::Practice* fp2);
  private:
  const ::Practice& _internal_fp2() const;
  ::Practice* _internal_mutable_fp2();
  public:
  void unsafe_arena_set_allocated_fp2(
      ::Practice* fp2);
  ::Practice* unsafe_arena_release_fp2();

  // .Practice fp3 = 3;
  bool has_fp3() const;
  private:
  bool _internal_has_fp3() const;
  public:
  void clear_fp3();
  const ::Practice& fp3() const;
  PROTOBUF_NODISCARD ::Practice* release_fp3();
  ::Practice* mutable_fp3();
  void set_allocated_fp3(::Practice* fp3);
  private:
  const ::Practice& _internal_fp3() const;
  ::Practice* _internal_mutable_fp3();
  public:
  void unsafe_arena_set_allocated_fp3(
      ::Practice* fp3);
  ::Practice* unsafe_arena_release_fp3();

  // .Qualifying qualifying = 4;
  bool has_qualifying() const;
  private:
  bool _internal_has_qualifying() const;
  public:
  void clear_qualifying();
  const ::Qualifying& qualifying() const;
  PROTOBUF_NODISCARD ::Qualifying* release_qualifying();
  ::Qualifying* mutable_qualifying();
  void set_allocated_qualifying(::Qualifying* qualifying);
  private:
  const ::Qualifying& _internal_qualifying() const;
  ::Qualifying* _internal_mutable_qualifying();
  public:
  void unsafe_arena_set_allocated_qualifying(
      ::Qualifying* qualifying);
  ::Qualifying* unsafe_arena_release_qualifying();

  // .Race race = 5;
  bool has_race() const;
  private:
  bool _internal_has_race() const;
  public:
  void clear_race();
  const ::Race& race() const;
  PROTOBUF_NODISCARD ::Race* release_race();
  ::Race* mutable_race();
  void set_allocated_race(::Race* race);
  private:
  const ::Race& _internal_race() const;
  ::Race* _internal_mutable_race();
  public:
  void unsafe_arena_set_allocated_race(
      ::Race* race);
  ::Race* unsafe_arena_release_race();

  // @@protoc_insertion_point(class_scope:RaceSessions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Practice* fp1_;
    ::Practice* fp2_;
    ::Practice* fp3_;
    ::Qualifying* qualifying_;
    ::Race* race_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaceSessions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaceSessions

// .Practice fp1 = 1;
inline bool RaceSessions::_internal_has_fp1() const {
  return this != internal_default_instance() && _impl_.fp1_ != nullptr;
}
inline bool RaceSessions::has_fp1() const {
  return _internal_has_fp1();
}
inline const ::Practice& RaceSessions::_internal_fp1() const {
  const ::Practice* p = _impl_.fp1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Practice&>(
      ::_Practice_default_instance_);
}
inline const ::Practice& RaceSessions::fp1() const {
  // @@protoc_insertion_point(field_get:RaceSessions.fp1)
  return _internal_fp1();
}
inline void RaceSessions::unsafe_arena_set_allocated_fp1(
    ::Practice* fp1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fp1_);
  }
  _impl_.fp1_ = fp1;
  if (fp1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceSessions.fp1)
}
inline ::Practice* RaceSessions::release_fp1() {
  
  ::Practice* temp = _impl_.fp1_;
  _impl_.fp1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Practice* RaceSessions::unsafe_arena_release_fp1() {
  // @@protoc_insertion_point(field_release:RaceSessions.fp1)
  
  ::Practice* temp = _impl_.fp1_;
  _impl_.fp1_ = nullptr;
  return temp;
}
inline ::Practice* RaceSessions::_internal_mutable_fp1() {
  
  if (_impl_.fp1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Practice>(GetArenaForAllocation());
    _impl_.fp1_ = p;
  }
  return _impl_.fp1_;
}
inline ::Practice* RaceSessions::mutable_fp1() {
  ::Practice* _msg = _internal_mutable_fp1();
  // @@protoc_insertion_point(field_mutable:RaceSessions.fp1)
  return _msg;
}
inline void RaceSessions::set_allocated_fp1(::Practice* fp1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fp1_);
  }
  if (fp1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fp1));
    if (message_arena != submessage_arena) {
      fp1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fp1_ = fp1;
  // @@protoc_insertion_point(field_set_allocated:RaceSessions.fp1)
}

// .Practice fp2 = 2;
inline bool RaceSessions::_internal_has_fp2() const {
  return this != internal_default_instance() && _impl_.fp2_ != nullptr;
}
inline bool RaceSessions::has_fp2() const {
  return _internal_has_fp2();
}
inline const ::Practice& RaceSessions::_internal_fp2() const {
  const ::Practice* p = _impl_.fp2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Practice&>(
      ::_Practice_default_instance_);
}
inline const ::Practice& RaceSessions::fp2() const {
  // @@protoc_insertion_point(field_get:RaceSessions.fp2)
  return _internal_fp2();
}
inline void RaceSessions::unsafe_arena_set_allocated_fp2(
    ::Practice* fp2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fp2_);
  }
  _impl_.fp2_ = fp2;
  if (fp2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceSessions.fp2)
}
inline ::Practice* RaceSessions::release_fp2() {
  
  ::Practice* temp = _impl_.fp2_;
  _impl_.fp2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Practice* RaceSessions::unsafe_arena_release_fp2() {
  // @@protoc_insertion_point(field_release:RaceSessions.fp2)
  
  ::Practice* temp = _impl_.fp2_;
  _impl_.fp2_ = nullptr;
  return temp;
}
inline ::Practice* RaceSessions::_internal_mutable_fp2() {
  
  if (_impl_.fp2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Practice>(GetArenaForAllocation());
    _impl_.fp2_ = p;
  }
  return _impl_.fp2_;
}
inline ::Practice* RaceSessions::mutable_fp2() {
  ::Practice* _msg = _internal_mutable_fp2();
  // @@protoc_insertion_point(field_mutable:RaceSessions.fp2)
  return _msg;
}
inline void RaceSessions::set_allocated_fp2(::Practice* fp2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fp2_);
  }
  if (fp2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fp2));
    if (message_arena != submessage_arena) {
      fp2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fp2_ = fp2;
  // @@protoc_insertion_point(field_set_allocated:RaceSessions.fp2)
}

// .Practice fp3 = 3;
inline bool RaceSessions::_internal_has_fp3() const {
  return this != internal_default_instance() && _impl_.fp3_ != nullptr;
}
inline bool RaceSessions::has_fp3() const {
  return _internal_has_fp3();
}
inline const ::Practice& RaceSessions::_internal_fp3() const {
  const ::Practice* p = _impl_.fp3_;
  return p != nullptr ? *p : reinterpret_cast<const ::Practice&>(
      ::_Practice_default_instance_);
}
inline const ::Practice& RaceSessions::fp3() const {
  // @@protoc_insertion_point(field_get:RaceSessions.fp3)
  return _internal_fp3();
}
inline void RaceSessions::unsafe_arena_set_allocated_fp3(
    ::Practice* fp3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fp3_);
  }
  _impl_.fp3_ = fp3;
  if (fp3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceSessions.fp3)
}
inline ::Practice* RaceSessions::release_fp3() {
  
  ::Practice* temp = _impl_.fp3_;
  _impl_.fp3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Practice* RaceSessions::unsafe_arena_release_fp3() {
  // @@protoc_insertion_point(field_release:RaceSessions.fp3)
  
  ::Practice* temp = _impl_.fp3_;
  _impl_.fp3_ = nullptr;
  return temp;
}
inline ::Practice* RaceSessions::_internal_mutable_fp3() {
  
  if (_impl_.fp3_ == nullptr) {
    auto* p = CreateMaybeMessage<::Practice>(GetArenaForAllocation());
    _impl_.fp3_ = p;
  }
  return _impl_.fp3_;
}
inline ::Practice* RaceSessions::mutable_fp3() {
  ::Practice* _msg = _internal_mutable_fp3();
  // @@protoc_insertion_point(field_mutable:RaceSessions.fp3)
  return _msg;
}
inline void RaceSessions::set_allocated_fp3(::Practice* fp3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fp3_);
  }
  if (fp3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fp3));
    if (message_arena != submessage_arena) {
      fp3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fp3_ = fp3;
  // @@protoc_insertion_point(field_set_allocated:RaceSessions.fp3)
}

// .Qualifying qualifying = 4;
inline bool RaceSessions::_internal_has_qualifying() const {
  return this != internal_default_instance() && _impl_.qualifying_ != nullptr;
}
inline bool RaceSessions::has_qualifying() const {
  return _internal_has_qualifying();
}
inline const ::Qualifying& RaceSessions::_internal_qualifying() const {
  const ::Qualifying* p = _impl_.qualifying_;
  return p != nullptr ? *p : reinterpret_cast<const ::Qualifying&>(
      ::_Qualifying_default_instance_);
}
inline const ::Qualifying& RaceSessions::qualifying() const {
  // @@protoc_insertion_point(field_get:RaceSessions.qualifying)
  return _internal_qualifying();
}
inline void RaceSessions::unsafe_arena_set_allocated_qualifying(
    ::Qualifying* qualifying) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qualifying_);
  }
  _impl_.qualifying_ = qualifying;
  if (qualifying) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceSessions.qualifying)
}
inline ::Qualifying* RaceSessions::release_qualifying() {
  
  ::Qualifying* temp = _impl_.qualifying_;
  _impl_.qualifying_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Qualifying* RaceSessions::unsafe_arena_release_qualifying() {
  // @@protoc_insertion_point(field_release:RaceSessions.qualifying)
  
  ::Qualifying* temp = _impl_.qualifying_;
  _impl_.qualifying_ = nullptr;
  return temp;
}
inline ::Qualifying* RaceSessions::_internal_mutable_qualifying() {
  
  if (_impl_.qualifying_ == nullptr) {
    auto* p = CreateMaybeMessage<::Qualifying>(GetArenaForAllocation());
    _impl_.qualifying_ = p;
  }
  return _impl_.qualifying_;
}
inline ::Qualifying* RaceSessions::mutable_qualifying() {
  ::Qualifying* _msg = _internal_mutable_qualifying();
  // @@protoc_insertion_point(field_mutable:RaceSessions.qualifying)
  return _msg;
}
inline void RaceSessions::set_allocated_qualifying(::Qualifying* qualifying) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qualifying_);
  }
  if (qualifying) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qualifying));
    if (message_arena != submessage_arena) {
      qualifying = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qualifying, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.qualifying_ = qualifying;
  // @@protoc_insertion_point(field_set_allocated:RaceSessions.qualifying)
}

// .Race race = 5;
inline bool RaceSessions::_internal_has_race() const {
  return this != internal_default_instance() && _impl_.race_ != nullptr;
}
inline bool RaceSessions::has_race() const {
  return _internal_has_race();
}
inline const ::Race& RaceSessions::_internal_race() const {
  const ::Race* p = _impl_.race_;
  return p != nullptr ? *p : reinterpret_cast<const ::Race&>(
      ::_Race_default_instance_);
}
inline const ::Race& RaceSessions::race() const {
  // @@protoc_insertion_point(field_get:RaceSessions.race)
  return _internal_race();
}
inline void RaceSessions::unsafe_arena_set_allocated_race(
    ::Race* race) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.race_);
  }
  _impl_.race_ = race;
  if (race) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RaceSessions.race)
}
inline ::Race* RaceSessions::release_race() {
  
  ::Race* temp = _impl_.race_;
  _impl_.race_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Race* RaceSessions::unsafe_arena_release_race() {
  // @@protoc_insertion_point(field_release:RaceSessions.race)
  
  ::Race* temp = _impl_.race_;
  _impl_.race_ = nullptr;
  return temp;
}
inline ::Race* RaceSessions::_internal_mutable_race() {
  
  if (_impl_.race_ == nullptr) {
    auto* p = CreateMaybeMessage<::Race>(GetArenaForAllocation());
    _impl_.race_ = p;
  }
  return _impl_.race_;
}
inline ::Race* RaceSessions::mutable_race() {
  ::Race* _msg = _internal_mutable_race();
  // @@protoc_insertion_point(field_mutable:RaceSessions.race)
  return _msg;
}
inline void RaceSessions::set_allocated_race(::Race* race) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.race_);
  }
  if (race) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(race));
    if (message_arena != submessage_arena) {
      race = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, race, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.race_ = race;
  // @@protoc_insertion_point(field_set_allocated:RaceSessions.race)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RaceSessions_2eproto
