// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaceSessions.proto

#include "RaceSessions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RaceSessions::RaceSessions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fp1_)*/nullptr
  , /*decltype(_impl_.fp2_)*/nullptr
  , /*decltype(_impl_.fp3_)*/nullptr
  , /*decltype(_impl_.qualifying_)*/nullptr
  , /*decltype(_impl_.race_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaceSessionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaceSessionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaceSessionsDefaultTypeInternal() {}
  union {
    RaceSessions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaceSessionsDefaultTypeInternal _RaceSessions_default_instance_;
static ::_pb::Metadata file_level_metadata_RaceSessions_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RaceSessions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RaceSessions_2eproto = nullptr;

const uint32_t TableStruct_RaceSessions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaceSessions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaceSessions, _impl_.fp1_),
  PROTOBUF_FIELD_OFFSET(::RaceSessions, _impl_.fp2_),
  PROTOBUF_FIELD_OFFSET(::RaceSessions, _impl_.fp3_),
  PROTOBUF_FIELD_OFFSET(::RaceSessions, _impl_.qualifying_),
  PROTOBUF_FIELD_OFFSET(::RaceSessions, _impl_.race_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RaceSessions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RaceSessions_default_instance_._instance,
};

const char descriptor_table_protodef_RaceSessions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022RaceSessions.proto\032\016Practice.proto\032\020Qu"
  "alifying.proto\032\nRace.proto\"\214\001\n\014RaceSessi"
  "ons\022\026\n\003fp1\030\001 \001(\0132\t.Practice\022\026\n\003fp2\030\002 \001(\013"
  "2\t.Practice\022\026\n\003fp3\030\003 \001(\0132\t.Practice\022\037\n\nq"
  "ualifying\030\004 \001(\0132\013.Qualifying\022\023\n\004race\030\005 \001"
  "(\0132\005.Raceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_RaceSessions_2eproto_deps[3] = {
  &::descriptor_table_Practice_2eproto,
  &::descriptor_table_Qualifying_2eproto,
  &::descriptor_table_Race_2eproto,
};
static ::_pbi::once_flag descriptor_table_RaceSessions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RaceSessions_2eproto = {
    false, false, 217, descriptor_table_protodef_RaceSessions_2eproto,
    "RaceSessions.proto",
    &descriptor_table_RaceSessions_2eproto_once, descriptor_table_RaceSessions_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_RaceSessions_2eproto::offsets,
    file_level_metadata_RaceSessions_2eproto, file_level_enum_descriptors_RaceSessions_2eproto,
    file_level_service_descriptors_RaceSessions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RaceSessions_2eproto_getter() {
  return &descriptor_table_RaceSessions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RaceSessions_2eproto(&descriptor_table_RaceSessions_2eproto);

// ===================================================================

class RaceSessions::_Internal {
 public:
  static const ::Practice& fp1(const RaceSessions* msg);
  static const ::Practice& fp2(const RaceSessions* msg);
  static const ::Practice& fp3(const RaceSessions* msg);
  static const ::Qualifying& qualifying(const RaceSessions* msg);
  static const ::Race& race(const RaceSessions* msg);
};

const ::Practice&
RaceSessions::_Internal::fp1(const RaceSessions* msg) {
  return *msg->_impl_.fp1_;
}
const ::Practice&
RaceSessions::_Internal::fp2(const RaceSessions* msg) {
  return *msg->_impl_.fp2_;
}
const ::Practice&
RaceSessions::_Internal::fp3(const RaceSessions* msg) {
  return *msg->_impl_.fp3_;
}
const ::Qualifying&
RaceSessions::_Internal::qualifying(const RaceSessions* msg) {
  return *msg->_impl_.qualifying_;
}
const ::Race&
RaceSessions::_Internal::race(const RaceSessions* msg) {
  return *msg->_impl_.race_;
}
void RaceSessions::clear_fp1() {
  if (GetArenaForAllocation() == nullptr && _impl_.fp1_ != nullptr) {
    delete _impl_.fp1_;
  }
  _impl_.fp1_ = nullptr;
}
void RaceSessions::clear_fp2() {
  if (GetArenaForAllocation() == nullptr && _impl_.fp2_ != nullptr) {
    delete _impl_.fp2_;
  }
  _impl_.fp2_ = nullptr;
}
void RaceSessions::clear_fp3() {
  if (GetArenaForAllocation() == nullptr && _impl_.fp3_ != nullptr) {
    delete _impl_.fp3_;
  }
  _impl_.fp3_ = nullptr;
}
void RaceSessions::clear_qualifying() {
  if (GetArenaForAllocation() == nullptr && _impl_.qualifying_ != nullptr) {
    delete _impl_.qualifying_;
  }
  _impl_.qualifying_ = nullptr;
}
void RaceSessions::clear_race() {
  if (GetArenaForAllocation() == nullptr && _impl_.race_ != nullptr) {
    delete _impl_.race_;
  }
  _impl_.race_ = nullptr;
}
RaceSessions::RaceSessions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaceSessions)
}
RaceSessions::RaceSessions(const RaceSessions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaceSessions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fp1_){nullptr}
    , decltype(_impl_.fp2_){nullptr}
    , decltype(_impl_.fp3_){nullptr}
    , decltype(_impl_.qualifying_){nullptr}
    , decltype(_impl_.race_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fp1()) {
    _this->_impl_.fp1_ = new ::Practice(*from._impl_.fp1_);
  }
  if (from._internal_has_fp2()) {
    _this->_impl_.fp2_ = new ::Practice(*from._impl_.fp2_);
  }
  if (from._internal_has_fp3()) {
    _this->_impl_.fp3_ = new ::Practice(*from._impl_.fp3_);
  }
  if (from._internal_has_qualifying()) {
    _this->_impl_.qualifying_ = new ::Qualifying(*from._impl_.qualifying_);
  }
  if (from._internal_has_race()) {
    _this->_impl_.race_ = new ::Race(*from._impl_.race_);
  }
  // @@protoc_insertion_point(copy_constructor:RaceSessions)
}

inline void RaceSessions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fp1_){nullptr}
    , decltype(_impl_.fp2_){nullptr}
    , decltype(_impl_.fp3_){nullptr}
    , decltype(_impl_.qualifying_){nullptr}
    , decltype(_impl_.race_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RaceSessions::~RaceSessions() {
  // @@protoc_insertion_point(destructor:RaceSessions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaceSessions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fp1_;
  if (this != internal_default_instance()) delete _impl_.fp2_;
  if (this != internal_default_instance()) delete _impl_.fp3_;
  if (this != internal_default_instance()) delete _impl_.qualifying_;
  if (this != internal_default_instance()) delete _impl_.race_;
}

void RaceSessions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaceSessions::Clear() {
// @@protoc_insertion_point(message_clear_start:RaceSessions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fp1_ != nullptr) {
    delete _impl_.fp1_;
  }
  _impl_.fp1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fp2_ != nullptr) {
    delete _impl_.fp2_;
  }
  _impl_.fp2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fp3_ != nullptr) {
    delete _impl_.fp3_;
  }
  _impl_.fp3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.qualifying_ != nullptr) {
    delete _impl_.qualifying_;
  }
  _impl_.qualifying_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.race_ != nullptr) {
    delete _impl_.race_;
  }
  _impl_.race_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaceSessions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Practice fp1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Practice fp2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Practice fp3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Qualifying qualifying = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qualifying(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Race race = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_race(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaceSessions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaceSessions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Practice fp1 = 1;
  if (this->_internal_has_fp1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fp1(this),
        _Internal::fp1(this).GetCachedSize(), target, stream);
  }

  // .Practice fp2 = 2;
  if (this->_internal_has_fp2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fp2(this),
        _Internal::fp2(this).GetCachedSize(), target, stream);
  }

  // .Practice fp3 = 3;
  if (this->_internal_has_fp3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fp3(this),
        _Internal::fp3(this).GetCachedSize(), target, stream);
  }

  // .Qualifying qualifying = 4;
  if (this->_internal_has_qualifying()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::qualifying(this),
        _Internal::qualifying(this).GetCachedSize(), target, stream);
  }

  // .Race race = 5;
  if (this->_internal_has_race()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::race(this),
        _Internal::race(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaceSessions)
  return target;
}

size_t RaceSessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaceSessions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Practice fp1 = 1;
  if (this->_internal_has_fp1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fp1_);
  }

  // .Practice fp2 = 2;
  if (this->_internal_has_fp2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fp2_);
  }

  // .Practice fp3 = 3;
  if (this->_internal_has_fp3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fp3_);
  }

  // .Qualifying qualifying = 4;
  if (this->_internal_has_qualifying()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.qualifying_);
  }

  // .Race race = 5;
  if (this->_internal_has_race()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.race_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaceSessions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaceSessions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaceSessions::GetClassData() const { return &_class_data_; }


void RaceSessions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaceSessions*>(&to_msg);
  auto& from = static_cast<const RaceSessions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaceSessions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fp1()) {
    _this->_internal_mutable_fp1()->::Practice::MergeFrom(
        from._internal_fp1());
  }
  if (from._internal_has_fp2()) {
    _this->_internal_mutable_fp2()->::Practice::MergeFrom(
        from._internal_fp2());
  }
  if (from._internal_has_fp3()) {
    _this->_internal_mutable_fp3()->::Practice::MergeFrom(
        from._internal_fp3());
  }
  if (from._internal_has_qualifying()) {
    _this->_internal_mutable_qualifying()->::Qualifying::MergeFrom(
        from._internal_qualifying());
  }
  if (from._internal_has_race()) {
    _this->_internal_mutable_race()->::Race::MergeFrom(
        from._internal_race());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaceSessions::CopyFrom(const RaceSessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaceSessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceSessions::IsInitialized() const {
  return true;
}

void RaceSessions::InternalSwap(RaceSessions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaceSessions, _impl_.race_)
      + sizeof(RaceSessions::_impl_.race_)
      - PROTOBUF_FIELD_OFFSET(RaceSessions, _impl_.fp1_)>(
          reinterpret_cast<char*>(&_impl_.fp1_),
          reinterpret_cast<char*>(&other->_impl_.fp1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaceSessions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RaceSessions_2eproto_getter, &descriptor_table_RaceSessions_2eproto_once,
      file_level_metadata_RaceSessions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RaceSessions*
Arena::CreateMaybeMessage< ::RaceSessions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaceSessions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
